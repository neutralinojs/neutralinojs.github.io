"use strict";(self.webpackChunkneutralinojs_github_io=self.webpackChunkneutralinojs_github_io||[]).push([[9172],{5796:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});var d=n(4848),r=n(8453);const l={title:"Internal CLI Arguments"},o=void 0,t={id:"cli/internal-cli-arguments",title:"Internal CLI Arguments",description:"neu CLI wraps Neutralinojs's internal CLI arguments to provide a simple interface for developers. For example,",source:"@site/docs/cli/internal-cli-arguments.md",sourceDirName:"cli",slug:"/cli/internal-cli-arguments",permalink:"/docs/cli/internal-cli-arguments",draft:!1,unlisted:!1,editUrl:"https://github.com/neutralinojs/neutralinojs.github.io/edit/main/docs/cli/internal-cli-arguments.md",tags:[],version:"current",frontMatter:{title:"Internal CLI Arguments"},sidebar:"docs",previous:{title:"neu CLI",permalink:"/docs/cli/neu-cli"},next:{title:"neutralino.config.json",permalink:"/docs/configuration/neutralino.config.json"}},s={},a=[{value:"General",id:"general",level:2},{value:"<code>--res-mode=&lt;mode&gt;</code>",id:"--res-modemode",level:3},{value:'<code>--load-dir-res</code> <span class="badge badge--warning">Deprecated</span>',id:"--load-dir-res-deprecated",level:3},{value:"<code>--config-file=&lt;filename&gt;</code>",id:"--config-filefilename",level:3},{value:"<code>--path=&lt;path&gt;</code>",id:"--pathpath",level:3},{value:"<code>--mode=&lt;mode&gt;</code>",id:"--modemode",level:3},{value:"<code>--neu-dev-auto-reload</code>",id:"--neu-dev-auto-reload",level:3},{value:"<code>--neu-dev-extension</code>",id:"--neu-dev-extension",level:3},{value:"<code>--url=&lt;url&gt;</code>",id:"--urlurl",level:3},{value:"<code>--document-root=&lt;url&gt;</code>",id:"--document-rooturl",level:3},{value:"<code>--port=&lt;port&gt;</code>",id:"--portport",level:3},{value:"<code>--logging-enabled=&lt;true|false&gt;</code>",id:"--logging-enabledtruefalse",level:3},{value:"<code>--logging-write-to-log-file=&lt;true|false&gt;</code>",id:"--logging-write-to-log-filetruefalse",level:3},{value:"<code>--export-auth-info=&lt;true|false&gt;</code>",id:"--export-auth-infotruefalse",level:3},{value:"<code>--enable-extensions=&lt;true|false&gt;</code>",id:"--enable-extensionstruefalse",level:3},{value:"<code>--enable-server=&lt;true|false&gt;</code>",id:"--enable-servertruefalse",level:3},{value:"<code>--enable-native-api=&lt;true|false&gt;</code>",id:"--enable-native-apitruefalse",level:3},{value:"<code>--single-page-serve=&lt;true|false&gt;</code>",id:"--single-page-servetruefalse",level:3},{value:"Window mode",id:"window-mode",level:2},{value:"<code>--window-title=&lt;title&gt;</code>",id:"--window-titletitle",level:3},{value:"<code>--window-icon=&lt;icon_path&gt;</code>",id:"--window-iconicon_path",level:3},{value:"<code>--window-full-screen=&lt;true|false&gt;</code>",id:"--window-full-screentruefalse",level:3},{value:"<code>--window-always-on-top=&lt;true|false&gt;</code>",id:"--window-always-on-toptruefalse",level:3},{value:"<code>--window-borderless=&lt;true|false&gt;</code>",id:"--window-borderlesstruefalse",level:3},{value:"<code>--window-maximize=&lt;true|false&gt;</code>",id:"--window-maximizetruefalse",level:3},{value:"<code>--window-hidden=&lt;true|false&gt;</code>",id:"--window-hiddentruefalse",level:3},{value:"<code>--window-maximizable=&lt;true|false&gt;</code>",id:"--window-maximizabletruefalse",level:3},{value:"<code>--window-width=&lt;number&gt;</code>",id:"--window-widthnumber",level:3},{value:"<code>--window-height=&lt;number&gt;</code>",id:"--window-heightnumber",level:3},{value:"<code>--window-min-width=&lt;number&gt;</code>",id:"--window-min-widthnumber",level:3},{value:"<code>--window-min-height=&lt;number&gt;</code>",id:"--window-min-heightnumber",level:3},{value:"<code>--window-max-width=&lt;number&gt;</code>",id:"--window-max-widthnumber",level:3},{value:"<code>--window-max-height=&lt;number&gt;</code>",id:"--window-max-heightnumber",level:3},{value:"<code>--window-x=&lt;number&gt;</code>",id:"--window-xnumber",level:3},{value:"<code>--window-y=&lt;number&gt;</code>",id:"--window-ynumber",level:3},{value:"<code>--window-center=&lt;true|false&gt;</code>",id:"--window-centertruefalse",level:3},{value:"<code>--window-transparent=&lt;true|false&gt;</code>",id:"--window-transparenttruefalse",level:3},{value:"<code>--window-resizable=&lt;true|false&gt;</code>",id:"--window-resizabletruefalse",level:3},{value:"<code>--window-skip-taskbar=&lt;true|false&gt;</code>",id:"--window-skip-taskbartruefalse",level:3},{value:"<code>--window-exit-process-on-close=&lt;true|false&gt;</code>",id:"--window-exit-process-on-closetruefalse",level:3},{value:"<code>--window-enable-inspector=&lt;true|false&gt;</code>",id:"--window-enable-inspectortruefalse",level:3},{value:"<code>--window-open-inspector-on-startup=&lt;true|false&gt;</code>",id:"--window-open-inspector-on-startuptruefalse",level:3},{value:"<code>--window-use-saved-state=&lt;true|false&gt;</code>",id:"--window-use-saved-statetruefalse",level:3},{value:"<code>--window-extend-user-agent-with=&lt;suffix&gt;</code>",id:"--window-extend-user-agent-withsuffix",level:3},{value:"<code>--window-inject-globals=&lt;true|false&gt;</code>",id:"--window-inject-globalstruefalse",level:3},{value:"<code>--window-inject-client-library=&lt;true|false&gt;</code>",id:"--window-inject-client-librarytruefalse",level:3},{value:"<code>--window-inject-script=&lt;script_path&gt;</code>",id:"--window-inject-scriptscript_path",level:3},{value:"Chrome mode",id:"chrome-mode",level:2},{value:"<code>--chrome-width=&lt;number&gt;</code>",id:"--chrome-widthnumber",level:3},{value:"<code>--chrome-height=&lt;number&gt;</code>",id:"--chrome-heightnumber",level:3},{value:"<code>--chrome-args=&lt;arg_list&gt;</code>",id:"--chrome-argsarg_list",level:3}];function c(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(i.p,{children:["neu CLI wraps Neutralinojs's internal CLI arguments to provide a simple interface for developers. For example,\nthe ",(0,d.jsx)(i.code,{children:"neu run"})," command internally calls\n",(0,d.jsx)(i.code,{children:"./bin/neutralino-linux_x64 --load-dir-res --path=. --neu-dev-extension --neu-dev-auto-reload"}),"\non Linux. You can build neu CLI, Node.js, and npm to build Neutralinojs apps. But, neu CLI\noffers a simple, fast, and easy tooling for application developers to create, manage, and bundle Neutralinojs apps."]}),"\n",(0,d.jsxs)(i.p,{children:["Neutralinojs supports the following CLI arguments. Many internal CLI arguments help developers to override\ndefault configuration defined inside the ",(0,d.jsx)(i.a,{href:"/docs/configuration/neutralino.config.json",children:(0,d.jsx)(i.code,{children:"neutralino.config.json"})})," file. If you use Neutralinojs as a part of your\nsource files via child process API, you can use the following arguments to configure the application instance."]}),"\n",(0,d.jsx)(i.h2,{id:"general",children:"General"}),"\n",(0,d.jsx)(i.h3,{id:"--res-modemode",children:(0,d.jsx)(i.code,{children:"--res-mode=<mode>"})}),"\n",(0,d.jsx)(i.p,{children:"Sets the default resource loading mode. The following values are accepted:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"embedded"})," (default): Loads resources from the binary itself if resources are injected to binaries via the ",(0,d.jsx)(i.code,{children:"neu build --embed-resources"})," command."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"bundle"}),": Loads resources from the ",(0,d.jsx)(i.code,{children:"resources.neu"})," file stored near the binary."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"directory"}),": Loads resources from the application resources directory."]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"The framework tries to load app configuration and resources from the above order and loads a default app configuration if all the above modes fail."}),"\n",(0,d.jsxs)(i.h3,{id:"--load-dir-res-deprecated",children:[(0,d.jsx)(i.code,{children:"--load-dir-res"})," ",(0,d.jsx)("span",{class:"badge badge--warning",children:"Deprecated"})]}),"\n",(0,d.jsxs)(i.p,{children:["Notifies Neutralinojs server to fetch files from the resources directory. If this flag is not provided,\nNeutralinojs server will load resources from the ",(0,d.jsx)(i.code,{children:"resources.neu"})," file."]}),"\n",(0,d.jsx)(i.admonition,{type:"tip",children:(0,d.jsxs)(i.p,{children:["If Neutralinojs fails to load resources ",(0,d.jsx)(i.code,{children:"resources.neu"}),",\nthis flag is automatically enabled internally to find resources from the app directory.\nTherefore, you can double click on the binary instead of ",(0,d.jsx)(i.code,{children:"neu run"})," while developing apps."]})}),"\n",(0,d.jsx)(i.admonition,{type:"warning",children:(0,d.jsxs)(i.p,{children:["The ",(0,d.jsx)(i.code,{children:"--load-dir-res"})," option is deprecated and will be removed in upcoming versions. You should use ",(0,d.jsx)(i.code,{children:"--res-mode=directory"})," instead."]})}),"\n",(0,d.jsx)(i.h3,{id:"--config-filefilename",children:(0,d.jsx)(i.code,{children:"--config-file=<filename>"})}),"\n",(0,d.jsxs)(i.p,{children:["Uses a custom configuration file instead of the default ",(0,d.jsx)(i.code,{children:"neutralino.config.json"})," file for loading the app\nconfiguration JSON. This CLI option is helpful for setting a development-only configuration file\n(i.e., ",(0,d.jsx)(i.code,{children:"--config-file=neutralino-dev.config.json"}),")."]}),"\n",(0,d.jsx)(i.admonition,{type:"info",children:(0,d.jsxs)(i.p,{children:["The ",(0,d.jsx)(i.code,{children:"neu build"})," command won't typically\ninclude custom configuration files for the final application bundle \u2014 it only embeds the default\n",(0,d.jsx)(i.code,{children:"neutralino.config.json"})," file allowing you to store production app configuration."]})}),"\n",(0,d.jsx)(i.h3,{id:"--pathpath",children:(0,d.jsx)(i.code,{children:"--path=<path>"})}),"\n",(0,d.jsxs)(i.p,{children:["Overrides the resources path with a relative path or absolute path. This will change the ",(0,d.jsx)(i.code,{children:"NL_PATH"})," global variable."]}),"\n",(0,d.jsx)(i.h3,{id:"--modemode",children:(0,d.jsx)(i.code,{children:"--mode=<mode>"})}),"\n",(0,d.jsxs)(i.p,{children:["Overrides the default mode. Accepted values are: ",(0,d.jsx)(i.code,{children:"window"}),", ",(0,d.jsx)(i.code,{children:"browser"}),", and ",(0,d.jsx)(i.code,{children:"cloud"}),"."]}),"\n",(0,d.jsx)(i.h3,{id:"--neu-dev-auto-reload",children:(0,d.jsx)(i.code,{children:"--neu-dev-auto-reload"})}),"\n",(0,d.jsxs)(i.p,{children:["Listens to the ",(0,d.jsx)(i.code,{children:"neuDev_reloadApp"})," event. When this CLI argument is provided, each modification done to the\nresources will automatically reload the application. The ",(0,d.jsx)(i.code,{children:"neu run"})," command executes Neutralinojs with\nthis flag by default."]}),"\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.code,{children:"--neu-dev-"})," is a reserved CLI argument prefix for Neutralinojs process. Therefore, avoid adding\ncustom arguments with ",(0,d.jsx)(i.code,{children:"--neu-dev-"})," prefix. Feel free to use the ",(0,d.jsx)(i.code,{children:"--dev-"})," prefix\nfor your development-related CLI flags."]}),"\n",(0,d.jsx)(i.h3,{id:"--neu-dev-extension",children:(0,d.jsx)(i.code,{children:"--neu-dev-extension"})}),"\n",(0,d.jsxs)(i.p,{children:["Loads ",(0,d.jsx)(i.code,{children:"js.neutralino.devtools"})," extension internally for development purposes. The neu CLI uses this CLI argument to\nestablish an IPC with the application process. This option only works if application resources are\nloaded from a directory (won't work for end-users)."]}),"\n",(0,d.jsx)(i.h3,{id:"--urlurl",children:(0,d.jsx)(i.code,{children:"--url=<url>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the URL on the application."}),"\n",(0,d.jsx)(i.h3,{id:"--document-rooturl",children:(0,d.jsx)(i.code,{children:"--document-root=<url>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the document root of the static server."}),"\n",(0,d.jsx)(i.h3,{id:"--portport",children:(0,d.jsx)(i.code,{children:"--port=<port>"})}),"\n",(0,d.jsxs)(i.p,{children:["Overrides the application port and will change the ",(0,d.jsx)(i.code,{children:"NL_PORT"})," global variable. If ",(0,d.jsx)(i.code,{children:"0"})," is given, Neutralino will use a random available port."]}),"\n",(0,d.jsx)(i.h3,{id:"--logging-enabledtruefalse",children:(0,d.jsx)(i.code,{children:"--logging-enabled=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the logging feature status."}),"\n",(0,d.jsx)(i.h3,{id:"--logging-write-to-log-filetruefalse",children:(0,d.jsx)(i.code,{children:"--logging-write-to-log-file=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the log file feature status."}),"\n",(0,d.jsx)(i.h3,{id:"--export-auth-infotruefalse",children:(0,d.jsx)(i.code,{children:"--export-auth-info=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides auth details export setting."}),"\n",(0,d.jsx)(i.h3,{id:"--enable-extensionstruefalse",children:(0,d.jsx)(i.code,{children:"--enable-extensions=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides extensions feature's availability."}),"\n",(0,d.jsx)(i.h3,{id:"--enable-servertruefalse",children:(0,d.jsx)(i.code,{children:"--enable-server=<true|false>"})}),"\n",(0,d.jsxs)(i.p,{children:["Enables or disables the background server (Disables static file servering feature and native API messaging).\nIf you load a remote URL to the webview, you can set this option to ",(0,d.jsx)(i.code,{children:"true"}),"."]}),"\n",(0,d.jsx)(i.h3,{id:"--enable-native-apitruefalse",children:(0,d.jsx)(i.code,{children:"--enable-native-api=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the primary native API execution permission."}),"\n",(0,d.jsx)(i.h3,{id:"--single-page-servetruefalse",children:(0,d.jsx)(i.code,{children:"--single-page-serve=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the single page serving option."}),"\n",(0,d.jsx)(i.h2,{id:"window-mode",children:"Window mode"}),"\n",(0,d.jsx)(i.p,{children:"The following CLI arguments are used when the application runs with the window mode."}),"\n",(0,d.jsx)(i.h3,{id:"--window-titletitle",children:(0,d.jsx)(i.code,{children:"--window-title=<title>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window title."}),"\n",(0,d.jsx)(i.h3,{id:"--window-iconicon_path",children:(0,d.jsx)(i.code,{children:"--window-icon=<icon_path>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window icon."}),"\n",(0,d.jsx)(i.h3,{id:"--window-full-screentruefalse",children:(0,d.jsx)(i.code,{children:"--window-full-screen=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's initial full screen status."}),"\n",(0,d.jsx)(i.h3,{id:"--window-always-on-toptruefalse",children:(0,d.jsx)(i.code,{children:"--window-always-on-top=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's initial top-most mode."}),"\n",(0,d.jsx)(i.h3,{id:"--window-borderlesstruefalse",children:(0,d.jsx)(i.code,{children:"--window-borderless=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's borderless mode."}),"\n",(0,d.jsx)(i.h3,{id:"--window-maximizetruefalse",children:(0,d.jsx)(i.code,{children:"--window-maximize=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's initial maximize status."}),"\n",(0,d.jsx)(i.h3,{id:"--window-hiddentruefalse",children:(0,d.jsx)(i.code,{children:"--window-hidden=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's initial visibility status."}),"\n",(0,d.jsx)(i.h3,{id:"--window-maximizabletruefalse",children:(0,d.jsx)(i.code,{children:"--window-maximizable=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's initial maximizable status."}),"\n",(0,d.jsx)(i.h3,{id:"--window-widthnumber",children:(0,d.jsx)(i.code,{children:"--window-width=<number>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window width."}),"\n",(0,d.jsx)(i.h3,{id:"--window-heightnumber",children:(0,d.jsx)(i.code,{children:"--window-height=<number>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window height."}),"\n",(0,d.jsx)(i.h3,{id:"--window-min-widthnumber",children:(0,d.jsx)(i.code,{children:"--window-min-width=<number>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's minimum width."}),"\n",(0,d.jsx)(i.h3,{id:"--window-min-heightnumber",children:(0,d.jsx)(i.code,{children:"--window-min-height=<number>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's minimum height."}),"\n",(0,d.jsx)(i.h3,{id:"--window-max-widthnumber",children:(0,d.jsx)(i.code,{children:"--window-max-width=<number>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's maximum width."}),"\n",(0,d.jsx)(i.h3,{id:"--window-max-heightnumber",children:(0,d.jsx)(i.code,{children:"--window-max-height=<number>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's maximum height."}),"\n",(0,d.jsx)(i.h3,{id:"--window-xnumber",children:(0,d.jsx)(i.code,{children:"--window-x=<number>"})}),"\n",(0,d.jsxs)(i.p,{children:["Overrides the window left (",(0,d.jsx)(i.code,{children:"x"}),") position."]}),"\n",(0,d.jsx)(i.h3,{id:"--window-ynumber",children:(0,d.jsx)(i.code,{children:"--window-y=<number>"})}),"\n",(0,d.jsxs)(i.p,{children:["Overrides the window top (",(0,d.jsx)(i.code,{children:"y"}),") position."]}),"\n",(0,d.jsx)(i.h3,{id:"--window-centertruefalse",children:(0,d.jsx)(i.code,{children:"--window-center=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's initial center positioning setup."}),"\n",(0,d.jsx)(i.h3,{id:"--window-transparenttruefalse",children:(0,d.jsx)(i.code,{children:"--window-transparent=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window transparency mode."}),"\n",(0,d.jsx)(i.h3,{id:"--window-resizabletruefalse",children:(0,d.jsx)(i.code,{children:"--window-resizable=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the window's initial resizability status."}),"\n",(0,d.jsx)(i.h3,{id:"--window-skip-taskbartruefalse",children:(0,d.jsx)(i.code,{children:"--window-skip-taskbar=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the skip taskbar setting."}),"\n",(0,d.jsx)(i.h3,{id:"--window-exit-process-on-closetruefalse",children:(0,d.jsx)(i.code,{children:"--window-exit-process-on-close=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the close button's behavior."}),"\n",(0,d.jsx)(i.h3,{id:"--window-enable-inspectortruefalse",children:(0,d.jsx)(i.code,{children:"--window-enable-inspector=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Enables web developer tools (inspector)."}),"\n",(0,d.jsx)(i.h3,{id:"--window-open-inspector-on-startuptruefalse",children:(0,d.jsx)(i.code,{children:"--window-open-inspector-on-startup=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Automatically opens the developer tools window on startup."}),"\n",(0,d.jsx)(i.h3,{id:"--window-use-saved-statetruefalse",children:(0,d.jsx)(i.code,{children:"--window-use-saved-state=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the saved window state feature setting."}),"\n",(0,d.jsx)(i.h3,{id:"--window-extend-user-agent-withsuffix",children:(0,d.jsx)(i.code,{children:"--window-extend-user-agent-with=<suffix>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the custom user agent setting."}),"\n",(0,d.jsx)(i.h3,{id:"--window-inject-globalstruefalse",children:(0,d.jsx)(i.code,{children:"--window-inject-globals=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the global variable injection setting."}),"\n",(0,d.jsx)(i.h3,{id:"--window-inject-client-librarytruefalse",children:(0,d.jsx)(i.code,{children:"--window-inject-client-library=<true|false>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the client library source injection setting."}),"\n",(0,d.jsx)(i.h3,{id:"--window-inject-scriptscript_path",children:(0,d.jsx)(i.code,{children:"--window-inject-script=<script_path>"})}),"\n",(0,d.jsx)(i.p,{children:"Overrides the preload script injection setting."}),"\n",(0,d.jsx)(i.h2,{id:"chrome-mode",children:"Chrome mode"}),"\n",(0,d.jsx)(i.p,{children:"The following CLI arguments are used when the application runs with the chrome mode."}),"\n",(0,d.jsx)(i.h3,{id:"--chrome-widthnumber",children:(0,d.jsx)(i.code,{children:"--chrome-width=<number>"})}),"\n",(0,d.jsx)(i.p,{children:"Chrome window's width."}),"\n",(0,d.jsx)(i.h3,{id:"--chrome-heightnumber",children:(0,d.jsx)(i.code,{children:"--chrome-height=<number>"})}),"\n",(0,d.jsx)(i.p,{children:"Chrome window's height."}),"\n",(0,d.jsx)(i.h3,{id:"--chrome-argsarg_list",children:(0,d.jsx)(i.code,{children:"--chrome-args=<arg_list>"})}),"\n",(0,d.jsxs)(i.p,{children:["Additional arguments for the Chrome process. Read more about chrome mode\nfrom ",(0,d.jsx)(i.a,{href:"/docs/configuration/modes#chrome",children:"here"})]}),"\n",(0,d.jsx)(i.admonition,{type:"tip",children:(0,d.jsxs)(i.p,{children:["The right hand value is optional for the for boolean type CLI arguments. Therefore, you can use ",(0,d.jsx)(i.code,{children:"--window-full-screen"}),"\ninstead of ",(0,d.jsx)(i.code,{children:"--window-full-screen=true"}),". However, if you define ",(0,d.jsx)(i.code,{children:"window.fullScreen"})," as ",(0,d.jsx)(i.code,{children:"true"})," and you need to override it as\n",(0,d.jsx)(i.code,{children:"false"})," you have to use ",(0,d.jsx)(i.code,{children:"--window-full-screen=false"}),"."]})})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>t});var d=n(6540);const r={},l=d.createContext(r);function o(e){const i=d.useContext(l);return d.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),d.createElement(l.Provider,{value:i},e.children)}}}]);