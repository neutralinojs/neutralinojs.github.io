{"searchDocs":[{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/","content":"","keywords":"","version":"Next"},{"title":"What is Neutralinojs?​","type":1,"pageTitle":"Introduction","url":"/docs/#what-is-neutralinojs","content":" Neutralinojs is a lightweight and portable desktop application development framework. It lets you develop lightweight cross-platform desktop applications using JavaScript, HTML and CSS. You can extend Neutralinojs with any programming language (via extensions IPC) and use Neutralinojs as a part of any source file (via child processes IPC).  ","version":"Next","tagName":"h2"},{"title":"Why Neutralinojs?​","type":1,"pageTitle":"Introduction","url":"/docs/#why-neutralinojs","content":" In Electron and NWjs, you have to install Node.js and hundreds of dependency libraries. Embedded Chromium and Node make simple apps bloaty. Neutralinojs offers a lightweight and portable SDK which is an alternative for Electron and NW.js. Neutralinojs doesn't bundle Chromium and uses the existing web browser library in the operating system (Eg: gtk-webkit2 on Linux). Neutralinojs implements a WebSocket connection for native operations and embeds a static web server to serve the web content. Also, it offers a built-inJavaScript client library for developers.  See comparisons:  Neutralinojs vs Electron vs NW.JS vs Tauri vs NodeGui vs Flutter vs .Net MAUINeutralinojs vs Electron vs NW.js (2018)  When you start learning Neutralinojs, you will realize that Neutralinojs answers endless use cases. For example, you can use Neutralinojs for the following scenarios.  Cross-platform desktop app development.Building web apps with native operations.Using as a cloud message broker.Connecting multiple processes by using as an IPC broker.and more...  ","version":"Next","tagName":"h2"},{"title":"Highlighted features​","type":1,"pageTitle":"Introduction","url":"/docs/#highlighted-features","content":" Portable development kit.No compilation required for application developers.No additional dependencies required for users.Native functions support: Read files, run system commands, etc.Less resource intensive compared to chromium-node-based frameworks.Cross-platform: Neutralinojs apps work on Linux, Windows, macOS, and Web.Simple and flexible development environment.  ","version":"Next","tagName":"h2"},{"title":"Supported platforms and CPU architectures​","type":1,"pageTitle":"Introduction","url":"/docs/#supported-platforms-and-cpu-architectures","content":" neu CLI provides you pre-built x64 binaries for Linux, macOS, and Windows. Additionally, it provides ARM (armhf/arm64) Linux binaries with the Neutralinojs framework v4.6.0 or newer versions and ARM (arm64) Darwin binaries with v4.10.0 or newer framework versions. We are trying to officially support all popular CPU architectures with the CLI soon! However, you can build Neutralinojs binaries from the source on almost all desktop operating systems and CPU architectures out there.  If you need Neutralinojs binaries for non-x64 CPU, learn how to build Neutralinojs from source with this guide. ","version":"Next","tagName":"h2"},{"title":"Neutralino.app","type":0,"sectionRef":"#","url":"/docs/api/app","content":"","keywords":"","version":"Next"},{"title":"app.exit(exitCode)​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#appexitexitcode","content":" Terminates the running application.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#parameters","content":" exitCode Number: Process's exit code. The default value is always 0 (success).  await Neutralino.app.exit(130); await Neutralino.app.exit();   ","version":"Next","tagName":"h3"},{"title":"app.killProcess()​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#appkillprocess","content":" Kills the application process. If the application becomes unresponsive, you can use this to terminate the process instantly. It is recommended to use the exit() method to close your application properly.  await Neutralino.app.killProcess();   ","version":"Next","tagName":"h2"},{"title":"app.restartProcess(options)​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#apprestartprocessoptions","content":" Restarts the current application instance.  ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#options","content":" args String: Additional command-line arguments that need to be passed to the new application instance's process.  await Neutralino.app.restartProcess(); await Neutralino.app.restartProcess({ args: '--restarted' });   ","version":"Next","tagName":"h3"},{"title":"app.getConfig()​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#appgetconfig","content":" Returns the current application configuration as a JSON object.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#return-object-awaited","content":" The current application configuration. Sometimes, this configuration object is not identical to your configuration file because the framework updates the configuration during several situations such as config overriding via CLI arguments and using 0 as the port.  let config = await Neutralino.app.getConfig(); console.log('URL = ', config.url);   ","version":"Next","tagName":"h3"},{"title":"app.broadcast(eventName, data)​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#appbroadcasteventname-data","content":" Dispatches a new event to all app instances.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#parameters-1","content":" eventName String: Name of the event.data Object (optional): Additional data for the event.  await Neutralino.app.broadcast('myTestEvent', 'Hello'); await Neutralino.app.broadcast('myTestEvent', {myData: 'Test data'}); await Neutralino.app.broadcast('myTestEvent');   ","version":"Next","tagName":"h3"},{"title":"app.readProcessInput(readAll)​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#appreadprocessinputreadall","content":" Reads string data from the standard input stream of the application process.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#parameters-2","content":" readAll Boolean (optional): If this is set to true, the framework will read the entire standard stream. Otherwise, only one line will be returned. The default value for this option is false.  let name = await Neutralino.app.readProcessInput(); console.log(`Hello ${name}`);   ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#return-string-awaited","content":" Standard input stream data.  ","version":"Next","tagName":"h3"},{"title":"app.writeProcessOutput(data)​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#appwriteprocessoutputdata","content":" Writes string data to the standard output stream of the application process.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#parameters-3","content":" data String: Data to be written.  await Neutralino.app.writeProcessOutput('Enter your name: '); let name = await Neutralino.app.readProcessInput(); await Neutralino.app.writeProcessOutput(`Hello ${name}\\n`);   ","version":"Next","tagName":"h3"},{"title":"app.writeProcessError(data)​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#appwriteprocesserrordata","content":" Writes string data to the standard error stream of the application process.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.app","url":"/docs/api/app#parameters-4","content":" data String: Data to be written.  await Neutralino.app.writeProcessError('This message goes to stderr');  ","version":"Next","tagName":"h3"},{"title":"Neutralino.custom","type":0,"sectionRef":"#","url":"/docs/api/custom","content":"","keywords":"","version":"Next"},{"title":"custom.getMethods()​","type":1,"pageTitle":"Neutralino.custom","url":"/docs/api/custom#customgetmethods","content":" Returns all custom methods added by the app developer.  ","version":"Next","tagName":"h2"},{"title":"Return Array (awaited):​","type":1,"pageTitle":"Neutralino.custom","url":"/docs/api/custom#return-array-awaited","content":" A string array of all custom method identifiers.  let methods = await Neutralino.custom.getMethods(); console.log(methods);   ","version":"Next","tagName":"h3"},{"title":"custom.add(num1, num2, options)​","type":1,"pageTitle":"Neutralino.custom","url":"/docs/api/custom#customaddnum1-num2-options","content":" info This is a sample method and official Neutralinojs framework builds don't include this method by default. So, you have to download the Neutralinojs framework source code and uncomment the add method in thecustom namespace androuter.cpp.  This method returns the sum of two numbers for demonstration purposes of custom methods.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.custom","url":"/docs/api/custom#parameters","content":" num1 Number: The first number for the summation process.num2 Number: The second number for the summation process.  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"Neutralino.custom","url":"/docs/api/custom#options","content":" addExtraFive Boolean: Adds extra five to the numerical result.addExtraTen Boolean: Adds extra ten to the numerical result.  ","version":"Next","tagName":"h3"},{"title":"Return Number (awaited):​","type":1,"pageTitle":"Neutralino.custom","url":"/docs/api/custom#return-number-awaited","content":" The sum of input numerical parameters with extra value additions based on options.  let sum; sum = await Neutralino.custom.add(10, 10); // 20 sum = await Neutralino.custom.add(1, 1, { addExtraFive: true, addExtraTen: true }); // 17   Check the add method implementation and learn how to capture, validate, and process parameters in C++. For compiling your Neutralinojs fork, you can use the existingGitHub Actions workflows. ","version":"Next","tagName":"h3"},{"title":"Neutralino.debug","type":0,"sectionRef":"#","url":"/docs/api/debug","content":"","keywords":"","version":"Next"},{"title":"debug.log(message, type)​","type":1,"pageTitle":"Neutralino.debug","url":"/docs/api/debug#debuglogmessage-type","content":" Writes messages to neutralinojs.log file or/and standard output streams.   tip If your application is running via neu run, you can see log messages on your terminal.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.debug","url":"/docs/api/debug#parameters","content":" message String: Content to be logged.type String (optional): Type of the message. Accepted values are INFO, WARNING, and ERROR. The default value is INFO.  await Neutralino.debug.log('Hello Neutralinojs'); await Neutralino.debug.log('An error occured', 'ERROR'); await Neutralino.debug.log('A warning message', 'WARNING');  ","version":"Next","tagName":"h3"},{"title":"Neutralino.clipboard","type":0,"sectionRef":"#","url":"/docs/api/clipboard","content":"","keywords":"","version":"Next"},{"title":"clipboard.getFormat()​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#clipboardgetformat","content":" Returns the current data format of the system clipboard.   ","version":"Next","tagName":"h2"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#return-string-awaited","content":" Clipboard format: text, image, or unknown.  let format = await Neutralino.clipboard.getFormat(); console.log(`Format: ${format}`);   ","version":"Next","tagName":"h3"},{"title":"clipboard.writeText(text)​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#clipboardwritetexttext","content":" Writes text into the system clipboard.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#parameters","content":" text String: Text to store into the system clipboard.  await Neutralino.clipboard.writeText('Test value');   ","version":"Next","tagName":"h3"},{"title":"clipboard.writeHTML(html)​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#clipboardwritehtmlhtml","content":" Writes HTML into the system clipboard.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#parameters-1","content":" html String: HTML to store into the system clipboard.  await Neutralino.clipboard.writeHTML('&lt;p style=&quot;color:red;&quot;&gt;Formatted Text&lt;/p&gt;');   ","version":"Next","tagName":"h3"},{"title":"clipboard.writeImage(image)​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#clipboardwriteimageimage","content":" Writes image into the system clipboard.   ","version":"Next","tagName":"h2"},{"title":"Input Object: ClipboardImage​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#input-object-clipboardimage","content":" width: Number: Image width.height: Number: Image height.bpp: Number: Bits per pixel (BPP).bpr: Number: Bytes Per Row (BPR).redMask: Number: Red mask.greenMask: Number: Green mask.blueMask: Number: Blue mask.redShift: Number: Red shift.greeShift: Number: Green shift.blueShift: Number: Blue shift.data: ArrayBuffer: Raw RGBA binary data of the image in an array buffer.  let image = prepareClipboardImage(); await Neutralino.clipboard.writeImage(image);   ","version":"Next","tagName":"h3"},{"title":"clipboard.readText()​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#clipboardreadtext","content":" Reads and returns text from system clipboard.   ","version":"Next","tagName":"h2"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#return-string-awaited-1","content":" Stored text from the system clipboard.  let clipboardText = await Neutralino.clipboard.readText(); console.log(`Text: ${clipboardText}`);   ","version":"Next","tagName":"h3"},{"title":"clipboard.readHTML()​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#clipboardreadhtml","content":" Reads and returns HTML from system clipboard.   ","version":"Next","tagName":"h2"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#return-string-awaited-2","content":" Stored HTML from the system clipboard.  let clipboardHTML = await Neutralino.clipboard.readHTML(); console.log(`HTML: ${clipboardHTML}`);   ","version":"Next","tagName":"h3"},{"title":"clipboard.readImage(format)​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#clipboardreadimageformat","content":" Reads and returns an image from system clipboard.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#parameters-2","content":" format String (optional): Pixel data format. Accepted values are rgb, rgba, argb, and bgra. By default, the function uses the default platform-specific pixel data format.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.clipboard","url":"/docs/api/clipboard#return-object-awaited","content":" Returns ClipboardImage object that has the same properties as in the writeImage() function.  let clipboardImage = await Neutralino.clipboard.readImage(); console.log(`Image: ${clipboardImage}`);  ","version":"Next","tagName":"h3"},{"title":"Neutralino.computer","type":0,"sectionRef":"#","url":"/docs/api/computer","content":"","keywords":"","version":"Next"},{"title":"computer.getMemoryInfo()​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#computergetmemoryinfo","content":" Returns system memory statistics in bytes.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#return-object-awaited","content":" physical Object: Physical memory information. total Number: Total physical memory.available Number: Available physical memory. virtual Object: Virtual memory information. total Number: Total virtual memory.available Number: Available virtual memory.  let memoryInfo = await Neutralino.computer.getMemoryInfo(); console.log(`RAM size: ${memoryInfo.physical.total}B`);   ","version":"Next","tagName":"h3"},{"title":"computer.getArch()​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#computergetarch","content":" Returns the CPU architecture identifier: x64 (x86 64bit/arm64), ia32 (x86 32bit), arm, itanium, or unknown.  ","version":"Next","tagName":"h2"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#return-string-awaited","content":" CPU architecture.  let arch = await Neutralino.computer.getArch(); console.log(arch);   ","version":"Next","tagName":"h3"},{"title":"computer.getKernelInfo()​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#computergetkernelinfo","content":" Returns operating system kernel information.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#return-object-awaited-1","content":" variant String: Kernel type: Linux, Darwin, Windows NT, or Unknown.version String: Version in the &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-&lt;build_number&gt; format.  let kernelInfo = await Neutralino.computer.getKernelInfo(); console.log(`Kernel: ${kernelInfo.variant}`);   ","version":"Next","tagName":"h3"},{"title":"computer.getOSInfo()​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#computergetosinfo","content":" Returns operating system information.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#return-object-awaited-2","content":" name String: Operating system name.description String: Operating system description.version String: Version in the &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-&lt;build_number&gt; format.  let osInfo = await Neutralino.computer.getOSInfo(); console.log(`OS: ${osInfo.name}`);   ","version":"Next","tagName":"h3"},{"title":"computer.getCPUInfo()​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#computergetcpuinfo","content":" Returns the CPU information.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#return-object-awaited-3","content":" vendor String: Vendor name.model String: Model name.frequency Number: The current CPU frequency in hertz (Hz).architecture String: CPU architecture name. Returns the same value as the getArch function.logicalThreads Number: Number of logical threads in the parallelism model.physicalCores Number: Number of physical cores in the CPU.physicalUnits Number: Number of physical CPU hardware units in the motherboard.  let cpuInfo = await Neutralino.computer.getCPUInfo(); console.log(`CPU model: ${cpuInfo.model}`);   ","version":"Next","tagName":"h3"},{"title":"computer.getDisplays()​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#computergetdisplays","content":" Returns information about all connected displays.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#return-object-awaited-4","content":" An array of Display objects.  ","version":"Next","tagName":"h3"},{"title":"Display​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#display","content":" id Number: A virtual display identifier.resolution Object: Display resolution information. width Number: Display width.height Number: Display height. dpi Number: DPI (Dots Per Inch) value.bpp Number: BPP (Bits Per Pixel) value (also known as the color depth).refreshRate Number: Refresh rate in hertz (Hz).  let displays = await Neutralino.computer.getDisplays(); for(let display of displays) { console.log(display); }   ","version":"Next","tagName":"h3"},{"title":"computer.getMousePosition()​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#computergetmouseposition","content":" Returns the current mouse cursor position.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.computer","url":"/docs/api/computer#return-object-awaited-5","content":" x Number: Distance from the left edge of the screen in pixels.y Number: Distance from the top edge of the screen in pixels.  let pos = await Neutralino.computer.getMousePosition(); console.log(`Pos: ${pos.x}, ${pos.y}`);  ","version":"Next","tagName":"h3"},{"title":"Neutralino.events","type":0,"sectionRef":"#","url":"/docs/api/events","content":"","keywords":"","version":"Next"},{"title":"Event types​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#event-types","content":" Event id\tDescription\tAvailable modes\tAdditional dataready\tOccurs when the client library connects with the Neutralino server.\tall\tnull trayMenuItemClicked\tOccurs when the user clicks on a tray menu item.\tall\tTrayMenuItem windowClose\tOccurs when the user closes the window.\twindow\tnull windowFocus\tOccurs when the window gets focused.\twindow\tnull windowBlur\tOccurs when the window focus state is gone.\twindow\tnull serverOffline\tOccurs when the Neutralino server is offline\tall\tnull clientConnect\tOccurs when a new client access the application.\tall\tTotal clients clientDisconnect\tOccurs when a connected client leaves the application.\tall\tTotal clients appClientConnect\tOccurs when a new application instance starts.\tall\tTotal app clients appClientDisconnect\tOccurs when an application instance ends.\tall\tTotal app clients extClientConnect\tOccurs when a new extension connects.\tall\tExtension identifier extClientDisconnect\tOccurs when an extension disconnects.\tall\tExtension identifer extensionReady\tOccurs when an extension is ready to communicate with the app.\tall\tExtension identifier spawnedProcess\tOccurs then there is an update in the spawned process.\tall\tSpawnedProcess with action (stdOut, stdErr, and exit) and data (STDOUT, STDERR or exit code) openedFile\tOccurs for each read action and whenever stream cursor reaches EOF.\tall\tFile stream identifier with action (data, dataBinary, and end) and data (stream block content) watchFile\tOccurs for each filesystem change events based on watchers.\tall\tFile watcher identifier with action (add, delete, modified, and moved), dir, filename and timestamp in ISO 8601 format  ","version":"Next","tagName":"h2"},{"title":"events.on(eventName, handler)​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#eventsoneventname-handler","content":" Registers a new event handler.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#parameters","content":" eventName String: Name of the event.handler Function: A function that will be called when the given event occurs. Neutralinojs will call the handler with aCustomEvent instance by attaching additional data to the detail key.  function onTrayMenuItemClicked(event) { console.log(`Event data: ${event.detail}`); } await Neutralino.events.on('trayMenuItemClicked', onTrayMenuItemClicked);   ","version":"Next","tagName":"h3"},{"title":"events.off(eventName, handler)​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#eventsoffeventname-handler","content":" Unregisters an event handler.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#parameters-1","content":" eventName String: Name of the event.handler Function: A function reference.  await Neutralino.events.off('trayMenuItemClicked', onTrayMenuItemClicked);   ","version":"Next","tagName":"h3"},{"title":"events.dispatch(eventName, data)​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#eventsdispatcheventname-data","content":" Dispatches a new event to the current app instance. Neutralinojs client uses this JavaScript function call internally to dispatch native events.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#parameters-2","content":" eventName String: Name of the event.data Object (optional): Additional data for the event.  await Neutralino.events.dispatch('myTestEvent', {myData: 'Test data'});   ","version":"Next","tagName":"h3"},{"title":"events.broadcast(eventName, data)​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#eventsbroadcasteventname-data","content":" Dispatches a new event to all clients (both app and extension clients).  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.events","url":"/docs/api/events#parameters-3","content":" eventName String: Name of the event.data Object (optional): Additional data for the event.  await Neutralino.events.broadcast('myTestEvent', 'Hello'); await Neutralino.events.broadcast('myTestEvent', {myData: 'Test data'}); await Neutralino.events.broadcast('myTestEvent'); // without any data payload  ","version":"Next","tagName":"h3"},{"title":"Error Codes","type":0,"sectionRef":"#","url":"/docs/api/error-codes","content":"","keywords":"","version":"Next"},{"title":"Native API error codes​","type":1,"pageTitle":"Error Codes","url":"/docs/api/error-codes#native-api-error-codes","content":" Error code\tMessage\tThrown fromNE_FS_DIRCRER\tUnable to create directory.\tos.createDirectory NE_FS_REMVERR\tUnable to remove path.\tos.remove NE_OS_TRAYIER\tUnable to initialize the tray menu. This error is typically thrown when GNU/Linux systems don't contain an app indicator library.\tos.setTray NE_FS_FILRDER\tFile read error.\tfilesystem.readFile, filesystem.readBinaryFile NE_FS_FILWRER\tFile write error.\tfilesystem.writeFile, filesystem.writeBinaryFile NE_FS_FILOPER\tFile open error.\tfilesystem.openFile NE_FS_UNLTOUP\tUnable to update opened file id.\tfilesystem.updateOpenedFile NE_FS_UNLTFOP\tUnable to find opened file id.\tfilesystem.getOpenedFileInfo NE_FS_NOPATHE\tNo file or directory.\tfilesystem.getStats, filesystem.readDirectory NE_FS_COPYERR\tCopy error.\tfilesystem.copy NE_FS_MOVEERR\tMove error.\tfilesystem.move NE_FS_UNLCWAT\tUnable to create watcher.\tfilesystem.createWatcher NE_FS_NOWATID\tUnable to find watcher.\tfilesystem.removeWatcher NE_OS_UNLTOUP\tUnable to update the spawned process due to an invalid process identifier or action.\tos.updateSpawnedProcess NE_OS_INVMSGA\tInvalid message box arguments.\tos.showMessageBox NE_OS_INVKNPT\tInvalid platform path name.\tos.getPath NE_ST_INVSTKY\tInvalid storage key.\tstorage.getData, storage.setData NE_ST_STKEYWE\tStorage write error.\tstorage.setData NE_RT_INVTOKN\tInvalid access token.\t* NE_RT_NATPRME\tNo permission to execute the provided native method.\t* NE_RT_APIPRME\tNo permission to use the native API.\t* NE_RT_NATRTER\tNative method runtime error. Mostly occured due to missing parameters.\t* NE_RT_NATNTIM\tNative method is not implemented.\tinternal NE_CL_NSEROFF\tNeutralino server is not reachable.\t* NE_EX_EXTNOTC\tExtension is not connected yet\textensions.dispatch NE_UP_CUPDMER\tInvalid update manifest or mismatching applicationId\tupdater.checkForUpdates NE_UP_CUPDERR\tUnable to fetch update manifest\tupdater.checkForUpdates NE_UP_UPDNOUF\tNo update manifest loaded\tupdater.install NE_UP_UPDINER\tUpdate installation error\tupdater.install NE_RS_NOPATHE\tProvided path doesn't exist in resources\tresources.readFile, resources.readBinaryFile, resources.getStats NE_RS_FILEXTF\tUnable to extract the requested file\tresources.extractFile NE_RS_DIREXTF\tUnable to extract the requested directory\tresources.extractDirectory NE_SR_MPINUSE\tMount path is already in use\tserver.mount NE_SR_NOMTPTH\tCannot unmount the provided path, the path that was not mounted\tserver.unmount NE_FS_UNLSTPR\tUnable to set file permissions\tfilesystem.setPermissions ","version":"Next","tagName":"h2"},{"title":"Neutralino.extensions","type":0,"sectionRef":"#","url":"/docs/api/extensions","content":"","keywords":"","version":"Next"},{"title":"extensions.dispatch(extensionId, eventName, data)​","type":1,"pageTitle":"Neutralino.extensions","url":"/docs/api/extensions#extensionsdispatchextensionid-eventname-data","content":" Dispatches a new event to an extension instance. If the targeted extension is not connected yet, Neutralino client library will queue the function call and send whenever the extension comes online.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.extensions","url":"/docs/api/extensions#parameters","content":" extensionId String: Extension identifier.eventName String: Name of the event.data Object (optional): Additional data for the event.  await Neutralino.extensions.dispatch('js.neutralino.sampleextension', 'myTestEvent', {myData: 'Test data'}); await Neutralino.extensions.dispatch('js.neutralino.sampleextension', 'myTestEvent');   ","version":"Next","tagName":"h3"},{"title":"extensions.broadcast(eventName, data)​","type":1,"pageTitle":"Neutralino.extensions","url":"/docs/api/extensions#extensionsbroadcasteventname-data","content":" Dispatches a new event to all connected extensions. If an extension is loaded but not connected yet, the particular extension won't get the new event. Use extensions.dispatchto send messages even if the extension is not connected to the main process.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.extensions","url":"/docs/api/extensions#parameters-1","content":" eventName String: Name of the event.data Object (optional): Additional data for the event.  await Neutralino.extensions.broadcast('myTestEvent', 'Hello'); await Neutralino.extensions.broadcast('myTestEvent', {myData: 'Test data'}); await Neutralino.extensions.broadcast('myTestEvent');   ","version":"Next","tagName":"h3"},{"title":"extensions.getStats()​","type":1,"pageTitle":"Neutralino.extensions","url":"/docs/api/extensions#extensionsgetstats","content":" Returns details about connected and loaded extensions.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.extensions","url":"/docs/api/extensions#return-object-awaited","content":" loaded String[]: An array of loaded extensions.connected String[]: An array of connected extensions. These extensions have an active WebSocket-based IPC connection with the main process.  let stats = await Neutralino.extensions.getStats(); console.log('stats: ', stats);  ","version":"Next","tagName":"h3"},{"title":"Global Variables","type":0,"sectionRef":"#","url":"/docs/api/global-variables","content":"","keywords":"","version":"Next"},{"title":"Predefined global variables​","type":1,"pageTitle":"Global Variables","url":"/docs/api/global-variables#predefined-global-variables","content":" Variable\tDescriptionNL_OS\tOperating system name: Linux, Windows, or Darwin NL_ARCH\tCPU architecture: x64, arm, itanium, ia32, or unknown NL_APPID\tApplication identifier NL_APPVERSION\tApplication version NL_PORT\tApplication port NL_MODE\tMode of the application: window, browser, cloud, or chrome NL_VERSION\tNeutralinojs framework version NL_CVERSION\tNeutralinojs client version NL_CWD\tCurrent working directory NL_PATH\tApplication path NL_DATAPATH\tApplication data path NL_ARGS\tCommand-line arguments NL_PID\tIdentifier of the current process NL_RESMODE\tSource of application resources: bundle or directory NL_EXTENABLED\tReturns true if extensions are enabled NL_COMMIT\tFramework binary's release commit hash NL_CCOMMIT\tClient librar's release commit hash NL_CMETHODS\tCustom method identifiers (Returns the same output that custom.getMethods returns). NL_WSAVSTLOADED\tReturns true if the initial window state was loaded from the saved configuration NL_GINJECTED\tReturns true if global variables are injected NL_CINJECTED\tReturns true if the client library source is injected NL_LOCALE\tUser locale name from the system, e.g., en_US.UTF8 NL_COMPDATA\tData passed during the framework binary compilation via the NEU_COMPILATION_DATA definition in the BuildZri configuration file  tip You can use NL_COMMIT and NL_CCOMMIT values to identify the codebase snapshot if you use nightly releases.  ","version":"Next","tagName":"h2"},{"title":"Custom global variables​","type":1,"pageTitle":"Global Variables","url":"/docs/api/global-variables#custom-global-variables","content":" You can make custom global variables too via neutralino.config.json, as shown below.  &quot;globalVariables&quot;: { &quot;TEST&quot;: &quot;Test Value&quot; }   The above custom global variable's value can be accessed with NL_TEST. You can set any data type for custom global variables. Look at the following examples.  &quot;globalVariables&quot;: { &quot;TEST_1&quot;: 1, &quot;TEST_2&quot;: null, &quot;TEST_3&quot;: 3.5, &quot;TEST_4&quot;: [3, 5, 4, 5], &quot;TEST_5&quot;: { &quot;key&quot;: &quot;value&quot;, &quot;anotherKey&quot;: 100 } }   Avoid overriding predefined global variables. ","version":"Next","tagName":"h2"},{"title":"Native API Overview","type":0,"sectionRef":"#","url":"/docs/api/overview","content":"","keywords":"","version":"Next"},{"title":"Native API namespaces​","type":1,"pageTitle":"Native API Overview","url":"/docs/api/overview#native-api-namespaces","content":" Neutralino.appNeutralino.clipboardNeutralino.computerNeutralino.customNeutralino.debugNeutralino.eventsNeutralino.extensionsNeutralino.filesystemNeutralino.initNeutralino.osNeutralino.storageNeutralino.updaterNeutralino.windowNeutralino.resourcesNeutralino.server ","version":"Next","tagName":"h2"},{"title":"Neutralino.init","type":0,"sectionRef":"#","url":"/docs/api/init","content":"","keywords":"","version":"Next"},{"title":"init()​","type":1,"pageTitle":"Neutralino.init","url":"/docs/api/init#init","content":" The application developer needs to call this method explicitly via a JavaScript source file before using any native API function. The init function does the following tasks when it's called.  Starts a WebSocket connection with the Neutralinojs server asynchronously.Registers auto-reload event handler if the --neu-dev-auto-reload flag (the neu run command sets this flag) is provided.Defines NL_CVERSION with the client libary version in the window scope.  You can call native API calls right after the init function call, as shown below.  Neutralino.init(); Neutralino.os.showMessageBox('Welcome', 'Hello Neutralinojs');   Also, you can wrap immediate native calls with the ready event callback if you like.  Neutralino.init(); Neutralino.events.on('ready', () =&gt; { Neutralino.os.showMessageBox('Welcome', 'Hello Neutralinojs'); });   info Neutralinojs client library typically queues and sends native API calls to the server when the WebSocket connection is established. Therefore, you don't need to use the ready event callback always. ","version":"Next","tagName":"h2"},{"title":"Neutralino.resources","type":0,"sectionRef":"#","url":"/docs/api/resources","content":"","keywords":"","version":"Next"},{"title":"resources.getFiles()​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#resourcesgetfiles","content":" Returns all files and directories embedded in the resource bundle.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#return-object-awaited","content":" An array of path strings.  let files = await Neutralino.resources.getFiles(); console.log('Files: ', files);   ","version":"Next","tagName":"h3"},{"title":"resources.getStats(path)​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#resourcesgetstatspath","content":" Returns resource file statistics for the given path. If the given path doesn't exist or is inaccessible,NE_RS_NOPATHE is thrown. So, you can use this method to check for the existance of a file or directory.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#parameters","content":" path String: Resource path.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#return-object-awaited-1","content":" size Number: Size in bytes.isFile Boolean: true if the path represents a normal file.isDirectory Boolean: true if the path represents a directory.  let stats = await Neutralino.resources.getStats('/resources/icons/myIcon.png'); console.log('Stats:', stats);   ","version":"Next","tagName":"h3"},{"title":"resources.extractFile(path, destination)​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#resourcesextractfilepath-destination","content":" Extracts a file from the resources bundle to a preferred path. Throws NE_RS_FILEXTF for file extraction failures.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#parameters-1","content":" path String: Resource file path, i.e., /resources/icons/appIcon.png, starts with / similar to all Neutralinojs app resources.destination String: Path where the extract file should be created.  await Neutralino.resources.extractFile('/resources/scripts/run.sh', './scripts/run.sh');   ","version":"Next","tagName":"h3"},{"title":"resources.extractDirectory(path, destination)​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#resourcesextractdirectorypath-destination","content":" Extracts a directory from the resources bundle to a preferred path. Throws NE_RS_DIREXTF for directory extraction failures.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#parameters-2","content":" path String: Resource directory path, i.e., /resources/icons, starts with / similar to all Neutralinojs app resources.destination String: Path where all extracted files should be stored.  await Neutralino.resources.extractDirectory('/resources/scripts', NL_PATH + '/extracted/scripts');   ","version":"Next","tagName":"h3"},{"title":"resources.readFile(path)​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#resourcesreadfilepath","content":" Reads a text file from resources.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#parameters-3","content":" path: Resource path.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#return-string-awaited","content":" File content.  let data = await Neutralino.resources.readFile(); console.log(data);   ","version":"Next","tagName":"h3"},{"title":"resources.readBinaryFile(path)​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#resourcesreadbinaryfilepath","content":" Reads a binary file from resources.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#parameters-4","content":" path: Resource path.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.resources","url":"/docs/api/resources#return-object-awaited-2","content":" Content of the binary file as anArrayBuffer.  let data = await Neutralino.resources.readBinaryFile('/resources/images/myImage.png'); let view = new Uint8Array(data); console.log('Binary content: ', view);  ","version":"Next","tagName":"h3"},{"title":"Neutralino.server","type":0,"sectionRef":"#","url":"/docs/api/server","content":"","keywords":"","version":"Next"},{"title":"server.mount(path, target)​","type":1,"pageTitle":"Neutralino.server","url":"/docs/api/server#servermountpath-target","content":" Mounts a local directory. Throws NE_FS_NOPATHE and NE_FS_NOTADIR for invalid targets and NE_SR_MPINUSE if the path is already mounted.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.server","url":"/docs/api/server#parameters","content":" path String: Resource path.target String: A directory in the local filesystem.  await Neutralino.server.mount('/app-res', NL_PATH + '/app-res'); await fetch('/app-res/myFile.txt'); // loads NL_PATH + '/app-res/myFile.txt'   ","version":"Next","tagName":"h3"},{"title":"server.unmount(path)​","type":1,"pageTitle":"Neutralino.server","url":"/docs/api/server#serverunmountpath","content":" Deactivates a mount configuration. Throws NE_SR_NOMTPTH if the provided path is not mounted.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.server","url":"/docs/api/server#parameters-1","content":" path String: Resource path.  await Neutralino.server.mount('/app-res', NL_PATH + '/app-res');   ","version":"Next","tagName":"h3"},{"title":"server.getMounts()​","type":1,"pageTitle":"Neutralino.server","url":"/docs/api/server#servergetmounts","content":" Lists mount configurations.   ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.server","url":"/docs/api/server#return-object-awaited","content":" Directory mount map that stores each configuration entry as a key-value pair.  let mounts = await Neutralino.server.getMounts(); console.log('Mounts:', mounts);  ","version":"Next","tagName":"h3"},{"title":"Neutralino.storage","type":0,"sectionRef":"#","url":"/docs/api/storage","content":"","keywords":"","version":"Next"},{"title":"storage.setData(key, data)​","type":1,"pageTitle":"Neutralino.storage","url":"/docs/api/storage#storagesetdatakey-data","content":" Writes data into Neutralinojs shared storage.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.storage","url":"/docs/api/storage#parameters","content":" key String: A unique identifier.data Object (optional): Data as a string. If this value is null or undefined, the specific data record will be erased from the disk.  await Neutralino.storage.setData('userDetails', JSON.stringify({ username: 'TestValue'}) );   ","version":"Next","tagName":"h3"},{"title":"storage.getData(key)​","type":1,"pageTitle":"Neutralino.storage","url":"/docs/api/storage#storagegetdatakey","content":" Reads and returns data for a given Neutralinojs shared storage key.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.storage","url":"/docs/api/storage#parameters-1","content":" key String: Storage data record identifier.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.storage","url":"/docs/api/storage#return-string-awaited","content":" Data string of the storage record.  let data = await Neutralino.storage.getData('userDetails'); console.log(`Data: ${data}`);   ","version":"Next","tagName":"h3"},{"title":"storage.getKeys()​","type":1,"pageTitle":"Neutralino.storage","url":"/docs/api/storage#storagegetkeys","content":" Returns all storage keys.  ","version":"Next","tagName":"h2"},{"title":"Return Array (awaited):​","type":1,"pageTitle":"Neutralino.storage","url":"/docs/api/storage#return-array-awaited","content":" A string array of existing storage keys.  let keys = await Neutralino.storage.getKeys(); console.log('Keys: ', keys);  ","version":"Next","tagName":"h3"},{"title":"Neutralino.updater","type":0,"sectionRef":"#","url":"/docs/api/updater","content":"","keywords":"","version":"Next"},{"title":"updater.checkForUpdates(url)​","type":1,"pageTitle":"Neutralino.updater","url":"/docs/api/updater#updatercheckforupdatesurl","content":" Checks latest updates from the given URL. The URL should return a valid Neutralinojs update manifest withContent-Type: application/json header. Throws NE_UP_CUPDMER for invalid manifests and NE_UP_CUPDERRfor network connectivity issues.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.updater","url":"/docs/api/updater#parameters","content":" url String: URL to fetch update manifest.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.updater","url":"/docs/api/updater#return-object-awaited","content":" Update manifest.  let url = 'https://example.com/updates/manifest.json'; let manifest = await Neutralino.updater.checkForUpdates(url);   ","version":"Next","tagName":"h3"},{"title":"updater.install()​","type":1,"pageTitle":"Neutralino.updater","url":"/docs/api/updater#updaterinstall","content":" Installs updates from the downloaded update manifest. Throws NE_UP_UPDNOUF if the manifest isn't loaded. If the update installation process fails, this function will throw NE_UP_UPDINER.  let url = 'https://example.com/updates/manifest.json'; let manifest = await Neutralino.updater.checkForUpdates(url); if(manifest.version != NL_APPVERSION) { await Neutralino.updater.install(); } else { console.log('You are using the latest version!'); }  ","version":"Next","tagName":"h2"},{"title":"Internal CLI Arguments","type":0,"sectionRef":"#","url":"/docs/cli/internal-cli-arguments","content":"","keywords":"","version":"Next"},{"title":"General​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#general","content":" ","version":"Next","tagName":"h2"},{"title":"--load-dir-res​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--load-dir-res","content":" Notifies Neutralinojs server to fetch files from the resources directory. If this flag is not provided, Neutralinojs server will load resources from the resources.neu file.  tip If Neutralinojs fails to load resources resources.neu, this flag is automatically enabled internally to find resources from the app directory. Therefore, you can double click on the binary instead of neu run while developing apps.  ","version":"Next","tagName":"h3"},{"title":"--config-file=<filename>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--config-filefilename","content":" Uses a custom configuration file instead of the default neutralino.config.json file for loading the app configuration JSON. This CLI option is helpful for setting a development-only configuration file (i.e., --config-file=neutralino-dev.config.json).  info The neu build command won't typically include custom configuration files for the final application bundle — it only embeds the defaultneutralino.config.json file allowing you to store production app configuration.  ","version":"Next","tagName":"h3"},{"title":"--path=<path>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--pathpath","content":" Overrides the resources path with a relative path or absolute path. This will change the NL_PATH global variable.  ","version":"Next","tagName":"h3"},{"title":"--mode=<mode>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--modemode","content":" Overrides the default mode. Accepted values are: window, browser, and cloud.  ","version":"Next","tagName":"h3"},{"title":"--neu-dev-auto-reload​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--neu-dev-auto-reload","content":" Listens to the neuDev_reloadApp event. When this CLI argument is provided, each modification done to the resources will automatically reload the application. The neu run command executes Neutralinojs with this flag by default.  --neu-dev- is a reserved CLI argument prefix for Neutralinojs process. Therefore, avoid adding custom arguments with --neu-dev- prefix. Feel free to use the --dev- prefix for your development-related CLI flags.  ","version":"Next","tagName":"h3"},{"title":"--neu-dev-extension​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--neu-dev-extension","content":" Loads js.neutralino.devtools extension internally for development purposes. The neu CLI uses this CLI argument to establish an IPC with the application process. This option only works if application resources are loaded from a directory (won't work for end-users).  ","version":"Next","tagName":"h3"},{"title":"--url=<url>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--urlurl","content":" Overrides the URL on the application.  ","version":"Next","tagName":"h3"},{"title":"--document-root=<url>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--document-rooturl","content":" Overrides the document root of the static server.  ","version":"Next","tagName":"h3"},{"title":"--port=<port>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--portport","content":" Overrides the application port and will change the NL_PORT global variable. If 0 is given, Neutralino will use a random available port.  ","version":"Next","tagName":"h3"},{"title":"--logging-enabled=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--logging-enabledtruefalse","content":" Overrides the logging feature status.  ","version":"Next","tagName":"h3"},{"title":"--logging-write-to-log-file=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--logging-write-to-log-filetruefalse","content":" Overrides the log file feature status.  ","version":"Next","tagName":"h3"},{"title":"--export-auth-info=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--export-auth-infotruefalse","content":" Overrides auth details export setting.  ","version":"Next","tagName":"h3"},{"title":"--enable-extensions=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--enable-extensionstruefalse","content":" Overrides extensions feature's availability.  ","version":"Next","tagName":"h3"},{"title":"--enable-server=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--enable-servertruefalse","content":" Enables or disables the background server (Disables static file servering feature and native API messaging). If you load a remote URL to the webview, you can set this option to true.  ","version":"Next","tagName":"h3"},{"title":"--enable-native-api=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--enable-native-apitruefalse","content":" Overrides the primary native API execution permission.  ","version":"Next","tagName":"h3"},{"title":"--single-page-serve=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--single-page-servetruefalse","content":" Overrides the single page serving option.  ","version":"Next","tagName":"h3"},{"title":"Window mode​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#window-mode","content":" The following CLI arguments are used when the application runs with the window mode.  ","version":"Next","tagName":"h2"},{"title":"--window-title=<title>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-titletitle","content":" Overrides the window title.  ","version":"Next","tagName":"h3"},{"title":"--window-icon=<icon_path>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-iconicon_path","content":" Overrides the window icon.  ","version":"Next","tagName":"h3"},{"title":"--window-full-screen=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-full-screentruefalse","content":" Overrides the window's initial full screen status.  ","version":"Next","tagName":"h3"},{"title":"--window-always-on-top=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-always-on-toptruefalse","content":" Overrides the window's initial top-most mode.  ","version":"Next","tagName":"h3"},{"title":"--window-borderless=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-borderlesstruefalse","content":" Overrides the window's borderless mode.  ","version":"Next","tagName":"h3"},{"title":"--window-maximize=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-maximizetruefalse","content":" Overrides the window's initial maximize status.  ","version":"Next","tagName":"h3"},{"title":"--window-hidden=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-hiddentruefalse","content":" Overrides the window's initial visibility status.  ","version":"Next","tagName":"h3"},{"title":"--window-maximizable=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-maximizabletruefalse","content":" Overrides the window's initial maximizable status.  ","version":"Next","tagName":"h3"},{"title":"--window-width=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-widthnumber","content":" Overrides the window width.  ","version":"Next","tagName":"h3"},{"title":"--window-height=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-heightnumber","content":" Overrides the window height.  ","version":"Next","tagName":"h3"},{"title":"--window-min-width=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-min-widthnumber","content":" Overrides the window's minimum width.  ","version":"Next","tagName":"h3"},{"title":"--window-min-height=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-min-heightnumber","content":" Overrides the window's minimum height.  ","version":"Next","tagName":"h3"},{"title":"--window-max-width=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-max-widthnumber","content":" Overrides the window's maximum width.  ","version":"Next","tagName":"h3"},{"title":"--window-max-height=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-max-heightnumber","content":" Overrides the window's maximum height.  ","version":"Next","tagName":"h3"},{"title":"--window-x=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-xnumber","content":" Overrides the window left (x) position.  ","version":"Next","tagName":"h3"},{"title":"--window-y=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-ynumber","content":" Overrides the window top (y) position.  ","version":"Next","tagName":"h3"},{"title":"--window-center=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-centertruefalse","content":" Overrides the window's initial center positioning setup.  ","version":"Next","tagName":"h3"},{"title":"--window-transparent=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-transparenttruefalse","content":" Overrides the window transparency mode.  ","version":"Next","tagName":"h3"},{"title":"--window-resizable=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-resizabletruefalse","content":" Overrides the window's initial resizability status.  ","version":"Next","tagName":"h3"},{"title":"--window-exit-process-on-close=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-exit-process-on-closetruefalse","content":" Overrides the close button's behavior.  ","version":"Next","tagName":"h3"},{"title":"--window-enable-inspector=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-enable-inspectortruefalse","content":" Automatically opens the developer tools window.  ","version":"Next","tagName":"h3"},{"title":"--window-use-saved-state=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-use-saved-statetruefalse","content":" Overrides the saved window state feature setting.  ","version":"Next","tagName":"h3"},{"title":"--window-extend-user-agent-with=<suffix>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-extend-user-agent-withsuffix","content":" Overrides the custom user agent setting.  ","version":"Next","tagName":"h3"},{"title":"--window-inject-globals=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-inject-globalstruefalse","content":" Overrides the global variable injection setting.  ","version":"Next","tagName":"h3"},{"title":"--window-inject-client-library=<true|false>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-inject-client-librarytruefalse","content":" Overrides the client library source injection setting.  ","version":"Next","tagName":"h3"},{"title":"--window-inject-script=<script_path>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--window-inject-scriptscript_path","content":" Overrides the preload script injection setting.  ","version":"Next","tagName":"h3"},{"title":"Chrome mode​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#chrome-mode","content":" The following CLI arguments are used when the application runs with the chrome mode.  ","version":"Next","tagName":"h2"},{"title":"--chrome-width=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--chrome-widthnumber","content":" Chrome window's width.  ","version":"Next","tagName":"h3"},{"title":"--chrome-height=<number>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--chrome-heightnumber","content":" Chrome window's height.  ","version":"Next","tagName":"h3"},{"title":"--chrome-args=<arg_list>​","type":1,"pageTitle":"Internal CLI Arguments","url":"/docs/cli/internal-cli-arguments#--chrome-argsarg_list","content":" Additional arguments for the Chrome process. Read more about chrome mode from here  tip The right hand value is optional for the for boolean type CLI arguments. Therefore, you can use --window-full-screeninstead of --window-full-screen=true. However, if you define window.fullScreen as true and you need to override it asfalse you have to use --window-full-screen=false. ","version":"Next","tagName":"h3"},{"title":"Neutralino.filesystem","type":0,"sectionRef":"#","url":"/docs/api/filesystem","content":"","keywords":"","version":"Next"},{"title":"filesystem.createDirectory(path)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemcreatedirectorypath","content":" Creates a directory or multiple directories recursively. Throws NE_FS_DIRCRER if directory creation is not possible.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters","content":" path String: New directory path.  await Neutralino.filesystem.createDirectory('./newDirectory'); await Neutralino.filesystem.createDirectory(NL_PATH + '/myFolder/api/fs');   ","version":"Next","tagName":"h3"},{"title":"filesystem.remove(path)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemremovepath","content":" Removes a directory or file. If the given path is a directory, this function recursively removes all contents of the specific directory. Throws NE_FS_REMVERR if the removal is not possible.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-1","content":" path String: Directory or file path.  await Neutralino.filesystem.remove('./tmpDirectory'); await Neutralino.filesystem.remove('./tmpFile.txt');   ","version":"Next","tagName":"h3"},{"title":"filesystem.writeFile(filename, data)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemwritefilefilename-data","content":" Writes a text file. Throws NE_FS_FILWRER for file write errors.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-2","content":" filename String: Filename.data String: Content of the file.  await Neutralino.filesystem.writeFile('./myFile.txt', 'Sample content');   ","version":"Next","tagName":"h3"},{"title":"filesystem.appendFile(filename, data)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemappendfilefilename-data","content":" Appends text content to file. Throws NE_FS_FILWRER for file write errors. If the provided file doesn't exist, this function creates a new file with data.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-3","content":" filename String: Filename.data String: Content to append.  await Neutralino.filesystem.appendFile('./myFile.txt', 'Sample '); await Neutralino.filesystem.appendFile('./myFile.txt', 'content');   ","version":"Next","tagName":"h3"},{"title":"filesystem.writeBinaryFile(filename, data)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemwritebinaryfilefilename-data","content":" Writes a binary file. Throws NE_FS_FILWRER for file write errors.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-4","content":" filename String: Filename.data ArrayBuffer: Content of the binary file as anArrayBuffer.  let rawBin = new ArrayBuffer(1); let view = new Uint8Array(rawBin); view[0] = 64; // Saves ASCII '@' to the binary file await Neutralino.filesystem.writeBinaryFile('./myFile.bin', rawBin);   ","version":"Next","tagName":"h3"},{"title":"filesystem.appendBinaryFile(filename, data)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemappendbinaryfilefilename-data","content":" Appends binary data to a file. Throws NE_FS_FILWRER for file write errors. If the provided file doesn't exist, this function creates a new file with data.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-5","content":" filename String: Filename.data ArrayBuffer: Binary content to append as anArrayBuffer.  let rawBin = new ArrayBuffer(1); let view = new Uint8Array(rawBin); view[0] = 64; // Saves ASCII '@' to the binary file await Neutralino.filesystem.appendBinaryFile('./myFile.bin', rawBin); await Neutralino.filesystem.appendBinaryFile('./myFile.bin', rawBin);   ","version":"Next","tagName":"h3"},{"title":"filesystem.readFile(filename)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemreadfilefilename","content":" Reads a text file. Throws NE_FS_FILRDER for file read errors.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-6","content":" filename String: Filename.pos Number (optional): File cursor position in bytes.size Number (optional): File reader buffer size in bytes.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-string-awaited","content":" File content.  let data = await Neutralino.filesystem.readFile('./myFile.txt'); console.log(`Content: ${data}`); let data = await Neutralino.filesystem.readFile('./myFile.txt', { pos: 2, size: 10 }); console.log(`Content: ${data}`);   ","version":"Next","tagName":"h3"},{"title":"filesystem.readBinaryFile(filename, options)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemreadbinaryfilefilename-options","content":" Reads binary files. Throws NE_FS_FILRDER for file read errors.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-7","content":" filename String: Filename.  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#options","content":" pos Number (optional): File cursor position in bytes.size Number (optional): File reader buffer size in bytes.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-object-awaited","content":" Content of the binary file as anArrayBuffer.  let data = await Neutralino.filesystem.readBinaryFile('./myFile.bin'); let view = new Uint8Array(data); console.log('Binary content: ', view);   ","version":"Next","tagName":"h3"},{"title":"filesystem.openFile(filename)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemopenfilefilename","content":" Creates a readable file stream. Throws NE_FS_FILOPER for file open errors.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-8","content":" filename String: Filename.  ","version":"Next","tagName":"h3"},{"title":"Return Number (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-number-awaited","content":" File stream identifier.  let fileId = await Neutralino.filesystem.openFile('./myFile.txt'); console.log(`ID: ${fileId}`);   ","version":"Next","tagName":"h3"},{"title":"filesystem.updateOpenedFile(id, action, data)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemupdateopenedfileid-action-data","content":" Invokes file stream actions. Throws NE_FS_UNLTOUP if the framework can't update the stream. Call this method to read and seek an opened file (aka a readable stream).  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-9","content":" id Number: File stream identifier.action String: An action to take. Accepts only the following values: read: Reads a bytes segment from the file stream.readBinary: Behaves the same as read but uses the binary read mode.readAll: Triggers the read action until file stream cursor position reachesEOF.readAllBinary: Behaves the same as readAll but uses the binary read mode.seek: Sets the file cursor position.close: Closes and frees file handler resources. data Object (optional): Additional data for the action. Send the buffer size in bytes (default: 256 bytes) if the action is read, readBinary, readAll, or readAllBinary. Send the file stream cursor position if the action is seek.  let fileId = await Neutralino.filesystem.openFile('./myFile.txt'); let content = ''; Neutralino.events.on('openedFile', (evt) =&gt; { if(evt.detail.id == fileId) { switch(evt.detail.action) { case 'data': content += evt.detail.data; break; case 'end': console.log(content); break; } } }); // Sets the file stream cursor to 10th byte await Neutralino.filesystem.updateOpenedFile(fileId, 'seek', 10); // Reads 2 bytes from the cursor position await Neutralino.filesystem.updateOpenedFile(fileId, 'read', 2); // Reads the next bytes until the cursor reaches EOF (buffer size: 2) await Neutralino.filesystem.updateOpenedFile(fileId, 'readAll', 2);   ","version":"Next","tagName":"h3"},{"title":"filesystem.getOpenedFileInfo(id)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemgetopenedfileinfoid","content":" Returns file stream details. Throws NE_FS_UNLTFOP if the file stream identifier is not valid.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-10","content":" id Number: File stream identifier.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-object-awaited-1","content":" id Number: File stream identifier.eof Boolean: Becomes true if the stream reached EOF.pos Number: File stream cursor position.lastRead Number: Last read bytes.  let info = await Neutralino.filesystem.getOpenedFileInfo(0); console.log(info);   ","version":"Next","tagName":"h3"},{"title":"filesystem.createWatcher(path)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemcreatewatcherpath","content":" Creates a filesystem watcher. Throws NE_FS_UNLCWAT for watcher creation failures. If there is an existing active watcher for the given path, this function returns the existing watcher identifier.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-11","content":" path String: Directory path.  ","version":"Next","tagName":"h3"},{"title":"Return Number (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-number-awaited-1","content":" File watcher identifier.  let watcherId = await Neutralino.filesystem.createWatcher(NL_PATH); Neutralino.events.on('watchFile', (evt) =&gt; { if(watcherId == evt.detail.id) { console.log(evt.detail); } }); console.log(`ID: ${watcherId}`);   ","version":"Next","tagName":"h3"},{"title":"filesystem.removeWatcher(watcherId)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemremovewatcherwatcherid","content":" Removes a filesystem watcher. Throws NE_FS_NOWATID for watcher removal failures.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-12","content":" watcherId Number: File watcher identifier.  ","version":"Next","tagName":"h3"},{"title":"Return Number (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-number-awaited-2","content":" File watcher identifier.  let watcherId = await Neutralino.filesystem.createWatcher(NL_PATH); console.log(`ID: ${watcherId}`); await Neutralino.filesystem.removeWatcher(watcherId);   ","version":"Next","tagName":"h3"},{"title":"filesystem.getWatchers()​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemgetwatchers","content":" Returns information about created file watchers.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-object-awaited-2","content":" An array of FileWatcher objects.  ","version":"Next","tagName":"h3"},{"title":"FileWatcher​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filewatcher","content":" id Number: Watcher identifier.path String: File watcher path.  let watchers = await Neutralino.filesystem.getWatchers(); for(let watcher of watchers) { console.log(watcher); }   ","version":"Next","tagName":"h3"},{"title":"filesystem.readDirectory(path, options)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemreaddirectorypath-options","content":" Reads directory contents. Throws NE_FS_NOPATHE if the path doesn't exist.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-13","content":" path String: File/directory path.  ","version":"Next","tagName":"h3"},{"title":"options​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#options-1","content":" recursive Boolean: Read sub-directories recursively. The default value is false.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-object-awaited-3","content":" An array of DirectoryEntry objects.  ","version":"Next","tagName":"h3"},{"title":"DirectoryEntry​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#directoryentry","content":" entry String: file name.type String: The type of the entry (FILE or DIRECTORY).  let entries = await Neutralino.filesystem.readDirectory(NL_PATH); console.log('Content: ', entries);   ","version":"Next","tagName":"h3"},{"title":"filesystem.copy(source, destination)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemcopysource-destination","content":" Copies a file or directory to a new destination. Throws NE_FS_COPYERR if the system cannot copy the path.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-14","content":" source String: Source path.destination String: Destination path.  ","version":"Next","tagName":"h3"},{"title":"options​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#options-2","content":" recursive Boolean: Copy sub-directories recursively. The default value is true.overwrite Boolean: Overwrite an existing file with the same name. The default value is true.skip Boolean: Skip an existing file with the same name. The default value is false.  await Neutralino.filesystem.copy('./source.txt', './destination.txt'); await Neutralino.filesystem.copy('./myDir', './myDirCopy');   ","version":"Next","tagName":"h3"},{"title":"filesystem.move(source, destination)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemmovesource-destination","content":" Moves a file or directory to a new destination. Throws NE_FS_MOVEERR if the system cannot rename the path.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-15","content":" source String: Source path.destination String: Destination path.  await Neutralino.filesystem.move('./source.txt', './destination.txt'); await Neutralino.filesystem.move('./myDir', './myFolder');   ","version":"Next","tagName":"h3"},{"title":"filesystem.getStats(path)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemgetstatspath","content":" Returns file statistics for the given path. If the given path doesn't exist or is inaccessible,NE_FS_NOPATHE is thrown. Therefore, you can use this method to check for the existance of a file or directory.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-16","content":" path String: File or directory path.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-object-awaited-4","content":" size Number: Size in bytes.isFile Boolean: true if the path represents a normal file.isDirectory Boolean: true if the path represents a directory.createdAt Number: On Windows, returns Unix milliseconds of the file creation time — On Unix or Unix-like platforms, returns Unix milliseconds of the last inode modification time.modifiedAt Number: Unix milliseconds of the last file modification time.  let stats = await Neutralino.filesystem.getStats('./sampleVideo.mp4'); console.log('Stats:', stats);   ","version":"Next","tagName":"h3"},{"title":"filesystem.getAbsolutePath(path)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemgetabsolutepathpath","content":" Returns the absolute path for a given path. This function works with paths that don't exist on the system.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-17","content":" path String: Path.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-string-awaited-1","content":" Absolute path.  let path = await Neutralino.filesystem.getAbsolutePath('./myFolder'); console.log(path);   ","version":"Next","tagName":"h3"},{"title":"filesystem.getRelativePath(path, base)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemgetrelativepathpath-base","content":" Returns the relative path for a given path and base. This function works with paths that don't exist on the system.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-18","content":" path String: Path.base String (optional): Base path that is used for calculating the relative path with the path parameter. NL_CWD is used by default if this parameter is not provided.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-string-awaited-2","content":" Relative path.  let path = await Neutralino.filesystem.getRelativePath('./myFolder'); console.log(path); path = await Neutralino.filesystem.getRelativePath('./myFolder', '/home/user'); console.log(path);   ","version":"Next","tagName":"h3"},{"title":"filesystem.getPathParts(path)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemgetpathpartspath","content":" Parses a given path and returns its parts.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-19","content":" path String: Path.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-object-awaited-5","content":" rootName String: Root path name.rootDirectory String: Root path directory.rootPath String: Root path.relativePath String: Path relative to the root path.parentPath String: Parent path or the directory path without filename.filename String: Filename.extension String: File extension.stem String: Filename segment without extension.  let pathParts = await Neutralino.filesystem.getPathParts('./myFolder/myFile.txt'); console.log('Parts:', pathParts);   ","version":"Next","tagName":"h3"},{"title":"filesystem.setPermissions(path, permissions, mode)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemsetpermissionspath-permissions-mode","content":" This method sets the size of the window. Throws NE_FS_UNLSTPR if the framework can't update file permissions for the given path.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-20","content":" path String: Path.permissions Permissions: File permissions using the Permissions object format.mode String(optional): Permission replacement mode. Accepted values are ADD, REPLACE(default), and REMOVE.  Permissions​  all: All permissions for all entities.ownerAll: All file permissions for the owner.groupAll: All file permissions for the user's group.othersAll: All file permissions for other users.ownerRead: Read permission for the owner.ownerWrite: Write permission for the owner.ownerExec: Execution permission for the owner.groupRead: Read permission for the user's group.groupWrite: Write permission for the user's group.groupExec: Execution permission for the user's group.othersRead: Read permission for other users.othersWrite: Write permission for other users.othersExec: Execution permission for other users.  await Neutralino.filesystem.setPermissions(NL_PATH + '/my-directory-1', {ownerRead: true, groupRead: true}); await Neutralino.filesystem.setPermissions(NL_PATH + '/my-directory-2', {all: true}); await Neutralino.filesystem.setPermissions(NL_PATH + '/my-directory-3', {otherAll: true}, 'REMOVE');   ","version":"Next","tagName":"h3"},{"title":"filesystem.getPermissions(path)​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#filesystemgetpermissionspath","content":" Returns file permissions for a given path. Throws NE_FS_NOPATHE if the path doesn't exist or is inaccessible.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#parameters-21","content":" path String: Path.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.filesystem","url":"/docs/api/filesystem#return-object-awaited-6","content":" An instance of the Permissions object.  const permissions = await Neutralino.filesystem.getPermissions(NL_PATH + '/my-directory-1');  ","version":"Next","tagName":"h3"},{"title":"Neutralino.window","type":0,"sectionRef":"#","url":"/docs/api/window","content":"","keywords":"","version":"Next"},{"title":"window.setTitle(title)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowsettitletitle","content":" Sets the title of the native window.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters","content":" title String (optional): Title of the window. Clears the title, if the function was called without the parameter.  await Neutralino.window.setTitle('New title');   ","version":"Next","tagName":"h3"},{"title":"window.getTitle()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowgettitle","content":" Returns the title of the native window.  ","version":"Next","tagName":"h2"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#return-string-awaited","content":" The current title of the native window instance.  let title = await Neutralino.window.getTitle(); console.log(`title = ${title}`);   ","version":"Next","tagName":"h3"},{"title":"window.minimize()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowminimize","content":" Minimizes the native window.  await Neutralino.window.minimize();   ","version":"Next","tagName":"h2"},{"title":"window.unminimize()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowunminimize","content":" Restores the native window from the minimized state.  await Neutralino.window.unminimize();   ","version":"Next","tagName":"h2"},{"title":"window.isMinimized()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowisminimized","content":" Returns true if the native window is minimized.  ","version":"Next","tagName":"h2"},{"title":"Return Boolean (awaited):​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#return-boolean-awaited","content":" true or false based on current minimized status.  let status = await Neutralino.window.isMinimized();   ","version":"Next","tagName":"h3"},{"title":"window.maximize()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowmaximize","content":" Maximizes the native window.  await Neutralino.window.maximize();   ","version":"Next","tagName":"h2"},{"title":"window.unmaximize()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowunmaximize","content":" Restores the native window.  await Neutralino.window.unmaximize();   ","version":"Next","tagName":"h2"},{"title":"window.isMaximized()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowismaximized","content":" Returns true if the native window is maximized.  ","version":"Next","tagName":"h2"},{"title":"Return Boolean (awaited):​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#return-boolean-awaited-1","content":" true or false based on current maximized status.  let status = await Neutralino.window.isMaximized();   ","version":"Next","tagName":"h3"},{"title":"window.setFullScreen()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowsetfullscreen","content":" Enables the full screen mode.  await Neutralino.window.setFullScreen();   ","version":"Next","tagName":"h2"},{"title":"window.exitFullScreen()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowexitfullscreen","content":" Exits from the full screen mode.  await Neutralino.window.exitFullScreen();   ","version":"Next","tagName":"h2"},{"title":"window.isFullScreen()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowisfullscreen","content":" Returns true if the native window is in the full screen mode.  ","version":"Next","tagName":"h2"},{"title":"Return Boolean (awaited):​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#return-boolean-awaited-2","content":" true or false based on current full screen status.  let status = await Neutralino.window.isFullScreen();   ","version":"Next","tagName":"h3"},{"title":"window.show()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowshow","content":" Shows the native window.  await Neutralino.window.show();   ","version":"Next","tagName":"h2"},{"title":"window.hide()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowhide","content":" Hides the native window.  await Neutralino.window.hide();   ","version":"Next","tagName":"h2"},{"title":"window.isVisible()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowisvisible","content":" Returns true if the native window is visible.  ","version":"Next","tagName":"h2"},{"title":"Return Boolean (awaited):​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#return-boolean-awaited-3","content":" true or false based on current visibility status.  let status = await Neutralino.window.isVisible();   ","version":"Next","tagName":"h3"},{"title":"window.focus()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowfocus","content":" Focuses the native window.  await Neutralino.window.focus();   ","version":"Next","tagName":"h2"},{"title":"window.setAlwaysOnTop(onTop)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowsetalwaysontopontop","content":" Activates or deactivates the always on top mode.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters-1","content":" onTop Boolean (optional): Says whether the on top mode should be activated or not. The default value is true.  await Neutralino.window.setAlwaysOnTop(true); // or setAlwaysOnTop(); await Neutralino.window.setAlwaysOnTop(false);   ","version":"Next","tagName":"h3"},{"title":"window.move(x, y)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowmovex-y","content":" Moves the native window into given coordinates. Neutralinojs's cross-platform coordinate system starts from top-left corner of the screen. In other words, x=0,y=0 point refers to the top-left corner of the device's main screen.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters-2","content":" x Number: An integer value for the horizontal position.y Number: An integer value for the vertical position.  await Neutralino.window.move(200, 400);   ","version":"Next","tagName":"h3"},{"title":"window.center()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowcenter","content":" Centers the native app window within the current display.  await Neutralino.window.center();   ","version":"Next","tagName":"h2"},{"title":"window.setIcon(icon)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowseticonicon","content":" Sets an icon for the native window or Dock.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters-3","content":" icon String: Path of the icon. A 200x200 PNG image file works fine on all supported operating systems.  const icon = '/resources/icons/appIcon.png'; await Neutralino.window.setIcon(icon);   ","version":"Next","tagName":"h3"},{"title":"window.setDraggableRegion(domId, options)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowsetdraggableregiondomid-options","content":" Converts a given DOM element to a draggable region. The user will be able to drag the native window by dragging the given DOM element. This feature is suitable to make custom window bars along with the borderless mode.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters-4","content":" domId String | HTMLElement: A DOM element identifier.options DraggableRegionOptions (optional): Customize the behavior of the draggable region.  ","version":"Next","tagName":"h3"},{"title":"DraggableRegionOptions​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#draggableregionoptions","content":" alwaysCapture Boolean (optional): If set to true, the region will always capture the pointer, ensuring that dragging is not interrupted when moving the pointer quickly. Note that it prevents child elements from receiving any pointer events. Defaults to false.dragMinDistance Number (optional): The minimum distance between cursor's starting and current position after which dragging is started. This helps prevent accidental dragging while interacting with child elements. Defaults to 10 and is measured in CSS pixels.  await Neutralino.window.setDraggableRegion('myCustomTitleBar'); await Neutralino.window.setDraggableRegion('myCustomTitleBar', { alwaysCapture: true, dragMinDistance: 15 });   ","version":"Next","tagName":"h3"},{"title":"window.unsetDraggableRegion(domId)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowunsetdraggableregiondomid","content":" Converts a draggable region to a normal DOM elements by removing drag event handlers.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters-5","content":" domId String | HTMLElement: A DOM element identifier.  await Neutralino.window.unsetDraggableRegion('myCustomTitleBar');   ","version":"Next","tagName":"h3"},{"title":"window.setSize(Options)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowsetsizeoptions","content":" This method sets the size of the window.  ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#options","content":" width Number (optional): Window width in pixels.height Number (optional): Window height in pixels.minWidth Number (optional): Minimum width of the window in pixels.minHeight Number (optional): Minimum height of the window in pixels.maxWidth Number (optional): Maximum width of the window in pixels.maxHeight Number (optional): Maximum height of the window in pixels.resizable Boolean (optional): A boolean value to make the window resizable or fixed.  This method always expects width and height couples. For example, if you are setting minWidth, you should set minHeight too.  await Neutralino.window.setSize({ width: 500, height: 200, maxWidth: 600, maxHeight: 400 }); await Neutralino.window.setSize({ resizable: false });   ","version":"Next","tagName":"h3"},{"title":"window.getSize()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowgetsize","content":" Returns window size information.  ","version":"Next","tagName":"h2"},{"title":"Return Boolean (awaited):​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#return-boolean-awaited-4","content":" width Number: Window width in pixels.height Number: Window height in pixels.minWidth Number Minimum width of the window in pixels.minHeight Number: Minimum height of the window in pixels.maxWidth Number: Maximum width of the window in pixels.maxHeight Number: Maximum height of the window in pixels.resizable Boolean: Says whether the window resizable or fixed.  let sizeInfo = await Neutralino.window.getSize(); console.log(sizeInfo);   ","version":"Next","tagName":"h3"},{"title":"window.getPosition()​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowgetposition","content":" Returns window position coordinates.  ","version":"Next","tagName":"h2"},{"title":"Return Boolean (awaited):​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#return-boolean-awaited-5","content":" x Number: Horizontal coordinate of the left edge of the window.y Number: Vertical coordinate of the top edge of the window.  let position = await Neutralino.window.getPosition(); console.log(position);   ","version":"Next","tagName":"h3"},{"title":"window.snapshot(path)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowsnapshotpath","content":" Takes a snapshop of the current window client area (without the window frame) and stores as a PNG image file.   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters-6","content":" path String: Path where the snapshot PNG file should be stored.  await Neutralino.window.snapshot(NL_PATH + '/images/window.png');   ","version":"Next","tagName":"h3"},{"title":"window.create(url, WindowOptions)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowcreateurl-windowoptions","content":" Creates a native window. You can use this method to create new window for your multi-window Neutralinojs app. Neutralinojs spawns a new process for each native window. Therefore, the new window works as an isolated app once the window is created.  However, you can build communication streams between windows with the storage API.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters-7","content":" url String: URL to be loaded. Eg: /resources/aboutWindow.html. Supports loading both local and remote app resources. Local resource paths need to begin with /.options (optional): an instance of WindowOptions type.  ","version":"Next","tagName":"h3"},{"title":"WindowOptions​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowoptions","content":" title String: Window title.icon String: Window icon path.fullScreen Boolean: Sets full screen mode.alwaysOnTop Boolean: Activates the top-most mode.enableInspector Boolean: Activates developer tools and opens the web inspector window.borderless Boolean: Makes the window borderless.maximize Boolean: Launches the window maximized.hidden Boolean: Hides the window.maximizable Boolean: Makes the window maximizable or not.exitProcessOnClose Boolean: Exits the application process when the user clicks the window's close button.width Number: Window width.height Number: Window height.x Number: Window x position.y Number: Window y position.minWidth Number: Minimum width of the window.minHeight Number: Minimum height of the window.maxWidth Number: Maximum width of the window.maxHeight Number: Maximum height of the window.extendUserAgentWith String: Extends the user agent string of the webview instance.injectGlobals Boolean: Injects global variables directly to the webview instance.injectClientLibrary Boolean: Injects the client library source directly to the webview instance.injectScript Boolean: A preload JavaScript source file that executes before web app resources.processArgs String: Additional command-line arguments for the new window process. Check all supported internal command-line arguments from here.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#return-object-awaited","content":" pid Number: Process identifier.stdOut String: Standard output. This value is always empty since the new window process starts asynchronously.stdErr String: Standard error. This value is always empty since the new window process starts asynchronously.exitCode Number: Exit code of the process.  await Neutralino.window.create('/resources/aboutWindow.html', { icon: '/resources/icons/aboutIcon.png', enableInspector: false, width: 500, height: 300, maximizable: false, exitProcessOnClose: true, processArgs: '--window-id=W_ABOUT' });   ","version":"Next","tagName":"h3"},{"title":"window.setMainMenu(menu)​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#windowsetmainmenumenu","content":" Creates/updates the main window menu on GNU/Linux and Windows and application menu on macOS.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.window","url":"/docs/api/window#parameters-8","content":" menu WindowMenuItem[]: An array of WindowMenuItem objects.  WindowMenuItem​  id String (optional): A unique identifier for each menu item.text String: Label of the menu item. This field is a mandatory field. Use - (hyphen) character for a menu separator.isDisabled Boolean (optional): A boolean flag to disable/enable a specific menu item.isChecked Boolean (optional): A boolean flag to mark a specific menu item as selected.menuItems WindowMenuItem[]: Submenu for the current menu item.shortcut String (optional): Sets a key accelerator on macOS (e.g., c for Command + C) and only displays the shortcut on GNU/Linux and Windows, e.g., Ctrl + C.action String (optional): Pre-defined window action for macOS, i.e., cut:, copy:, paste:, etc.  const menu = [ {id: 'file', text: 'File', menuItems: [ {id: 'open', text: 'Open'}, {text: '-'}, {id: 'quit', text: 'Quit'}, ]}, {id: 'edit', text: 'Edit', menuItems: [ {id: 'cut', text: 'Cut'}, {id: 'copy', text: 'Copy'}, {id: 'paste', text: 'Paste'}, ]} ]; await Neutralino.window.setMainMenu(menu); await Neutralino.on('mainMenuItemClicked', (evt) =&gt; { console.log('Menu item:', evt.detail); });  ","version":"Next","tagName":"h3"},{"title":"neu CLI","type":0,"sectionRef":"#","url":"/docs/cli/neu-cli","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#installation","content":" Run the following command on your terminal to install the CLI globally.  npm i -g @neutralinojs/neu   You can also use neu CLI via npx if you don't want a global installation.  npx @neutralinojs/neu &lt;command&gt;   ","version":"Next","tagName":"h2"},{"title":"Commands​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#commands","content":" ","version":"Next","tagName":"h2"},{"title":"neu create <binaryName>​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#neu-create-binaryname","content":" Creates a new Neutralinojs app based on a template.  Parameters​  &lt;binaryName&gt;: The name of your application's binary file. For example, if you used myapp, the final application binaries will become myapp-&lt;platform&gt;_&lt;arch&gt;.  Options​  --template: Sets the application template via GitHub repository identifier with the &lt;account&gt;/&lt;repo&gt; format. The default value is neutralinojs/neutralinojs-minimal  ","version":"Next","tagName":"h3"},{"title":"neu build​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#neu-build","content":" This command will create the dist folder. Thereafter, it will produce the binaries for all supported platforms and resources.neu resource file from your application resources.  Options​  --release: Creates a portable ZIP file of the application bundle.--copy-storage: Copies the current snapshot of the Neutralinojs storage to the application bundle.--macos-bundle: Creates a minimal MacOS app bundle by adding the .app extension.--config-file=&lt;path&gt;: Uses a custom app configuration file only for the packaging process.  ","version":"Next","tagName":"h3"},{"title":"neu run​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#neu-run","content":" Executes the current application (This will execute specific binary depending on your operating system). This command will change execution permissions (using the chmod command) of the binary files on Linux and macOS. Also, it enables auto-reload for the current application. In other words, when a modification happens to application resources, the Neutralinojs application will be reloaded automatically.  You can see Neutralinojs process and extensions output streams while the application is running.  If you use the cli.frontendLibrarykey in app configuration, the CLI enables both frontend library's development environment and Neutralinojs's development evironment at the same time. This option patches the main HTML file with the Neutralinojs client library global variables to expose the native API to the frontend library's development server. Learn how to setup this feature from this guide.  Options​  --disable-auto-reload: Disables the auto-reloading feature.--arch=&lt;arch&gt;: Explicitly set the CPU architecture. This option is helpful if you use a 32-bit Node.js process on a 64-bit computer.-- &lt;process-args&gt;: Sets additional CLI arguments for the Neutralinojs application process. For example you can enable the browser mode by entering neu run -- --mode=browser. See all accepted arguments from here.  ","version":"Next","tagName":"h3"},{"title":"neu update​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#neu-update","content":" This command will update the existing Neutralinojs binaries and client library from the internet. You can use the nightly tag for the cli.binaryVersion and cli.clientVersion in the neutralino.config.json file to use experimental daily pre-releases.  Options​  --latest: Fetches the latest framework version details via the GitHub API, downloads from official releases , and update the app configuration with fetched version details.  warning Nightly builds refers to automatically generated daily builds, so these builds can contain experimental or incomplete features. Therefore, avoid using nightly versions in your production apps. Use nightly versions to try out latest features, but use a stable version for production apps.  ","version":"Next","tagName":"h3"},{"title":"neu version​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#neu-version","content":" Prints all version information. If this command is executed from a Neutralinojs application directory, you will see project-specific version details. Otherwise, you will see global version details.  ","version":"Next","tagName":"h3"},{"title":"neu plugins [plugin]​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#neu-plugins-plugin","content":" Parameters​  plugin: Plugin identifier. This value is usually the npm package identifer.  Options​  --add: Registers a new plugin to neu CLI. neu CLI downloads plugins to the CLI's node_modulesdirectory and loads during the bootstrap process. Plugins can introduce new commands to the CLI.--remove: Unregisters an existing plugin.  ","version":"Next","tagName":"h3"},{"title":"Plugins​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#plugins","content":" Neutralinojs app developers are able to write plugins to add their own commands to the neu CLI. You can develop CLI plugins with the folllowing steps.  ","version":"Next","tagName":"h2"},{"title":"Developing a plugin​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#developing-a-plugin","content":" neu CLI will register plugins using index.js as an interface. Create a new npm package with index.js and add the following code snippet.  // index.js module.exports = { command: 'commandname &lt;action&gt;', register: (command, modules) =&gt; { command.option('--option1 --option2') .action((action, command) =&gt; { //your logic goes here.. }); } }   command is the CLI command string with actions. The register function will be called when plugin is being registered. Also, it has the command object andstandard modules objectas parameters. Please check commander package documentation for more information about commands and callback parameters.  ","version":"Next","tagName":"h3"},{"title":"Publishing your plugin​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#publishing-your-plugin","content":" Once you publish your plugin to the npm registry as a public package, anyone will be able to install it using:  neu plugins --add &lt;package-name&gt;   and it can be removed using:  neu plugins --remove &lt;package-name&gt;   See the Appify plugin source for further implementation details.  ","version":"Next","tagName":"h3"},{"title":"Changelog​","type":1,"pageTitle":"neu CLI","url":"/docs/cli/neu-cli#changelog","content":" Please check the changelog from GitHub. ","version":"Next","tagName":"h2"},{"title":"Neutralino.os","type":0,"sectionRef":"#","url":"/docs/api/os","content":"","keywords":"","version":"Next"},{"title":"os.execCommand(command, options)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osexeccommandcommand-options","content":" Executes a command and returns the output.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters","content":" command String: The command that is to be executed.  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#options","content":" background Boolean: Executes the command in background and resolve the Promise immediately if this is set to true. This option makes the process detached from the API function call, so if you need to connect with the newly created process later, consider using os.spawnProcess.stdIn String: Standard input as a string.cwd String: Current working directory.envs Object: Key-value pairs of an environment variables set.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-object-awaited","content":" pid Number: Process identifier.stdOut String: Standard output.stdErr String: Standard error.exitCode Number: Exit code of the process.  let info = await Neutralino.os.execCommand('python --version'); console.log(`Your Python version: ${info.stdOut}`); await Neutralino.os.execCommand('npm start', { background: true }); await Neutralino.os.execCommand('node index.js', { envs: { VAR1: 'Value1', VAR2: 'Value2' }});   ","version":"Next","tagName":"h3"},{"title":"os.spawnProcess(command, options)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osspawnprocesscommand-options","content":" Spawns a process based on a command in background and let developers control it.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-1","content":" command String: The command that is to be executed in a new process.  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#options-1","content":" cwd String (optional): Current working directory.envs Object: Key-value pairs of an environment variables set.  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-object-awaited-1","content":" id Number: A Neutralino-scoped process identifier. This value is used for controlling the process via the native API.pid Number: Process identifier from the operating system.  let pingProc = await Neutralino.os.spawnProcess('ping neutralino.js.org'); Neutralino.events.on('spawnedProcess', (evt) =&gt; { if(pingProc.id == evt.detail.id) { switch(evt.detail.action) { case 'stdOut': console.log(evt.detail.data); break; case 'stdErr': console.error(evt.detail.data); break; case 'exit': console.log(`Ping process terminated with exit code: ${evt.detail.data}`); break; } } });   ","version":"Next","tagName":"h3"},{"title":"os.updateSpawnedProcess(id, action, data)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osupdatespawnedprocessid-action-data","content":" Updates a spawned process based on a provided action and data. Throws NE_OS_UNLTOUP if the process cannot be updated.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-2","content":" id Number: Neutralino-scoped process identifier.action String: An action to take. Accepts only the following values: stdIn: Sends data to the process via the standard input stream.stdInEnd: Closes the standard input stream file descriptor.exit: Terminates the process. data Object (optional): Additional data for the action. Send stardard input string if the actionis stdIn.  let nodeProc = await Neutralino.os.spawnProcess('node'); Neutralino.events.on('spawnedProcess', (evt) =&gt; { if(nodeProc.id == evt.detail.id) { switch(evt.detail.action) { case 'stdOut': console.log(evt.detail.data); // 10 break; case 'stdErr': console.error(evt.detail.data); break; case 'exit': console.log(`Node.js process terminated with exit code: ${evt.detail.data}`); break; } } }); await Neutralino.os.updateSpawnedProcess(nodeProc.id, 'stdIn', 'console.log(5 + 5);'); await Neutralino.os.updateSpawnedProcess(nodeProc.id, 'stdInEnd');   ","version":"Next","tagName":"h3"},{"title":"os.getSpawnedProcesses()​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osgetspawnedprocesses","content":" Returns all spawned processes.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-object-awaited-2","content":" An array of SpawnedProcess objects.  SpawnedProcess​  id Number: A Neutralino-scoped process identifier..pid Number: Process identifier from the operating system.  await Neutralino.os.spawnProcess('ping neutralino.js.org'); await Neutralino.os.spawnProcess('ping codezri.org'); let processes = await Neutralino.os.getSpawnedProcesses(); console.log(processes);   ","version":"Next","tagName":"h3"},{"title":"os.getEnv(key)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osgetenvkey","content":" Provides the value of a given environment variable.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-3","content":" key String: The name of the environment variable.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-string-awaited","content":" Value of the given environment variable. Returns an empty string if the environment variable is not defined.  let value = await Neutralino.os.getEnv('USER'); console.log(`USER = ${value}`);   ","version":"Next","tagName":"h3"},{"title":"os.getEnvs()​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osgetenvs","content":" Returns all environment variables and their values.  ","version":"Next","tagName":"h2"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-object-awaited-3","content":" Environment variables details in key-value pairs.  let envs = await Neutralino.os.getEnvs(); console.log(envs);   ","version":"Next","tagName":"h3"},{"title":"os.showOpenDialog(title, options)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osshowopendialogtitle-options","content":" Shows the file open dialog. You can use this function to obtain paths of existing files.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-4","content":" title String (optional): Title of the dialog.  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#options-2","content":" filters Filter[] (optional): An array of Filter objects to filter the files list.multiSelections (optional): Enables multi selections.defaultPath String (optional): Initial path/filename displayed by the dialog.  Filter​  name String: Filter name.extensions String: Array of file extensions. Eg: ['jpg', 'png']  ","version":"Next","tagName":"h3"},{"title":"Return Object (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-object-awaited-4","content":" An array of selected entries.  let entries = await Neutralino.os.showOpenDialog('Open a diagram', { defaultPath: '/home/my/directory/', filters: [ {name: 'Images', extensions: ['jpg', 'png']}, {name: 'All files', extensions: ['*']} ] }); console.log('You have selected:', entries);   ","version":"Next","tagName":"h3"},{"title":"os.showSaveDialog(title, options)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osshowsavedialogtitle-options","content":" Shows the file save dialog. You can use this function to obtain a path to create a new file.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-5","content":" title String (optional): Title of the dialog.  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#options-3","content":" filters Filter[] (optional): An array of Filter objects to filter the files list.forceOverwrite Boolean (optional): Skips file overwrite warning message.defaultPath String (optional): Initial path/filename displayed by the dialog.  Filter​  name String: Filter name.extensions String[]: Array of file extensions. Eg: ['jpg', 'png']  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-string-awaited-1","content":" Selected filename.  let entry = await Neutralino.os.showSaveDialog('Save to file', { defaultPath: 'untitled.jpg', filters: [ {name: 'Images', extensions: ['jpg', 'png']}, {name: 'All files', extensions: ['*']} ] }); console.log('You have selected:', entry);   ","version":"Next","tagName":"h3"},{"title":"os.showFolderDialog(title)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osshowfolderdialogtitle","content":" Shows the folder open dialog.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-6","content":" title String (optional): Title of the dialog.  ","version":"Next","tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#options-4","content":" defaultPath String (optional): Initial path displayed by the dialog.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-string-awaited-2","content":" Selected folder.  let entry = await Neutralino.os.showFolderDialog('Select installation directory', { defaultPath: '/home/my/directory/' }); console.log('You have selected:', entry);   ","version":"Next","tagName":"h3"},{"title":"os.showNotification(title, content, icon)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osshownotificationtitle-content-icon","content":" Displays a notification message.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-7","content":" title String: Notification title.content String: Content of the notification.icon String (optional): Icon name. Accpeted values are: INFO, WARNING, ERROR, and QUESTION. The default value isINFO  await Neutralino.os.showNotification('Hello world', 'It works! Have a nice day'); await Neutralino.os.showNotification('Oops :/', 'Something went wrong', 'ERROR');   ","version":"Next","tagName":"h3"},{"title":"os.showMessageBox(title, content, choice, icon)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osshowmessageboxtitle-content-choice-icon","content":" Displays a message box.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-8","content":" title String: Title of the message box.content String: Content of the message box.choice String (optional): Message box buttons. Accpeted values are: OK, OK_CANCEL, YES_NO, YES_NO_CANCEL, RETRY_CANCEL, and ABORT_RETRY_IGNORE. The default value is OK.icon String (optional): Icon name. Accpeted values are: INFO, WARNING, ERROR, and QUESTION. The default value is INFO.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-string-awaited-3","content":" User's choice.  await Neutralino.os.showMessageBox('Hello', 'Welcome'); let button = await Neutralino.os .showMessageBox('Confirm', 'Are you sure you want to quit?', 'YES_NO', 'QUESTION'); if(button == 'YES') { Neutralino.app.exit(); }   ","version":"Next","tagName":"h3"},{"title":"os.setTray(options)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#ossettrayoptions","content":" Creates/updates the tray icon and menu.  ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#options-5","content":" icon String: Tray icon path. Eg: /resources/icons/trayIcon.png. A20x20-sized PNG image file works fine on all supported operating systems.menuItems TrayMenuItem[]: An array of TrayMenuItem objects.  TrayMenuItem​  id String (optional): A unique identifier for each menu item.text String: Label of the menu item. This field is a mandatory field. Use - (hyphen) character for a menu separator.isDisabled Boolean (optional): A boolean flag to disable/enable a specific menu item.isChecked Boolean (optional): A boolean flag to mark a specific menu item as selected.  let tray = { icon: '/resources/icons/trayIcon.png', menuItems: [ {id: &quot;about&quot;, text: &quot;About&quot;}, {text: &quot;-&quot;}, {id: &quot;quit&quot;, text: &quot;Quit&quot;} ] }; await Neutralino.os.setTray(tray);   ","version":"Next","tagName":"h3"},{"title":"os.getPath(name)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osgetpathname","content":" Returns known platform-specific folders such as Downloads, Music, Videos, etc.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-9","content":" title String: Name of the folder. Accepted values are: config, data, cache, documents, pictures, music, video,downloads, saveGames1, saveGames2, and temp. Throws NE_OS_INVKNPT for invalid folder names.  ","version":"Next","tagName":"h3"},{"title":"Return String (awaited):​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#return-string-awaited-4","content":" Path.  let downloadsPath = await Neutralino.os.getPath('downloads'); console.log(`Downloads folder: ${downloadsPath}`);   ","version":"Next","tagName":"h3"},{"title":"os.open(url)​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#osopenurl","content":" Opens a URL with the default web browser.  tip If your application is running in the default web browser, this method will open a new tab.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Neutralino.os","url":"/docs/api/os#parameters-10","content":" url String: URL to be opened.  Neutralino.os.open('https://neutralino.js.org');  ","version":"Next","tagName":"h3"},{"title":"Modes","type":0,"sectionRef":"#","url":"/docs/configuration/modes","content":"","keywords":"","version":"Next"},{"title":"window​","type":1,"pageTitle":"Modes","url":"/docs/configuration/modes#window","content":" Neutralinojs application will run on a native window. The window will use the user's operating system's theme. This mode is a good selection for cross-platform application development.  ","version":"Next","tagName":"h2"},{"title":"browser​","type":1,"pageTitle":"Modes","url":"/docs/configuration/modes#browser","content":" Neutralinojs application will use the user's default browser to load the application. Therefore, you can build web applications with native operations. You can't typically access operating system-level features via web browsers. But, the Neutralinojs browser mode helps you to make web apps that can access the operating system layer with required security controls.  ","version":"Next","tagName":"h2"},{"title":"cloud​","type":1,"pageTitle":"Modes","url":"/docs/configuration/modes#cloud","content":" This mode will run the Neutralinojs process as a background server. You will be able to expose your application to a public network or the internet.  tip Example scenario: You can make a web application to control your computer via mobile phones.  Besides, you can run the Neutralinojs server on bare-metal servers, virtual machines, and application containers as a lightweight message broker. You may find endless use-cases for this framework mode.  danger Make sure that you are blocking or allowing critical native operations vianativeBlockList, nativeAllowList respectively. Also, if you started the application with administrator access, your web application will have the same permission level.  ","version":"Next","tagName":"h2"},{"title":"chrome​","type":1,"pageTitle":"Modes","url":"/docs/configuration/modes#chrome","content":" Neutralinojs app will run as a Chrome application. The framework uses the following Chrome command-line arguments to make the web application look more like a native app.  --disable-background-networking --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-breakpad --disable-client-side-phishing-detection --disable-default-apps --disable-dev-shm-usage --disable-infobars --disable-extensions --disable-features=site-per-process --disable-hang-monitor --disable-ipc-flooding-protection --disable-popup-blocking --disable-prompt-on-repost --disable-renderer-backgrounding --disable-sync --disable-translate --disable-windows10-custom-titlebar --metrics-recording-only --no-first-run --no-default-browser-check --safebrowsing-disable-auto-update --password-store=basic --use-mock-keychain --user-data-dir=${NL_PATH}/.tmp/chromedata   Neutralinojs chrome mode works on a computer that has a pre-installed version of Google Chrome, Chromium, or Microsoft Edge browser. If no installation was detected, Neutralinojs displays an error message by asking the user to install a Chromium-based browser.  You can provide additional arguments (Eg: --disable-web-security) to the Chrome process via argsconfiguration attribute. Browse all supported Chromium command-line arguments here ","version":"Next","tagName":"h2"},{"title":"Project Structure","type":0,"sectionRef":"#","url":"/docs/configuration/project-structure","content":"","keywords":"","version":"Next"},{"title":"Developing apps with vanilla JS​","type":1,"pageTitle":"Project Structure","url":"/docs/configuration/project-structure#developing-apps-with-vanilla-js","content":" If you like to develop Neutralinojs applications with vanilla JavaScript, you can place all application resources in one directory. After that, you can update the neutralino.config.json file with the following values.   ... &quot;cli&quot;: { ... &quot;resourcesPath&quot;: &quot;/&lt;resourcesDir&gt;/&quot;, &quot;clientLibrary&quot;: &quot;/&lt;resourcesDir&gt;/neutralino.js&quot; }   You can choose a name for &lt;resourceDir&gt;. But, by default neu CLI will use resources.  ","version":"Next","tagName":"h2"},{"title":"Developing apps with frontend frameworks​","type":1,"pageTitle":"Project Structure","url":"/docs/configuration/project-structure#developing-apps-with-frontend-frameworks","content":" Any frontend framework can be used to make Neutralinojs applications. You can use any pattern as you wish to include both Neutralinojs app and frontend app in one repository. You can check our recommended approach from this guide.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Project Structure","url":"/docs/configuration/project-structure#examples","content":" Please browse sample apps section. ","version":"Next","tagName":"h3"},{"title":"Architecture","type":0,"sectionRef":"#","url":"/docs/contributing/architecture","content":"Architecture The Neutralinojs framework core follows a single-process, monolithic, and layered architectural pattern with two-interconnected components: the framework core (C++) and the client library (JavaScript). Look at the following high-level architectural diagram: The framework core has two key components: the router and the native API. The router component is responsible for processing HTTP and WebSocket messages. Neutralinojs typically serve all web resources via HTTP like a normal HTTP web server. The Neutralinojs native API communication protocol uses the WebSocket messaging protocol. The router serves web resources and executes native API functions according to the incoming requests from the web context. Your JavaScript application needs to use the Neutralinojs client library functions to execute native API operations. The platform-specific webview runs the JavaScript code of the client library and your application. The webview component isn't a core framework component, so you can run Neutralinojs applications on any modern web browser with browser, chrome, and cloud modes. Because of this flexibility, you can write extensions with any programming language and connect to the framework core with authentication details. Even though an extension-less application follows a monolithic pattern, extensions make Neutralinojs applications non-monolithic with the process-based microservices architecture.","keywords":"","version":"Next"},{"title":"Committers","type":0,"sectionRef":"#","url":"/docs/contributing/committers","content":"","keywords":"","version":"Next"},{"title":"Become a committer​","type":1,"pageTitle":"Committers","url":"/docs/contributing/committers#become-a-committer","content":" You can actively submit patches, bug-reports, and ideas to become a Neutralinojs committer!  ","version":"Next","tagName":"h2"},{"title":"Become a PMC member​","type":1,"pageTitle":"Committers","url":"/docs/contributing/committers#become-a-pmc-member","content":" PMC (Project Management Committee) members usually take decisions about project's future. Active committers will be added to the PMC list frequently by the existing PMC members according to their commitment. ","version":"Next","tagName":"h2"},{"title":"About Neutralinojs","type":0,"sectionRef":"#","url":"/docs/contributing/about-neutralinojs","content":"","keywords":"","version":"Next"},{"title":"History​","type":1,"pageTitle":"About Neutralinojs","url":"/docs/contributing/about-neutralinojs#history","content":" In 2018, three Uva Wellassa University students, Shalitha Suranga,Deepal Samarakoon, and Chathumadhuri Hettiarachchi published a research paper about a theoretical way to build cross-platform apps using inbuilt platform-specific browser libraries. They initially planned to use &quot;Neutrino&quot; as the research project name, but it was already taken. So, they decided to use &quot;Neutralinojs&quot; as the project name (Neutralino refers to a hypothetical lightweight particle).  For the research paper, Shalitha Suranga wrote a small POC project for GNU/Linux and Windows to demonstrate the theoretical idea and published it to GitHub as an experimental open-source project. In 2019, the research paper authors started working with the software development industry. But, Shalitha Suranga decided to maintain the POC project alone as a hobby project due to the positive feedback received from the developer communities. Later, Kasun Vithanage ported the POC project to the macOS platform.  During 2020–2021, Shalitha Suranga rewrote the Neutralinojs POC project with a new WebSockets-based architecture. His goal was to make the project production-ready with a stable API, well-organized codebase, DevOps improvements, and developer-friendly documentation. Since this rewrite was so different compared to the original research project idea, he planned to re-brand &quot;Neutralinojs&quot; as &quot;Neu.js&quot;. However, he decided to use the same name due to the existing Neutralinojs-related content on the internet.  In 2022, Neutralinojs passed remarkable development milestones and became a popular open-source framework for building lightweight cross-platform desktop apps with JavaScript. During this journey, the developer community supported Neutralinojs with ideas and code contributions.  ","version":"Next","tagName":"h2"},{"title":"Current development​","type":1,"pageTitle":"About Neutralinojs","url":"/docs/contributing/about-neutralinojs#current-development","content":" In 2022, Shalitha Suranga added the Neutralinojs project under the CodeZri non-profit organization to maintain the project, along with his other personal open-source projects.  Nowadays, he releases a new framework version every two months with support from very supportive contributors.  The project uses a community-driven development methodology. Developer community members and maintainers collaboratively work by writing code, reporting bugs, improving documentation, and discussing features.  ","version":"Next","tagName":"h2"},{"title":"Financial perspective​","type":1,"pageTitle":"About Neutralinojs","url":"/docs/contributing/about-neutralinojs#financial-perspective","content":" Shalitha Suranga often donates his time to Neutralinojs by writing code, reviewing pull requests, and planning future of Neutralinojs. He integrated EthicalAds andGoogle Adsense with the Neutralinojs website to generate revenue for his work. Also, he accepts donations from the developer community via his personalPatreon and GitHub Sponsors accounts.  Moreover, you can donate Neutralinojs via OpenCollective.  Neutralinojs has no plans to monetize the framework with paid licensing/subscriptions, paid support, or courses. Also, Neutralinojs doesn't accept payments to deliver new custom features or solve bugs in apps. Our goal is to keep improving Neutralinojs as a pure FOSS project under the donation-based financial model.  tip Read this articleto learn how to build a community-friendly revenue stream around your open-source project.  We motivate everyone to build a community-friendly revenue stream around open-source projects! ","version":"Next","tagName":"h2"},{"title":"Code Style Guide","type":0,"sectionRef":"#","url":"/docs/contributing/code-style-guide","content":"","keywords":"","version":"Next"},{"title":"Programming best practices​","type":1,"pageTitle":"Code Style Guide","url":"/docs/contributing/code-style-guide#programming-best-practices","content":" First, make sure that your code change adheres to the following language-independent best practices:  Neutralinojs codebases use a procedural and functional mixed coding style, so avoid adding classes and OOP concepts. However, it's okay to use class-based libraries, but make sure not to expose those classes from Neutralinojs internal procedures. Keep the source code simple even though the development requirement is somewhat complex.This articleexplains more about programming principles that you need to know. We stabilized the Neutralinojs codebase structure and have no plans to extend it further with new modules. In other words, please try to implement your code changes without changing the existing code structure. Please discuss first if your code suggestion needs to extend the code structure. Try to make new APIs and features consistent with the existing implementation. We decided not to expose any operating system-specific feature from the Neutralinojs API for the framework consistency across all operating systems. Therefore, make sure that your new feature will work on all supported operating systems. Write tests for new features and update the changelog file. Add comments only if a further explanation is required. Use self-explanatory identifiers for every code element by following the existing naming convention in the codebase. Use four spaces for indentation instead of tabs or two spaces. Inspect an existing source file and use the same formatting with new source files.  ","version":"Next","tagName":"h2"},{"title":"C++ code style guide​","type":1,"pageTitle":"Code Style Guide","url":"/docs/contributing/code-style-guide#c-code-style-guide","content":" We are still composing a complete C++ code style guide. Make sure to follow the following points for C++ code submissions for now.   We don't use C++ exceptions. Use booleans or status codes to identify failures. For example, we use the following struct for the file read operation:  bool removeWatcher(long watcherId); struct FileReaderResult { errors::StatusCode status = errors::NE_ST_OK; string data; };   We prefer single-line comments (i.e., // comment) over multi-line comments. Use pass-by-reference for complex data types, but use pass-by-value for atomics. Also, use theconst keyword properly if the parameter doesn't change within the procedure. For example, look at the following function definition:  fs::FileReaderResult readFile(const string &amp;filename);   Avoid mixing old C-style syntax with modern C++ syntax.Use the __ prefix (double underscore) to declare module-only functions as shown in the following example:  void __registerAllowList() { // implementation }   Use getter and setter functions instead of shared global variables (defined with extern).Avoid implementing long, complex data validations that are too specific and narrow. Always write minimal, concise code by not writing complex validations. For example, you don't need to do any JSON data type checks in API implementations since native method execution failures send errors::NE_RT_NATRTER to the Neutralinojs client library.  ","version":"Next","tagName":"h2"},{"title":"JavaScript code style guide​","type":1,"pageTitle":"Code Style Guide","url":"/docs/contributing/code-style-guide#javascript-code-style-guide","content":" Use ES6 JavaScript syntax by avoiding legacy language syntax. Use template literals for somewhat complex string construction, but use the + operator for simple concatenation. Use the async/await syntax instead of the then/catch syntax for asynchronous operations. Avoid using too recent JavaScript APIs and language features since we need to support older Node.js and browser versions. But, think twice about readability with somewhat old JavaScript features. Don't use more than three parameters for a function—use a JSON object instead for better readability. If you work with some TypeScript codes, always strive to use the meaningful data types instead any orunknown broad data types. ","version":"Next","tagName":"h2"},{"title":"Developer Support","type":0,"sectionRef":"#","url":"/docs/contributing/developer-support","content":"","keywords":"","version":"Next"},{"title":"Bug reports and feature requests​","type":1,"pageTitle":"Developer Support","url":"/docs/contributing/developer-support#bug-reports-and-feature-requests","content":" There are no perfect software. But we can build good software. Help us to improve Neutralinojs by reporting bugs and submitting feature requests.  Please create an issue on appropriate GitHub repository for feature requests and bug reporting.  Neutralinojs native API: Create an issueNeutralinojs JavaScript API: Create an issueneu CLI: Create an issueStarter template: Create an issueDocumentaion: Create an issue: ","version":"Next","tagName":"h2"},{"title":"Frequently Asked Questions","type":0,"sectionRef":"#","url":"/docs/contributing/frequently-asked-questions","content":"","keywords":"","version":"Next"},{"title":"Framework​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/contributing/frequently-asked-questions#framework","content":" ","version":"Next","tagName":"h2"},{"title":"Error Code 127: libayatana-appindicator3.so.1 cannot open shared object file: No such file or directory​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/contributing/frequently-asked-questions#error-code-127-libayatana-appindicator3so1-cannot-open-shared-object-file-no-such-file-or-directory","content":" We fixed this issue in v4.5.0, so please upgrade your framework version. If you need to use a lower framework version, you need to install the missing package with the following commands to start the app properly:  apt update apt install -y libayatana-appindicator3-1   Make sure to run the above commands with sudo. Check the package information for further reference.  ","version":"Next","tagName":"h3"},{"title":"CLI​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/contributing/frequently-asked-questions#cli","content":" ","version":"Next","tagName":"h2"},{"title":"What should I do when I get Missing permission to execute the native method: <namespace.func> error ?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/contributing/frequently-asked-questions#what-should-i-do-when-i-get-missing-permission-to-execute-the-native-method-namespacefunc-error-","content":" This error occurs when permissions are not given to execute a specific native method. To be able to run this function, add the namespace.func to the nativeAllowList. To allow all functions of the particular namespace, use namespace.*. Check here to learn more about allowlists.  ","version":"Next","tagName":"h3"},{"title":"yarn global add @neutralinojs/neu doesn't complete the installation process.​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/contributing/frequently-asked-questions#yarn-global-add-neutralinojsneu-doesnt-complete-the-installation-process","content":" When yarn is used to install neu, the output shows success Installed &quot;@neutralinojs/neu&quot;. But, neu commands don't work even after installation, which neu outputs nothing. Check here for further information about the particular issue.  This error is more of an yarn issue. To fix it, the developer needs to add the yarn global bin command output to $PATH. For example, we can add the following command to the .bashrc file (or other Shell interpreter initialization scripts):  export PATH=&quot;$(yarn global bin):$PATH&quot;   For more information, check the official documentation of yarn here. ","version":"Next","tagName":"h3"},{"title":"Framework Developer Guide","type":0,"sectionRef":"#","url":"/docs/contributing/framework-developer-guide","content":"","keywords":"","version":"Next"},{"title":"Setup and build the framework​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#setup-and-build-the-framework","content":" ","version":"Next","tagName":"h2"},{"title":"Cloning the repository​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#cloning-the-repository","content":" First, clone the main repository.  git clone https://github.com/neutralinojs/neutralinojs.git cd neutralinojs   ","version":"Next","tagName":"h3"},{"title":"Installing compilation tools and dependencies​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#installing-compilation-tools-and-dependencies","content":" Linux​  No need for separate compilers because Linux distributions usually have GNU C/C++ compilers installed already.  Install GTK, WebKit, other libraries with the following command.  Debian​  sudo apt install libgtk-3-dev   sudo apt install libwebkit2gtk-4.1-0 # --- or --- sudo apt install libwebkit2gtk-4.0-37   Fedora​  sudo dnf install \\ @development-tools \\ gtk3 \\ webkit2gtk3.x86_64 \\ webkit2gtk3-devel.x86_64 \\ libgtk-3-dev \\ libwebkit2gtk-4.1-0 \\ # or libwebkit2gtk-4.0-37 libglib2.0-dev \\ libxrandr-dev   Arch​  sudo pacman -S \\ gtk3 \\ webkit2gtk   Windows​  Install the latest Visual Studio IDE with Windows SDK. The Neutralinojs compilation process will use the MSVC C++ compiler (aka cl.exe).  info How to activate Windows 10 SDK: While installing it in the Visual Studio Installer, go to tab Workloads, section &quot;Desktop &amp; Mobile&quot; and select &quot;Desktop development with C++&quot;. On the right in &quot;Installation details&quot; &gt; &quot;Desktop development with C++&quot; &gt; &quot;Optional&quot;, make sure &quot;Windows 10 SDK&quot; is checked.  macOS​  Install Xcode Command Line Tools.  ","version":"Next","tagName":"h3"},{"title":"Compile the Neutralinojs framework.​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#compile-the-neutralinojs-framework","content":" Run the following script in order to build the framework binaries.  Linux or macOS​  python3 scripts/bz.py   Windows​  python scripts/bz.py   info You need to have the Python interpreter (version 3.x) installed to run this script.  Neutralinojs uses BuildZri C++ build automation tool to generate binaries on local development computers and CI/CD servers. Read the BuildZri documentation to learn more about CLI options and configuration.  ","version":"Next","tagName":"h3"},{"title":"Setup and build the client​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#setup-and-build-the-client","content":" Neutralinojs apps communicate with the Neutralinojs process via a WebSocket connection. This WebSocket connection gets initiated by the Neutralinojs client.  Clone the client repository to the same directory where you downloaded the main repository.  git clone https://github.com/neutralinojs/neutralino.js.git cd neutralino.js   Install developer dependencies.  npm install   ","version":"Next","tagName":"h2"},{"title":"Executing the test app​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#executing-the-test-app","content":" The main repository has a simple test application that you can use during development related activities. You can enter the following command from the main repository to build and update the test app's client.  bash ./scripts/update_client.sh   Now run the newly compiled test app with the following command.  LinuxmacOSWindows ./bin/neutralino-linux_x64 --load-dir-res   ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#testing","content":" Testing is a crucial part in every development activity. Every pull request in the main codebase will trigger the following automated tests.  Builds on Linux, macOS, and Windows with x64 machines.Integration test suite.  However, you can run our integration test suite from your local computer too with the following command from the main codebase's directory.  cd spec npm install npm run test   It's always good to run the test suite for the module you've updated with the following command.  npm run test &lt;module&gt; # Eg: npm run test filesystem   info If you need to run tests for the extensions module, make sure to enter npm install from./bin/extensions/sampleextension first.  The above command will run test only for the given module.  ","version":"Next","tagName":"h2"},{"title":"Adding a new test case​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#adding-a-new-test-case","content":" To add a test case simply add it to the spec/&lt;module&gt;.spec.js file. For example, if you need to add a new test case to the debug module, add the test case to the spec/debug.spec.js file.  Next, run the test suite for that specific module, as shown in the following command snippet:  cd spec npm i npm run test debug   ","version":"Next","tagName":"h3"},{"title":"Project directory structure​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#project-directory-structure","content":" ","version":"Next","tagName":"h2"},{"title":"Framework​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#framework","content":" Source: github.com/neutralinojs/neutralinojs  api: The native API implementation and controllers. Written in REST API style.auth: Authentication and permissions-related logic.bin: Test app source code.lib: Third-party libraries source files.server: WebSocket/HTTP communication endpoints.spec: Integration/API test suite.scripts: Contains automation scripts to build the framework, generate release notes, update the client library, and build resources.neu for the test app.  ","version":"Next","tagName":"h3"},{"title":"Client library​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#client-library","content":" Source: github.com/neutralinojs/neutralino.js  src/api: JavaScript API frontend and implementaion.src/browser: Browser-related API implementation.src/ws: WebSocket client implementaion.scripts: Contains automation scripts to generate release notes.  ","version":"Next","tagName":"h3"},{"title":"Contribution guidelines​","type":1,"pageTitle":"Framework Developer Guide","url":"/docs/contributing/framework-developer-guide#contribution-guidelines","content":" Before, contributing to the codebase, please check the following things.  Discuss the feature/improvement/bug-fix with the Neutralinojs team via GitHub discussions.Get familiar with the code style. Write your code according to theNeutralinojs code style guide.Become familiar with all modules in the codebase.Avoid adding new features to only one platform.  Thanks for helping us to make Neutralinojs better! ","version":"Next","tagName":"h2"},{"title":"Security","type":0,"sectionRef":"#","url":"/docs/contributing/security","content":"","keywords":"","version":"Next"},{"title":"Port security and authentication​","type":1,"pageTitle":"Security","url":"/docs/contributing/security#port-security-and-authentication","content":" Once you study the Neutralinojs architecture, you will notice that the framework frontend communicates with the framework core via a WebSocket-based network port. Developers who know the operating system internals will argue that the Neutralinojs framework is vulnerable due to the local port-based IPC.  Let's understand it this way. The network is undoubtedly vulnerable, but network security strategies make networks secure for every computer user—that's how we trust the internet today. Similarly, Neutralinojs uses the One-Time-Token (OTT) strategy to prevent possible port scanning attacks.  Here is how the Neutralinojs local port is secured:  The Neutralinojs framework's authentication module generates the OTT during the initialization process and a part of the OTT is saved as Connection Token (CT) for WebSocket clients.When the user loads the client-library script, the framework sends the OTT only once.The client library stores the OTT in the local storage for future usage—the framework never sends the OTT again to the frontend. Depending on the current application mode, the client library stores the OTT in either webview or web browser.The client library uses CT to establish a WebSocket connection with the framework.The OTT is used to verify every native API function call that comes from WebSocket clients (including the client-library).The framework blocks WebSocket connections from remote URLs within window, browser, and Chrome modes.  The following criteria need to be satisfied for executing an arbitrary API function via a malicious webpage (local) or program:  The specific malicious component needs to capture the OTT before the original application obtains the OTT from the framework core. This attacking strategy is not practical because of the fast application startup and lack of faster ways to access operating system-level process status. Even though someone manages to detect the application startup, the original application requests OTT before the malicious program (The framework sends OTT only once). On the other hand, malicious programs don't need Neutralinojs to damage your computer system, so use programs you trust. Even the OTT request process is not possible with modern web browsers via remote pages due to CORS-like security strategies. Also, we don't even enable the native API for remote pages due to strict application security. If there is a way (there is no proven approach yet) to crack OTT, native API access controls protect the user's computer.  ","version":"Next","tagName":"h2"},{"title":"Native API access control and authorization​","type":1,"pageTitle":"Security","url":"/docs/contributing/security#native-api-access-control-and-authorization","content":" The OTT strategy provides authentication for native API access by preventing invalid/vulnerable client connections. The OTT grants access to the native API, but it doesn't give access to everything. Most modern popular application runtimes provide access to everything without proper access control. In the Neutralinojs native API model, developers need to mention the APIs they need explicitly for better security.  Developers can define API permission requirements via the native allowlist or blocklist features. The Neutralinojs native API permission system provides authorization support by validating incoming requests with the pre-defined permission matrices.  Look at the following authentication/authorization diagram for more details:    Moreover, Neutralinojs extensions also securely receive WebSocket authentication details (OTT, CT, and port) via standard input streams, so malicious programs can't obtain connectivity secrets by scanning your process list.  Read our security policyto learn how to handle security-related framework issues. ","version":"Next","tagName":"h2"},{"title":"neutralino.config.json","type":0,"sectionRef":"#","url":"/docs/configuration/neutralino.config.json","content":"","keywords":"","version":"Next"},{"title":"Primary​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#primary","content":" The following configuration values cannot be overridden in different Neutralinojs modes.  ","version":"Next","tagName":"h2"},{"title":"applicationId: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#applicationid-string","content":" Unique string to identify your application. Eg: js.neutralino.sample  ","version":"Next","tagName":"h3"},{"title":"version: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#version-string","content":" Application version. Eg: 2.4.22  ","version":"Next","tagName":"h3"},{"title":"defaultMode: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#defaultmode-string","content":" Mode of the application. Accepted values are window, browser, cloud, and chrome.  ","version":"Next","tagName":"h3"},{"title":"General​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#general","content":" You can override the following configuration values from different modes. For example, you can use a specific URL in root-level and another URL in window-mode-level, as shown below.  { &quot;url&quot;: &quot;/&quot; &quot;modes&quot;: { &quot;window&quot;: { &quot;url&quot;: &quot;/#window-mode&quot; } } }   ","version":"Next","tagName":"h2"},{"title":"port: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#port-number","content":" The port of your application. If the value is 0, Neutralinojs will use a random available port.  ","version":"Next","tagName":"h3"},{"title":"enableServer: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#enableserver-boolean","content":" Enables or disables the background server (Disables static file servering feature and native API messaging). If you load a remote URL to the webview, you can set this option to false. Make sure to set this option to true if you load resources from local sources. The default value is false.  ","version":"Next","tagName":"h3"},{"title":"enableNativeAPI: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#enablenativeapi-boolean","content":" Enables or disables the native API. If you want to use any native API functions, you can set this option to true. The default value is false.  ","version":"Next","tagName":"h3"},{"title":"singlePageServe: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#singlepageserve-boolean","content":" Activates SPA (Single Page App) serving. When this option is enabled, the static server module serves the primaryindex.html file for sub-directory requests only if another index.html doesn't exist in a specific sub-directory. The default value for this option is false.  ","version":"Next","tagName":"h3"},{"title":"tokenSecurity: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#tokensecurity-string","content":" Neutralinojs uses a client-server communication pattern with a local WebSocket to handle native calls. This local server is protected with an auto-generated token. This option defines the security implementation for the token.  Accepts the following values:  one-time (Recommended) : Server sends the access token only once, and the client persists it in thesessionStorage. If another client (Eg: browser) tries to access the app, NE_RT_INVTOKN error message will be shown instead of the application. Using this option is recommended since it reduces security issues. none : Server sends the access token always, so any new client can see the application.  The default value becomes one-time if this setting is not specified by the developer.  danger If you are using native APIs that can access your computer's internals such as os, filesystem, modules, never use none option since any new client can use those APIs.  ","version":"Next","tagName":"h3"},{"title":"url: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#url-string","content":" The entry URL of the application. Neutralinojs will initially load this URL. This property accepts both relative and absolute URLs. See following examples.  &quot;url&quot;: &quot;/&quot;   The above config loads http://localhost:&lt;port&gt;/ URL initially (internally /index.html is loaded). You can use remote urls too.  &quot;url&quot;: &quot;http://example.com&quot;   ","version":"Next","tagName":"h3"},{"title":"documentRoot: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#documentroot-string","content":" Sets the document root for the static server. For example, if you need to use resources directory as the document root, you can use setup documentRoot as follows.  { &quot;documentRoot&quot;: &quot;/resources/&quot;, &quot;url&quot;: &quot;/&quot; }   Make sure to configure url properly with the document root. The following configuration is wrong, it instructs the static server to fetch resources from ./resources/resources.  { &quot;documentRoot&quot;: &quot;/resources/&quot;, &quot;url&quot;: &quot;/resources/&quot; }   However, you can use a sub-directory in URL, as shown below.  { &quot;documentRoot&quot;: &quot;/&quot;, &quot;url&quot;: &quot;/resources/&quot; }   ","version":"Next","tagName":"h3"},{"title":"exportAuthInfo: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#exportauthinfo-boolean","content":" Exports authentication details to the ${NL_PATH}/.tmp/auth_info.json file with the following JSON structure.  { &quot;port&quot;: &quot;&lt;port&gt;&quot;, &quot;accessToken&quot;: &quot;&lt;access_token&gt;&quot; }   You can use the above authentication details to connect with Neutralinojs from external processes by using WebSocket as an IPC mechanism.  ","version":"Next","tagName":"h3"},{"title":"enableExtensions: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#enableextensions-boolean","content":" Enables/disables extensions. Learn more about this option here  ","version":"Next","tagName":"h3"},{"title":"extensions: object[]​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#extensions-object","content":" An array of extension definitions. Learn more about this option here  ","version":"Next","tagName":"h3"},{"title":"nativeBlockList: string[]​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#nativeblocklist-string","content":" An array of native methods needs to be blocked from the frontend of the application. The wildcard character * is allowed inside entries.  { &quot;nativeBlockList&quot;: [&quot;os.execCommand&quot;], &quot;nativeBlockList&quot;: [&quot;app.*&quot;] }   ","version":"Next","tagName":"h3"},{"title":"nativeAllowList: string[]​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#nativeallowlist-string","content":" An array of native methods needs to be allowed from the frontend of the application. The wildcard character * is allowed inside entries.  { &quot;nativeAllowList&quot;: [&quot;os.getEnv&quot;], &quot;nativeAllowList&quot;: [&quot;storage.*&quot;] }   ","version":"Next","tagName":"h3"},{"title":"globalVariables: object​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#globalvariables-object","content":" A key-value-based JavaScript object of custom global variables.  ","version":"Next","tagName":"h3"},{"title":"logging.enabled: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#loggingenabled-boolean","content":" Enables or disables the logging feature.  ","version":"Next","tagName":"h3"},{"title":"logging.writeToLogFile: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#loggingwritetologfile-boolean","content":" Enables or disables log file. If this setting is false, the framework won't write log to neutralinojs.log, and it will write logs to standard streams.  ","version":"Next","tagName":"h3"},{"title":"serverHeaders: object​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#serverheaders-object","content":" Custom headers for the static server and Websocket handshake process. For example, the following configuration sends a custom header with every outgoing HTTP response.  { &quot;serverHeaders&quot;: { &quot;Test-Header-Option&quot;: &quot;Value&quot; } }   ","version":"Next","tagName":"h3"},{"title":"dataLocation: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#datalocation-string","content":" Configures the internal framework data files storage directory.  Accepts the following values:  app (default): Stores framework data files within the app directory. system : Stores framework data files within the system application data directory (i.e., /home/username/.local/share/&lt;applicationId&gt; on GNU/Linux systems). App developers can obtain the current data directory string from the NL_DATAPATH global variable.  ","version":"Next","tagName":"h3"},{"title":"storageLocation: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#storagelocation-string","content":" Configures the Neutralinojs storage location.  Accepts the following values:  app (default): Stores .neustorage files within .storage directory of the app directory. system : Stores .neustorage files within the system application data directory (i.e., /home/username/.local/share/&lt;applicationId&gt;/.storage on GNU/Linux systems).  ","version":"Next","tagName":"h3"},{"title":"Window mode​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#window-mode","content":" The following configuration values are used when the application runs with the window mode.  ","version":"Next","tagName":"h2"},{"title":"modes.window.title: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowtitle-string","content":" Title of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.width: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowwidth-number","content":" Width of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.height: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowheight-number","content":" Height of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.minWidth: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowminwidth-number","content":" Minimum width of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.minHeight: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowminheight-number","content":" Minimum height of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.maxWidth: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowmaxwidth-number","content":" Maximum width of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.maxHeight: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowmaxheight-number","content":" Maximum height of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.x: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowx-number","content":" Left position (x) of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.y: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowy-number","content":" Right position (y) of the native window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.center: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowcenter-boolean","content":" Centers the native app window initially.  ","version":"Next","tagName":"h3"},{"title":"modes.window.transparent: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowtransparent-boolean","content":" Enables the transparent native window mode for the application instance. If the transparency mode is activated, users can see through the webview if the webpage background uses transparent background colors. Partial transparency can be activated using the rgba() CSS color function. You can use this feature to create semi-transparent windows, windows with custom shadows, and custom-shaped window frames.  The default value is false for this option.  info Unlike in other platforms, Windows native window becomes borderless (window controls will be hidden) with the activation of the transparent mode.  ","version":"Next","tagName":"h3"},{"title":"modes.window.fullScreen: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowfullscreen-boolean","content":" Activates the full-screen mode.  ","version":"Next","tagName":"h3"},{"title":"modes.window.icon: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowicon-string","content":" Application icon's file name. You can directly point to an image file in the resources directory. We recommend you to choose a transparent PNG file.  ","version":"Next","tagName":"h3"},{"title":"modes.window.alwaysOnTop: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowalwaysontop-boolean","content":" Activates the top-most mode.  ","version":"Next","tagName":"h3"},{"title":"modes.window.enableInspector: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowenableinspector-boolean","content":" Automatically opens the developer tools window.  ","version":"Next","tagName":"h3"},{"title":"modes.window.borderless: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowborderless-boolean","content":" Activates the borderless mode.  ","version":"Next","tagName":"h3"},{"title":"modes.window.maximize: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowmaximize-boolean","content":" Launches the application maximized.  ","version":"Next","tagName":"h3"},{"title":"modes.window.resizable: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowresizable-boolean","content":" Make the window resizable or not. The default value is true.  ","version":"Next","tagName":"h3"},{"title":"modes.window.hidden: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowhidden-boolean","content":" Make the window invisible. This setting can be used to develop background services.  ","version":"Next","tagName":"h3"},{"title":"modes.window.exitProcessOnClose: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowexitprocessonclose-boolean","content":" If this setting is true, the app process will exit when the user clicks on the close button. Otherwise, the framework will dispatch the windowClose event.  ","version":"Next","tagName":"h3"},{"title":"modes.window.useSavedState: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowusesavedstate-boolean","content":" Save and load the primary window state (width, height, x, y, values and maximized status) automatically. The default value is true.  ","version":"Next","tagName":"h3"},{"title":"modes.window.extendUserAgentWith: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowextenduseragentwith-string","content":" Extends the default webview-specific user agent string with a custom suffix. If this value is not set, the webview sets the default user agent from the platform-specific rendering engine (i.e., WebKit on GNU/Linux).  ","version":"Next","tagName":"h3"},{"title":"modes.window.injectGlobals: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowinjectglobals-boolean","content":" Injects global variables directly to the webview instance. If you use this feature, you don't need to include __neutralino_globals.js or neutralino.js file to receive Neutralinojs global variables to your web app.  ","version":"Next","tagName":"h3"},{"title":"modes.window.injectClientLibrary: boolean​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowinjectclientlibrary-boolean","content":" Injects global variables and the client library implementation directly to the webview instance. If you use this feature, you don't need to include the client library manually via the neutralino.js file or from the @neutralinojs/lib NPM module.  ","version":"Next","tagName":"h3"},{"title":"modes.window.injectScript: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeswindowinjectscript-string","content":" Injects a preload JavaScript file to the webview instance from the app bundle. This script file will be executed before webapp resources and after window.injectGlobalsand window.injectClientLibrary scripts, so you can write initialization scripts using Neutralinojs API within this source file.  ","version":"Next","tagName":"h3"},{"title":"Chrome mode​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#chrome-mode","content":" The following configuration values are used when the application starts with the chrome mode.  ","version":"Next","tagName":"h2"},{"title":"modes.chrome.width: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeschromewidth-number","content":" Width of the chrome window.  ","version":"Next","tagName":"h3"},{"title":"modes.chrome.height: number​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeschromeheight-number","content":" Height of the chrome window.  ","version":"Next","tagName":"h3"},{"title":"modes.chrome.args: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#modeschromeargs-string","content":" Additional command-line arguments for the Chrome process. Read more about chrome mode from here  ","version":"Next","tagName":"h3"},{"title":"CLI​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#cli","content":" The following configuration values are used for the neu CLI.  ","version":"Next","tagName":"h2"},{"title":"cli.binaryName: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clibinaryname-string","content":" Binary file name of your application. If it is myapp, all binaries will usemyapp-&lt;platform&gt;_&lt;arch&gt; format.  ","version":"Next","tagName":"h3"},{"title":"cli.resourcesPath: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#cliresourcespath-string","content":" Path of your application resources.  ","version":"Next","tagName":"h3"},{"title":"cli.resourcesExclude: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#cliresourcesexclude-string","content":" Regex pattern to exclude files from final app bundle. For example, the following configuration will exclude all the TypeScript source files from the final build:  { &quot;resourcesExclude&quot; : &quot;.*\\\\.ts$|.*\\\\.tsx$&quot; }   ","version":"Next","tagName":"h3"},{"title":"cli.extensionsPath: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#cliextensionspath-string","content":" Path of your application extensions.  ","version":"Next","tagName":"h3"},{"title":"cli.extensionsExclude: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#cliextensionsexclude-string","content":" Regex pattern to exclude files from the extensions directory of the final app package. For example, the following configuration will exclude .log and .info files:  { &quot;extensionsExclude&quot; : &quot;.*\\\\.log$|.*\\\\.info$&quot; }   ","version":"Next","tagName":"h3"},{"title":"cli.clientLibrary: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#cliclientlibrary-string","content":" Filename of the Neutralinojs JavaScript library.  ","version":"Next","tagName":"h3"},{"title":"cli.binaryVersion: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clibinaryversion-string","content":" Neutralinojs server version. Get nightly builds by using the nightly tag.  ","version":"Next","tagName":"h3"},{"title":"cli.clientVersion: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#cliclientversion-string","content":" Neutralinojs client version. Get nightly builds by using the nightly tag.  ","version":"Next","tagName":"h3"},{"title":"cli.autoReloadExclude: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#cliautoreloadexclude-string","content":" A JavaScript regular expression to exclude files from the auto-reload file watcher. For example, the following configuration will disable auto-reloading for SASS stylesheets (.scss).  { &quot;autoReloadExclude&quot;: &quot;.*\\\\.scss$&quot; }   Use | character to set multiple regular expressions, as shown below.  { &quot;autoReloadExclude&quot;: &quot;.*\\\\.scss$|.*\\\\.less$&quot; }   ","version":"Next","tagName":"h3"},{"title":"cli.frontendLibrary: object​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clifrontendlibrary-object","content":" Enables frontend development tools (HMR, etc) for the neu run command. Learn more about frontend framework integration from here  ","version":"Next","tagName":"h3"},{"title":"cli.hostProject.projectPath: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clihostprojectprojectpath-string","content":" Sets the project path of the host project. This path will be used as the current directory while executing the host-project-related commands.  ","version":"Next","tagName":"h3"},{"title":"cli.hostProject.initCommand: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clihostprojectinitcommand-string","content":" A command that gets executed after downloading an host app template with the neu create command.  ","version":"Next","tagName":"h3"},{"title":"cli.hostProject.devCommand: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clihostprojectdevcommand-string","content":" This command will run with the neu run command to start the host project.  ","version":"Next","tagName":"h3"},{"title":"cli.hostProject.buildCommand: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clihostprojectbuildcommand-string","content":" The neu build command will execute this command before generating the app bundle, so you can generate bundled version of host project code.  ","version":"Next","tagName":"h3"},{"title":"cli.hostProject.buildPath: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clihostprojectbuildpath-string","content":" Location where the final read-to-distribute host project files will be stored after the execution of buildCommand. Files in this folder are copied into the app bundle path after the execution of neu build command.  ","version":"Next","tagName":"h3"},{"title":"cli.distributionPath: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clidistributionpath-string","content":" Sets the build path for neu CLI. For example, if you need to get the built binaries in build folder instead of dist, you can set the distributionPath as follows:  { &quot;distributionPath&quot;: &quot;/build&quot;, }   The default value for distributionPath is /dist.  ","version":"Next","tagName":"h3"},{"title":"cli.copyItems: string[]​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#clicopyitems-string","content":" Copies non-resource items (configurations, scripts, etc.) to the final application bundle. Supports files and directories:  { &quot;copyItems&quot;: [&quot;/scripts&quot;, &quot;/myConf.json&quot;] }   ","version":"Next","tagName":"h3"},{"title":"Windows-specific options​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#windows-specific-options","content":" There are additional configuration options that define metadata and appearance of executables for Windows platform. These fields must be placed in the root of neutralino.config.json. Every field is optional.  ","version":"Next","tagName":"h2"},{"title":"applicationName: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#applicationname-string","content":" The human-readable application name. Fills in the ProductName field of the executable.  ","version":"Next","tagName":"h3"},{"title":"applicationIcon: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#applicationicon-string","content":" The location of the executable's icon relative to neutralino.config.json. The icon must be in PNG format. If it is not set, an icon from modes.window.icon will be chosen instead. If modes.window.icon does not point to a PNG file, too, a default Neutralino.js icon will be used.  ","version":"Next","tagName":"h3"},{"title":"author: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#author-string","content":" The developer of the application. Fills in the CompanyName field of the executable.  ","version":"Next","tagName":"h3"},{"title":"description: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#description-string","content":" A description of the executable file. This usually describes the purpose of your application. Fills in the FileDescription field of the executable.  ","version":"Next","tagName":"h3"},{"title":"copyright: string​","type":1,"pageTitle":"neutralino.config.json","url":"/docs/configuration/neutralino.config.json#copyright-string","content":" Copyright information. Fills in the LegalCopyright field of the executable.  Example configuration:  { &quot;applicationId&quot;: &quot;cook.pancake.bakery&quot;, &quot;version&quot;: &quot;1.2.0&quot;, &quot;applicationName&quot;: &quot;Pancake Bakery&quot;, &quot;author&quot;: &quot;Sweet Pancakes LLC&quot;, &quot;description&quot;: &quot;Digital recipe book for pancakes from all over the world&quot;, &quot;copyright&quot;: &quot;Copyright © Sweet Pancakes LLC 2042. All rights reserved.&quot;, &quot;applicationIcon&quot;: &quot;buildAssets/appIcon.png&quot;, &quot;cli&quot;: { &quot;binaryName&quot;: &quot;pancakebakery&quot; } }  ","version":"Next","tagName":"h3"},{"title":"Distribution Overview","type":0,"sectionRef":"#","url":"/docs/distribution/overview","content":"","keywords":"","version":"Next"},{"title":"Application build results​","type":1,"pageTitle":"Distribution Overview","url":"/docs/distribution/overview#application-build-results","content":" The neu build command generates the following files on any supported operating system into the dist directory.  Filename\tOS\tCPU architecture\tTypemyapp-linux_x64\tLinux\tx86_64\tApplication binary myapp-linux_armhf\tLinux\tarmhf\tApplication binary myapp-linux_arm64\tLinux\tarm64\tApplication binary myapp-mac_x64\tmacOS\tx86_64\tApplication binary (Intel) myapp-mac_universal\tmacOS\tx86_64 and arm64\tApplication binary myapp-mac_arm64\tmacOS\tarm64\tApplication binary (M1/M2/M3) myapp-win_x64\tWindows\tx86_64\tApplication binary resources.neu\tall\tN/A\tApplication resource file  Neutralinojs officially offers only pre-built x64 and armhf/arm64 Linux-only binaries. If you need binaries for other CPU architectures, consider building binaries from the source with this guide. We are trying to officially support all CPU architectures soon!  ","version":"Next","tagName":"h2"},{"title":"Selecting files for packaging​","type":1,"pageTitle":"Distribution Overview","url":"/docs/distribution/overview#selecting-files-for-packaging","content":" The neu CLI generates application binaries for all supported platforms at once. These binaries are pre-built binaries. Therefore, please check oursecurity policy before you continue with the distribution process.  As the first step for packaging, you can pick two files for each targeted operating system: application binary and the resource file. For example, if you need to make an application package for x64 Linux computers, pick myapp-linux_x64and the resources.neu file. The resources.neu contains all application resources, so, double click on the binary and check whether the resource file is not corrupted.  ","version":"Next","tagName":"h2"},{"title":"Creating portable application packages using build scripts​","type":1,"pageTitle":"Distribution Overview","url":"/docs/distribution/overview#creating-portable-application-packages-using-build-scripts","content":" The hschneider/neutralino-build-scripts community project offers pre-developed build scripts for generating platform-specific application bundles. For example, it generates a standard app structure on GNU/Linux by generating .desktop file with app icon by also providing a shell script to install the app.  Clone the scripts to your root directory of your app folder to get started with Neutralinojs build scripts:  git clone https://github.com/hschneider/neutralino-build-scripts.git build-scripts   Install jq, which is required for parsing JSON files:  # On macOS: brew install jq # On Linux or Windows/WSL: sudo apt-get install jq   Update neutralino.config.json file with build scripts configuration as follows:   &quot;buildScript&quot;: { &quot;mac&quot;: { &quot;architecture&quot;: [&quot;x64&quot;, &quot;arm64&quot;, &quot;universal&quot;], &quot;minimumOS&quot;: &quot;10.13.0&quot;, &quot;appName&quot;: &quot;myapp&quot;, &quot;appBundleName&quot;: &quot;myapp&quot;, &quot;appIdentifier&quot;: &quot;com.marketmix.ext.bun.demo&quot;, &quot;appIcon&quot;: &quot;resources/icons/icon.icns&quot; }, &quot;win&quot;: { &quot;architecture&quot;: [&quot;x64&quot;], &quot;appName&quot;: &quot;myapp&quot;, &quot;appIcon&quot;: &quot;resources/icons/icon.ico&quot; }, &quot;linux&quot;: { &quot;architecture&quot;: [&quot;x64&quot;, &quot;arm64&quot;, &quot;armhf&quot;], &quot;appName&quot;: &quot;myapp&quot;, &quot;appIcon&quot;: &quot;resources/icons/icon.png&quot;, &quot;appPath&quot;: &quot;/usr/share/myapp&quot;, &quot;appIconPath&quot;: &quot;/usr/share/myapp/icon.png&quot;, &quot;appIconLocation&quot;: &quot;/usr/share/myapp/icon.png&quot; } }   ","version":"Next","tagName":"h2"},{"title":"Generating an application bundle for macOS​","type":1,"pageTitle":"Distribution Overview","url":"/docs/distribution/overview#generating-an-application-bundle-for-macos","content":" You can generate a new application bundle for macOS by running the following command:  ./build-mac.sh   The build is created in the ./dist folder.  The buildScript/mac JSON segment in the config-file contains the following fields:  Key\tDescriptionarchitecture\tThis is an array of the architectures, you want to build. In our example we build all 3 architectures. minimumOS\tThe minimum macOS version. appName\tThe app-name as displayed in the Finder. appBundleName\tThe macOS app-bundle name. appIdentifier\tThe macOS app-identifier. appIcon\tPath to the app-icon in .icns format. If only the filename is submitted, the file is expected in the project's root.  Visit the build scripts official documentation for more details.  ","version":"Next","tagName":"h3"},{"title":"Generating an application bundle for Windows​","type":1,"pageTitle":"Distribution Overview","url":"/docs/distribution/overview#generating-an-application-bundle-for-windows","content":" You can generate a new application bundle for Windows by running the following command:  ./build-win.sh   The build is created in the ./dist folder.  You can now run install install-icon.cmd to set the app icon as specifed in config file. This script required you to have Resource Hacker installed on your machine.  The buildScript/win JSON segment in the config-file contains the following fields:  Key\tDescriptionarchitecture\tThis is an array of the architectures, you want to build. Because Neutralino currently only support 'x64', you should leave this untouched. appName\tThe app-name as displayed in the File Explorer, with or without .exe-suffix. appIcon\tPath to the app-icon in .ico format. If only the filename is submitted, the file is expected in the project's root. The icon is copied from this path into the app-bundle. To apply the icon to the executable file, you'll have to run Resource Hacker from a Windows machine. To do so, just double-click install-icon.cmd in the app-bundle.  Visit the build scripts official documentation for more details.  ","version":"Next","tagName":"h3"},{"title":"Generating an application bundle for Linux​","type":1,"pageTitle":"Distribution Overview","url":"/docs/distribution/overview#generating-an-application-bundle-for-linux","content":" You can generate a new application bundle for GNU/Linux by running the following command:  ./build-linux.sh   All build targets are created in the ./dist folder.  Calling sudo ./install.sh from your build folder automatically installs the app to the locations you defined.  The buildScript/linux JSON segment in the config-file contains the following fields:  Key\tDescriptionarchitecture\tThis is an array of the architectures, you want to build. In our example we build all 3 architectures. appName\tThe app-name as displayed in the File Explorer. appIcon\tPath to the app-icon in .png or .svg format. If only the filename is submitted, the file is expected in the project's root. The icon is copied from this path into the app-bundle. Example: resources/icons/icon.png appPath\tThe path of application directory in system where the source files will live after installing without the executable name and without ending slash. Example: /usr/share/myapp appIconPath\tThis is path to application icon after the application has been installed in the Linux system. This path is written to the .desktop-file. Example: /usr/share/myapp/icon.png appIconLocation\tSame as appIconPath.  Visit the build scripts official documentation for more details.  ","version":"Next","tagName":"h3"},{"title":"Creating application installers​","type":1,"pageTitle":"Distribution Overview","url":"/docs/distribution/overview#creating-application-installers","content":" The following guides are not documented yet.  Creating an application installer for LinuxCreating an application installer for macOSCreating an application installer for Windows ","version":"Next","tagName":"h2"},{"title":"Using Frontend Libraries","type":0,"sectionRef":"#","url":"/docs/getting-started/using-frontend-libraries","content":"","keywords":"","version":"Next"},{"title":"React​","type":1,"pageTitle":"Using Frontend Libraries","url":"/docs/getting-started/using-frontend-libraries#react","content":" neu create myapp --template codezri/neutralinojs-react cd myapp # Start the React development server with Neutralinojs neu run # Build the React and Neutralinojs app neu build   Repository: codezri/neutralinojs-react  ","version":"Next","tagName":"h2"},{"title":"Using any frontend library​","type":1,"pageTitle":"Using Frontend Libraries","url":"/docs/getting-started/using-frontend-libraries#using-any-frontend-library","content":" The following tutorial guides you to set up any frontend library with Neutralinojs by explaining how we built the Neutralinojs React template:  ","version":"Next","tagName":"h2"},{"title":"Initializing projects​","type":1,"pageTitle":"Using Frontend Libraries","url":"/docs/getting-started/using-frontend-libraries#initializing-projects","content":" First, you need to create a new empty Neutralinojs project. Use theneutralinojs/neutralinojs-zero template to create an empty project, as shown below.  neu create myapp --template neutralinojs/neutralinojs-zero   Now, create a new project with your favourite frontend framework's command-line tools. In this tutorial, we are going to use React, but you can use any frontend library as you wish. You need to create this project inside the myapp directory.  cd myapp npx create-react-app react-src   ","version":"Next","tagName":"h3"},{"title":"Configuring Neutralinojs project​","type":1,"pageTitle":"Using Frontend Libraries","url":"/docs/getting-started/using-frontend-libraries#configuring-neutralinojs-project","content":" The neutralinojs-zero template has a pre-included HTML file and icon, so delete the www directory since we don't need those files now.  rm -rf www   You need to configure the Neutralinojs project to support the frontend framework. First, you can set the document root with your frontend framework's build directory. React typically generates build outputs tobuild directory, so we can update documentRoot as follows.  &quot;documentRoot&quot;: &quot;/react-src/build/&quot;   Now, our Neutralinojs app knows the application resource location, but it's missing an icon, so set an icon for the app. You can load an icon from your frontend framework's default resources directory. For demonstration purposes, let's use the React icon from the public directory.   &quot;modes&quot;: { &quot;window&quot;: { // --- other options &quot;icon&quot;: &quot;/react-src/public/logo192.png&quot; } }   ","version":"Next","tagName":"h3"},{"title":"Configuring neu CLI​","type":1,"pageTitle":"Using Frontend Libraries","url":"/docs/getting-started/using-frontend-libraries#configuring-neu-cli","content":" By default, the zero template configuration asks the Neutralinojs CLI to download the Neutralinojs client (aka neutralino.js) from GitHub releases. Then, the CLI creates your app package by copying the neutralino.js file. However, you can download the client library from the NPM registry and bundle with your app frontend. Remove the clientLibrary property from the Neutralinojs configuration to avoid fetching the client from GitHub releases:  We can configure CLI for React by using the following options.   &quot;cli&quot;: { // --- other options &quot;resourcesPath&quot;: &quot;/react-src/build/&quot;, // --- &quot;clientLibrary&quot;: &quot;/www/neutralino.js&quot;, // &lt;--- Remove this option // --- }   Now, you can build and run the React application as a Neutralinojs application — it's possible with the following steps.  First, build the React application with the following command.  cd react-src npm run build   Finally, run the Neutralinojs application.  cd .. neu run   ","version":"Next","tagName":"h3"},{"title":"Initializing native API with @neutralinojs/lib​","type":1,"pageTitle":"Using Frontend Libraries","url":"/docs/getting-started/using-frontend-libraries#initializing-native-api-with-neutralinojslib","content":" You could run the application with the neu run command, but you cannot use the native API yet because it has not been initialized. To do that you need to install the Neutralinojs client with following command:  cd react-src npm install @neutralinojs/lib   The next step is to load Neutralinojs global variables. You can achieve that by including JavaScript script in the root HTML file of a framework of your choice.  React typically holds the main HTML file content in the ./public/index.html file, so we can put the following HTML snippet there to load the client library.  &lt;script src=&quot;%PUBLIC_URL%/__neutralino_globals.js&quot;&gt;&lt;/script&gt;   Now make sure to initialize the client library from your frontend application entry point file. React's application entry-point is typically ./src/index.js. Therefore, we can do the initialization process from there by calling the init function from @neutralinojs/lib package.  import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import App from './App'; // Import init function from &quot;@neutralinojs/lib&quot; import { init } from &quot;@neutralinojs/lib&quot; ReactDOM.render( &lt;React.StrictMode&gt; &lt;App /&gt; &lt;/React.StrictMode&gt;, document.getElementById('root') ); init(); // Add this function call   Let's validate if the client library loaded properly. To do that let's use filesystem API in order to read the current directory of Neutralinojs app.  Firstly you need to update neutralino.config.json to allow what API your application can call. You can enable the whole namespace filesystem.* or just single function from a given namespace like in the snippet below.   &quot;nativeAllowList&quot;: [ &quot;app.*&quot;, &quot;filesystem.readDirectory&quot; ],   Now let's add following snippet in ./src/App.js file which will log the current directory or error message when App component is mounted.  import { useEffect } from 'react' import './App.css'; // Import filesystem namespace import { filesystem } from &quot;@neutralinojs/lib&quot; function App() { // Log current directory or error after component is mounted useEffect(() =&gt; { filesystem.readDirectory('./').then((data) =&gt; { console.log(data) }).catch((err) =&gt; { console.log(err) }) }, []) return ( &lt;div className=&quot;App&quot;&gt; My Neutralinojs App &lt;/div&gt; ); } export default App;   The last step is to run your Neutralinojs app with --window-enable-inspector argument which will allow you to open developer tools.  cd react-src npm run build cd .. neu run -- --window-enable-inspector   The current directory should be logged to the console. To open developer tools right click anywhere in the Neutralinojs application and press inspect element.  ","version":"Next","tagName":"h3"},{"title":"Enabling hot-reload and configuration​","type":1,"pageTitle":"Using Frontend Libraries","url":"/docs/getting-started/using-frontend-libraries#enabling-hot-reload-and-configuration","content":" Building every code change and testing your application is undoubtedly time-consuming. Therefore, you can use your frontend framework's HMR (Hot Module Replacement) features to speed up your development activities. But, we have a small issue here. There are now two HTTP servers: the Neutralinojs resource server and the frontend framework's development server. How can we load the Neutralinojs client library from the frontend framework's development server?  Don't worry — neu CLI provides a built-in feature to enable HMR by patching the main HTML file. You can add the following section to your configuration file for activating hot-reloading.   &quot;cli&quot;: { // --- other options &quot;frontendLibrary&quot;: { &quot;patchFile&quot;: &quot;/react-src/public/index.html&quot;, &quot;devUrl&quot;: &quot;http://localhost:3000&quot; } } }   The above options tell neu CLI about the main HTML file and development server URL.  Next, configure your project by adding frontend-library-specific development commands as follows:   &quot;cli&quot;: { // --- other options &quot;frontendLibrary&quot;: { &quot;patchFile&quot;: &quot;/react-src/public/index.html&quot;, &quot;devUrl&quot;: &quot;http://localhost:3000&quot;, &quot;projectPath&quot;: &quot;/react-src/&quot;, &quot;initCommand&quot;: &quot;npm install&quot;, &quot;devCommand&quot;: &quot;BROWSER=none npm start&quot;, &quot;buildCommand&quot;: &quot;npm run build&quot; } } }   Finally, run the Neutralinojs application with the following command.  neu run   The above command executes the devCommand, starts the React development server, and run the Neutralinojs app in development mode.    ","version":"Next","tagName":"h3"},{"title":"Packaging​","type":1,"pageTitle":"Using Frontend Libraries","url":"/docs/getting-started/using-frontend-libraries#packaging","content":" To produce the app binaries, you can use the following command, as usual:  neu build --release   The above command executes the buildCommand first, so the application bundle will use the currect React project source.  See the full source code of this tutorial here. ","version":"Next","tagName":"h3"},{"title":"Your First Neutralinojs App","type":0,"sectionRef":"#","url":"/docs/getting-started/your-first-neutralinojs-app","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Your First Neutralinojs App","url":"/docs/getting-started/your-first-neutralinojs-app#introduction","content":" We are going to create a simple application using Neutralinojs. This sample application will display Hello with the current username of your operating system. For example, if the current username is John, it will show, Hello John.  note This tutorial uses Vanilla JavaScript for building the app. If you would like to use a frontend library, check this guide.  ","version":"Next","tagName":"h2"},{"title":"Step 0: Installing neu CLI​","type":1,"pageTitle":"Your First Neutralinojs App","url":"/docs/getting-started/your-first-neutralinojs-app#step-0-installing-neu-cli","content":" You need to install neu CLI to create Neutralinojs applications. However, you can develop applications without CLI as well. But, the CLI will make some hard stuff easy. Run the following command on your terminal to install neu CLI globally.  npm install -g @neutralinojs/neu   If you don't want a global installation, use neu CLI with npx.  npx @neutralinojs/neu &lt;command&gt;   ","version":"Next","tagName":"h2"},{"title":"Step 1: Creating a new app​","type":1,"pageTitle":"Your First Neutralinojs App","url":"/docs/getting-started/your-first-neutralinojs-app#step-1-creating-a-new-app","content":" Enter the following command to scaffold a new app.  neu create myapp   info You might encounter the following error while running CLI commands on PowerShell: File C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\npm\\neu.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see.... This issue occurs due to PowerShell's script execution policy. To resolve it, open PowerShell as an administrator and run: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned   The above command will create a new app inside myapp directory. To make sure whether everything is fine, run your application.  cd myapp neu run   info If you are on Windows, you might get a blank white screen. The reason for this is, accessing localhost from a UWP context is disabled by default. Run the following command with administrative privileges on the command prompt to fix this. CheckNetIsolation.exe LoopbackExempt -a -n=&quot;Microsoft.Win32WebViewHost_cw5n1h2txyewy&quot; You may include this in your Windows setup files (with the user's consent) because users also may get an empty white screen on Windows. For better developer experience, we recommend you to install the WebView2 runtime on Windows.  ","version":"Next","tagName":"h2"},{"title":"Step 2: Writing JavaScript, HTML, and CSS​","type":1,"pageTitle":"Your First Neutralinojs App","url":"/docs/getting-started/your-first-neutralinojs-app#step-2-writing-javascript-html-and-css","content":" Insert the following content into your application resource files.  index.htmlstyles.cssmain.js &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;NeutralinoJs&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;neutralinoapp&quot;&gt; &lt;h1 id=&quot;name&quot;&gt;&lt;/h1&gt; &lt;/div&gt; &lt;script src=&quot;js/neutralino.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;   Neutralinojs prevents arbitary native API function execution unlike Node.js environments. Here we used the os.getEnv native function, so check whether your application configuration allows the application frontend to execute it. The default configuration already allows the entire os namespace with the following nativeAllowList permission setup:  &quot;nativeAllowList&quot;: [ &quot;app.*&quot;, &quot;os.*&quot;, &quot;debug.log&quot; ],   We don't need to update anything in the permission setup since it already allows os.getEnv native function calls.  ","version":"Next","tagName":"h2"},{"title":"Step 3: Running your application​","type":1,"pageTitle":"Your First Neutralinojs App","url":"/docs/getting-started/your-first-neutralinojs-app#step-3-running-your-application","content":" As mentioned above, you can use the run command to start your application.  neu run   Congrats! Your application works.    info The neu run command will reload your application when there is a change in application resources. Try to change your index.html while the application is running.  ","version":"Next","tagName":"h2"},{"title":"Step 4: Building your application ​","type":1,"pageTitle":"Your First Neutralinojs App","url":"/docs/getting-started/your-first-neutralinojs-app#step-4-building-your-application","content":" To make portable binaries for your application, we can use the build command. Enter the following command on your terminal to make final binaries for all supported platforms.   neu build --release   The above command will produce binaries for all platforms into the dist directory and the --release flag will also package your binaries into a .zip file. This command will do the work blazing fast because there is no compilation process behind.  ","version":"Next","tagName":"h2"},{"title":"What's next?​","type":1,"pageTitle":"Your First Neutralinojs App","url":"/docs/getting-started/your-first-neutralinojs-app#whats-next","content":" Now you know how to create Neutralinojs applications. We will suggest you to look into the following topics next.  neutralino.config.jsonProject structureneu CLIGlobal variablesApplication modesNative API overview  We've built the above example application with vanilla JavaScript. However, you can use your favorite frontend framework to build Neutralinojs apps.  Check more details about frontend framework support here. ","version":"Next","tagName":"h2"},{"title":"Auto Updater","type":0,"sectionRef":"#","url":"/docs/how-to/auto-updater","content":"","keywords":"","version":"Next"},{"title":"Creating the update manifest​","type":1,"pageTitle":"Auto Updater","url":"/docs/how-to/auto-updater#creating-the-update-manifest","content":" When you ask Neutralinojs to check for updates, it will check the update manifest via the network. Update manifest refers to a JSON document which has the following format.  { &quot;applicationId&quot;: &quot;js.neutralino.sample&quot;, &quot;version&quot;: &quot;0.0.2&quot;, &quot;resourcesURL&quot;: &quot;http://example.com/updater_test/update_res.neu&quot;, &quot;data&quot;: { } }   applicationId String: Application identifier. You need to use the same name you used in neutralinojs.config.json. Otherwise, the update check operation will not proceed.version String: Application version.resourcesURL String: A link to download resources.neu. You can use any file name as you wish, but make sure to serve data with the Content-Type: application/octet-stream header.data Object (optional): Additional data about the update. Accepts any JSON value.  ","version":"Next","tagName":"h2"},{"title":"Hosting the update manifest and resources​","type":1,"pageTitle":"Auto Updater","url":"/docs/how-to/auto-updater#hosting-the-update-manifest-and-resources","content":" Host the application manifest and resources file on the internet or a private network according to your access requirements. You can test auto updater locally by setting up a static server or placing update manifest and the resource file into your application's resources directory.  Also, you can setup a DevOps pipeline to automate your application updates if you need. If you release a new application version by upgrading Neutralinojs server, users have to download/install the app again since the auto updater only update application resources (including Neutralinojs client).  ","version":"Next","tagName":"h2"},{"title":"Writing code to update your app​","type":1,"pageTitle":"Auto Updater","url":"/docs/how-to/auto-updater#writing-code-to-update-your-app","content":" Call the following function whenever you need to check for updates.   try { let url = &quot;http://example.com/updater_test/update_manifest.json&quot;; let manifest = await Neutralino.updater.checkForUpdates(url); } catch(err) { // Handle errors }   Next, you can use the manifest object to compare versions.   try { let url = &quot;http://example.com/updater_test/update_manifest.json&quot;; let manifest = await Neutralino.updater.checkForUpdates(url); if(manifest.version != NL_APPVERSION) { await Neutralino.updater.install(); await Neutralino.app.restartProcess(); } } catch(err) { // Handle errors }   As shown in the above code snippet, you can call Neutralino.updater.install to perform the update based on the downloaded manifest. Later, restart the application with the app.restartProcess function. ","version":"Next","tagName":"h2"},{"title":"Extensions Overview","type":0,"sectionRef":"#","url":"/docs/how-to/extensions-overview","content":"","keywords":"","version":"Next"},{"title":"Defining the extensions​","type":1,"pageTitle":"Extensions Overview","url":"/docs/how-to/extensions-overview#defining-the-extensions","content":" First, you need to define extensions you use in neutralinojs.config.json with the following structure.  &quot;extensions&quot;: [ { &quot;id&quot;: &quot;js.neutralino.sampleextension&quot;, &quot;commandLinux&quot;: &quot;${NL_PATH}/extensions/binary/linux/ext_bin&quot;, &quot;commandDarwin&quot;: &quot;${NL_PATH}/extensions/binary/mac/ext_bin&quot;, &quot;commandWindows&quot;: &quot;${NL_PATH}/extensions/binary/win/ext_bin.exe&quot; }, { &quot;id&quot;: &quot;js.neutralino.binaryextension&quot;, &quot;command&quot;: &quot;node ${NL_PATH}/extensions/binary/main.js&quot;, } ]   id String: A unique key to identify each extension. This id cannot contain any characters except for letters, numbers, and periods.command String (optional): A cross-platform command to start the extension. Eg: node ${NL_PATH}/extensions/binary/main.jswill work on every platform.commandLinux String (optional): Extension startup command for Linux.commandDarwin String (optional): Extension startup command for macOS.commandWindows String (optional): Extension startup command for Windows.  ","version":"Next","tagName":"h2"},{"title":"Enable the extensions feature​","type":1,"pageTitle":"Extensions Overview","url":"/docs/how-to/extensions-overview#enable-the-extensions-feature","content":" The extensions API is disabled by default. Enable extensions by adding the following setting to your app config.  &quot;enableExtensions&quot;: true   ","version":"Next","tagName":"h2"},{"title":"Connecting an extension with Neutralinojs​","type":1,"pageTitle":"Extensions Overview","url":"/docs/how-to/extensions-overview#connecting-an-extension-with-neutralinojs","content":" As you already noticed, an extension is just a separate process. Neutralinojs starts spawning extension instances during the framework bootstrap process and initiates each extension process by sending the following JSON object via standard input streams:  { &quot;nlPort&quot;: &quot;&quot;, &quot;nlToken&quot;: &quot;&quot;, &quot;nlConnectToken&quot;: &quot;&quot;, &quot;nlExtensionId&quot;: &quot;&quot; }   The above JSON properties contains connectivity information as follows:  nlPort: port of the Neutralinojs server.nlToken: Access token to use the native API.nlConnectToken: A token that extension should send during WebSocket connection initialization.nlExtensionId: Extension identifier.  Now, you can connect with the Neutralinojs server with the above details. Use the following WebSocket URL to initiate a new WebSocket connection.  ws://localhost:{port}?extensionId={extensionId}&amp;connectToken={connectToken}   ","version":"Next","tagName":"h2"},{"title":"Sending a message from app to an extension​","type":1,"pageTitle":"Extensions Overview","url":"/docs/how-to/extensions-overview#sending-a-message-from-app-to-an-extension","content":" The extensions API uses an event-based messaging protocol. Every message uses the following JSON structure.  { &quot;event&quot;: &quot;&lt;event_name&gt;&quot;, &quot;data&quot;: {} }   Use the built-in extensions API to send a message to any extension, as shown below.  let extension = 'js.neutralino.sampleextension'; let event = 'helloExtension'; let data = { testValue: 10, }; await Neutralino.extensions.dispatch(extension, event, data);   The above code snippet sends a message to the js.neutralino.sampleextension extension instance. You can send messages to extensions with the dispatch function anytime. If you send a message before the extension connects with the main process, the Neutralinojs client library queues and sends it when the target extension's connection is established. In other words, you don't need to worry about extensions' status when you send messages to extensions.  ","version":"Next","tagName":"h2"},{"title":"Sending a message from the extension to app​","type":1,"pageTitle":"Extensions Overview","url":"/docs/how-to/extensions-overview#sending-a-message-from-the-extension-to-app","content":" When you connect your extensions with the Neutralinojs main process, you can call the native API by sending WebSocket messages to the Neutralinojs process directly. Neutralinojs server processes messages based on the following format.  { &quot;id&quot;: &quot;&lt;id&gt;&quot;, &quot;method&quot;: &quot;&lt;method&gt;&quot;, &quot;accessToken&quot;: &quot;&lt;token&gt;&quot;, &quot;data&quot;: {} }   id String: A UUID v4 string.method String: Native method name. Eg: window.setTitle.accessToken String: Access token generated by the Neutralinojs server.data Object (optional): Parameters for the native method.  You can invoke the app.broadcast native method to send messages to all app instances. Register a callback with the events.on in the application code to receive the message send by the extension process.  ","version":"Next","tagName":"h2"},{"title":"Terminating an extension instance​","type":1,"pageTitle":"Extensions Overview","url":"/docs/how-to/extensions-overview#terminating-an-extension-instance","content":" When Neutralino exits, it does not send kill signals to all extension instances. Therefore, it is necessary to stop the extension process when the WebSocket-based IPC (Inter-Process Communication) closes. The following Node.js extension code shows how to do this:  const fs = require('fs'); const process = require('process'); const WS = require('websocket').w3cwebsocket; const { v4: uuidv4 } = require('uuid'); const chalk = require('chalk'); // Obtain required params to start a WS connection from stdIn. const processInput = JSON.parse(fs.readFileSync(process.stdin.fd, 'utf-8')); const NL_PORT = processInput.nlPort; const NL_TOKEN = processInput.nlToken; const NL_CTOKEN = processInput.nlConnectToken; const NL_EXTID = processInput.nlExtensionId; const client = new WS( `ws://localhost:${NL_PORT}?extensionId=${NL_EXTID}&amp;connectToken=${NL_CTOKEN}` ); client.onerror = () =&gt; log(&quot;Connection error!&quot;, &quot;ERROR&quot;); client.onopen = () =&gt; log(&quot;Connected&quot;); client.onclose = () =&gt; process.exit(); client.onmessage = (e) =&gt; { const { event, data } = JSON.parse(e.data); if (event === &quot;eventToExtension&quot;) { log(data); client.send( JSON.stringify({ id: uuidv4(), method: &quot;app.broadcast&quot;, accessToken: NL_TOKEN, data: { event: &quot;eventFromExtension&quot;, data: &quot;Hello app!&quot; }, }) ); } }; function log(message, type = &quot;INFO&quot;) { const logLine = `[${NL_EXTID}]: ${chalk[ type === &quot;INFO&quot; ? &quot;green&quot; : &quot;red&quot; ](type)} ${message}`; console[type === &quot;INFO&quot; ? &quot;log&quot; : &quot;error&quot;](logLine); }   This code implements a simple Node.js extension for Neutralinojs, which establishes a WebSocket connection to the Neutralinojs server and handles incoming messages from the server. It also sends a message to the server using the client.send method when it receives a specific event from the server.  For more information on how to terminate an extension instance, you can refer to the sample extension source.https://github.com/neutralinojs/neutralinojs/tree/main/bin/extensions/sampleextension  ","version":"Next","tagName":"h2"},{"title":"Using Neutralinojs from your source files​","type":1,"pageTitle":"Extensions Overview","url":"/docs/how-to/extensions-overview#using-neutralinojs-from-your-source-files","content":" The above approach helps you to extend Neutralinojs API with a custom backend code. Neutralinojs process can spawn multiple extensions as child processes and communicate with the internal messaging protocol. On the other hand, you can spawn Neutralinojs processes from your own processes and communicate with the same messaging protocol. Using this approach, it's possible to write Neutralinojs apps with any backend language.  You can obtain authentication details for the Neutralinojs process by setting your config as below.  &quot;exportAuthInfo&quot;: true   The above setting exports authentication details to ${NL_PATH}/.tmp/auth_info.json with the following format.  { &quot;nlPort&quot;: &quot;&lt;port&gt;&quot;, &quot;nlToken&quot;: &quot;&lt;token&gt;&quot;, &quot;nlConnectToken&quot;: &quot;&lt;connect_token&gt;&quot; }   Connect with the Neutralinojs process by using the extension API as usual with the extension identifier you used in the application configuration file. ","version":"Next","tagName":"h2"},{"title":"CLI","type":0,"sectionRef":"#","url":"/docs/release-notes/cli","content":"","keywords":"","version":"Next"},{"title":"Unreleased​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#unreleased","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Creator​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-creator","content":" Support using a specific directory with the neu create command, e.g., neu create ., neu create myapps/myapp, neu create ../myapp, etc.  ","version":"Next","tagName":"h3"},{"title":"v11.4.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1140","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Bundler​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-bundler","content":" Let developers copy additional non-resource files like configuration files to the final app bundle using cli.copyItems array.Add the --macos-bundle flag to the build command to rename MacOS binary to a *.app file.Add the --config-file &lt;path&gt; to use a custom Neutralinojs config file for creating the bundle. i.e., neu build --config-file prod.config.json  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements","content":" Support spaces in internal CLI arguments, i.e., neu run -- --window-title=&quot;Window title&quot;  ","version":"Next","tagName":"h3"},{"title":"Dependencies​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#dependencies","content":" Update several dependency packages  ","version":"Next","tagName":"h3"},{"title":"v11.3.1​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1131","content":" ","version":"Next","tagName":"h2"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-1","content":" Add execution permissions for binaries after downloading them in Unix-based and Unix-like platforms.  ","version":"Next","tagName":"h3"},{"title":"v11.3.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1130","content":" ","version":"Next","tagName":"h2"},{"title":"Host projects support​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#host-projects-support","content":" Developers can launch Neutralinojs from any programming language using child process APIs (i.e., subprocess in Python) and communicate with the framework process using the extension API. The new hostProject configuration object extends the official CLI to help developers easily create, run, and build these host projects. For example, the following host project configuration instructs the CLI to run a Node.js host project:  &quot;hostProject&quot;: { &quot;projectPath&quot;: &quot;/node-src&quot;, &quot;buildPath&quot;: &quot;/node-src/dist/&quot;, &quot;initCommand&quot;: &quot;npm install&quot;, &quot;devCommand&quot;: &quot;npm start&quot;, &quot;buildCommand&quot;: &quot;npm run build&quot; }   Community projects implement bindings and templates to create host projects using Node.js, Python, Go, etc. For example, the node-neutralino NPM package lets you launch Neutralinojs via Node.js environments and execute native APIs via the NeutralinoApp class:  import NeutralinoApp from 'node-neutralino'; const app = new NeutralinoApp({ url: '/', windowOptions: { enableInspector: false, } }); app.init(); app.window.setTitle('Node.js');   ","version":"Next","tagName":"h3"},{"title":"Executable icon and metadata on Windows​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#executable-icon-and-metadata-on-windows","content":" Now, the neu build command automatically updates the executable file icon and metadata based on the following configuration options:  author: gets written into executable's metadata.description: gets written into executable's metadata.copyright: gets written into executable's metadata. Defaults to current date + generic &quot;all rights reserved&quot;.applicationName: gets written into executable's metadata. Defaults to cli.binaryName.applicationIcon: a relative path to an icon in .png format. Defaults to modes.window.icon. If it is not set, uses Neutralinojs logo.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-2","content":" Use the zip-lib package to handle ZIP files for better performance and simplicity in the source code.  ","version":"Next","tagName":"h3"},{"title":"v11.2.2​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1122","content":" ","version":"Next","tagName":"h2"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-3","content":" Fix initial loading issues with frontend library development file patching.  ","version":"Next","tagName":"h3"},{"title":"v11.2.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1120","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Bundler​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-bundler-1","content":" Introduce the --clean flag to the neu build command to clean previous build files.Add file excluding feature for the app bundle and extensions directory via cli.resourcesExclude and cli.extensionsExclude configuration properties. For example, now developers can use the &quot;resourcesExclude&quot;: &quot;.*\\\\.scss$|.*\\\\.d.ts$&quot; configuration to exclude *.scss and *.d.ts files from the final app bundle.Let app developers customize the frontend library development server wait time using the cli.frontendLibrary.waitTimeout configuration property.  ","version":"Next","tagName":"h2"},{"title":"Core: Version​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-version","content":" The neu version command now compares the installed CLI version and the framework version with the latest released versions and displays a warning messages if the users use an older versions.The neu version command now displays the (latest) tag with CLI, binary, client library version details.  ","version":"Next","tagName":"h2"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-4","content":" Check and validate neutralino.config.json file before executing app-specific commands.Check app template validity before downloading content from a specific GitHub repository using the official GitHub API.Add the app icon to the final app bundle only the specific project uses an app icon.Fix the port waiting timeout issue with frontend library-based development workflow.  ","version":"Next","tagName":"h3"},{"title":"v11.1.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1110","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Bundler​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-bundler-2","content":" Add cli.distributionPath into the neutralino.config.json file to customize the default dist distribution directory.  ","version":"Next","tagName":"h3"},{"title":"v11.0.1​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1101","content":" ","version":"Next","tagName":"h2"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-5","content":" Clean existing app build files before creating another build using the neu build command.Support older Node versions by removing the optional chaining feature usage.Fix the endless port waiting issue with the --frontend-lib-dev option.  ","version":"Next","tagName":"h3"},{"title":"v11.0.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1100","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Runner​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-runner","content":" Change the WebSocket connection based on the v5 framework APIs.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-6","content":" Fixed issues with the frontend library command execution.  ","version":"Next","tagName":"h3"},{"title":"v10.1.1​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1011","content":" ","version":"Next","tagName":"h2"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-7","content":" Fixed app development issues with the Vite server.  ","version":"Next","tagName":"h3"},{"title":"v10.1.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1010","content":" ","version":"Next","tagName":"h2"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-8","content":" Fixed several issues in the frontend-library-based development flow (i.e., removed the hardcoded port number, fixed double devCommand execution, etc.,).  ","version":"Next","tagName":"h3"},{"title":"v10.0.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v1000","content":" ","version":"Next","tagName":"h2"},{"title":"Core: frontend-library-based development​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-frontend-library-based-development","content":" Added new configuration options to the cli.frontendLibrary key of the neutralino.config.json:  projectPath: Sets the project path of the frontend-library project. This path will be used as the current directory while executing the frontend-app-related commands.initCommand: A command that gets executed after downloading an app template with the neu create command.devCommand: This command will run with the neu run command to start the frontend development server. The CLI doesn't wait for devCommand completion, instead, it will wait for the frontend development server via the tcp-port-used package.buildCommand: The neu build command will execute this command before generating the app bundle, so you can generate static resources of your frontend app using this command.  ","version":"Next","tagName":"h3"},{"title":"v9.8.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v980","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Downloader​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-downloader","content":" Download the latest Neutralinojs framework resources with the --latest option in the neu update command.If framework versions are not present in the app/template configuration, download the latest framework resources automatically. The CLI will download nightly releases if it can't fetch the latest release tag because of an GitHub API-related issue (i.e., Exceeded rate limits).  ","version":"Next","tagName":"h3"},{"title":"v9.7.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v970","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Downloader/bundler​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-downloaderbundler","content":" Download the TypeScript definition file for standalone client library mode. This won't include the TypeScript definition file to the final application bundle.  ","version":"Next","tagName":"h3"},{"title":"v9.6.1​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v961","content":" ","version":"Next","tagName":"h2"},{"title":"Bugfixes/Improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-9","content":" Fix the hot-reloading issue that occurs with newer Node runtime versions.  ","version":"Next","tagName":"h3"},{"title":"v9.6.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v960","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Bundler​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-bundler-3","content":" Avoid copying the WebView2Loader.dll file to the final app package since it was removed from the Neutralinojs framework.  ","version":"Next","tagName":"h3"},{"title":"v9.5.1​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v951","content":" ","version":"Next","tagName":"h2"},{"title":"Bugfixes/Improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-10","content":" Use the decompress library instead of unzipper to fix issues with latest Node.js runtime versions.Generate the Mac universal binary with the neu build command.  ","version":"Next","tagName":"h3"},{"title":"v9.5.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v950","content":" ","version":"Next","tagName":"h2"},{"title":"DevOps​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#devops","content":" Implement a way to test plugins locally.  ","version":"Next","tagName":"h3"},{"title":"v9.4.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v940","content":" ","version":"Next","tagName":"h2"},{"title":"DevOps: new test suite​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#devops-new-test-suite","content":" Initiate a new Node.js-based test suite.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/Improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-11","content":" Clean project files if the neu create command wan't successful.Display an error message if the neu build --copy-storage fails due to missing .storage directory.Support Darwin arm64 binaries natively without binary translation (x64 -&gt; arm64).Make the client library downloading process optional and support importing the client library via @neutralinojs/lib.Download the module version of the client library based on the app configuration.  ","version":"Next","tagName":"h3"},{"title":"v9.3.1​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v931","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Plugins​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-plugins","content":" Automatically re-install plugins when the neu CLI version is upgraded/downgraded via package managers.  ","version":"Next","tagName":"h3"},{"title":"Core: downloader/builder​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-downloaderbuilder","content":" Support ARM (armhf/arm64) binaries.  ","version":"Next","tagName":"h3"},{"title":"v9.3.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v930","content":" ","version":"Next","tagName":"h2"},{"title":"General​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#general","content":" Add short descriptions for each command.Support to download nightly build versions.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixesimprovements-12","content":" Fix plugin listing issue.  ","version":"Next","tagName":"h3"},{"title":"DevOps​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#devops-1","content":" Add a simple test-suite for testing CLI commands with a Bash script.  ","version":"Next","tagName":"h3"},{"title":"v9.2.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v920","content":" ","version":"Next","tagName":"h2"},{"title":"General​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#general-1","content":" Improve log messages and styles  ","version":"Next","tagName":"h3"},{"title":"Core: Runner​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-runner-1","content":" Display Neutralinojs process's STDIN and STDERR streams directly on the console.Remove --verbose option from the run command.  ","version":"Next","tagName":"h3"},{"title":"v9.1.2​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v912","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Runner​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-runner-2","content":" Fix client library path issue with hot-reload workaround on Windows.  ","version":"Next","tagName":"h3"},{"title":"v9.1.1​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v911","content":" ","version":"Next","tagName":"h2"},{"title":"Bugfixes​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixes","content":" Fix browser mode exit issue with neu run.  ","version":"Next","tagName":"h3"},{"title":"v9.1.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v910","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Runner​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-runner-3","content":" Add a workaround to use hot module reloading from the app developer's existing frontend library/framework.  ","version":"Next","tagName":"h3"},{"title":"v9.0.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v900","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Creator​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-creator-1","content":" Allow downloading any community template via neu create myapp --template &lt;template&gt;. &lt;template&gt; accepts valid GitHub repo identifiers. The default value is neutralinojs/neutralinojs-minimal.  ","version":"Next","tagName":"h3"},{"title":"Core: Runner​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-runner-4","content":" Add --verbose option to identify framework initialization crashes. It will show STDERR and STDOUT of the framework once the process was terminated.Support sending any internal CLI argument to the Neutralinojs process via neu run -- &lt;additional_args&gt;.Remove --mode=&lt;mode&gt; option from run since the same work can be done with neu run -- --mode=&lt;mode&gt;.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes and improvements​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixes-and-improvements","content":" Fix the infinite retry issue with the neu run command.Show an error message for download failures.  ","version":"Next","tagName":"h3"},{"title":"v8.1.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v810","content":" ","version":"Next","tagName":"h2"},{"title":"Core: File watcher​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-file-watcher","content":" Exclude auto-reload files via cli.autoReloadExclude.Watch only the cli.resourcesDir to avoid many unwanted reloads.  ","version":"Next","tagName":"h3"},{"title":"Core: Bundler​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-bundler-4","content":" Add new --copy-storage flag to automatically copy storage data to the app bundle.  ","version":"Next","tagName":"h3"},{"title":"v8.0.1​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v801","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Bundler​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-bundler-5","content":" Make cli.extensionsDir optional for bundling process.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#bugfixes-1","content":" Fix an issue in websocket error log.  ","version":"Next","tagName":"h3"},{"title":"v8.0.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v800","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Bundler​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-bundler-6","content":" Copy extensions to the app bundle.Rename res.neu to resources.neu.  ","version":"Next","tagName":"h3"},{"title":"Core: Runner​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-runner-5","content":" Use websocket connection to auto reload app.  ","version":"Next","tagName":"h3"},{"title":"v7.1.0​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#v710","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Downloader​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#core-downloader-1","content":" Use server/client versions from config  ","version":"Next","tagName":"h3"},{"title":"neu version​","type":1,"pageTitle":"CLI","url":"/docs/release-notes/cli#neu-version","content":" Removed global Neutralino version details ","version":"Next","tagName":"h3"},{"title":"Client Library","type":0,"sectionRef":"#","url":"/docs/release-notes/client-library","content":"","keywords":"","version":"Next"},{"title":"Unreleased​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#unreleased","content":" ","version":"Next","tagName":"h2"},{"title":"v6.1.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v610","content":" ","version":"Next","tagName":"h2"},{"title":"API: window​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-window","content":" Export the window.setMainMenu function.  ","version":"Next","tagName":"h3"},{"title":"v6.0.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v600","content":" ","version":"Next","tagName":"h2"},{"title":"API: filesystem​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-filesystem","content":" Export filesystem.getPermissions(path) and filesystem.setPermissions(path, permissions, mode) functions.  ","version":"Next","tagName":"h3"},{"title":"API: os​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-os","content":" Support sending environment variables via os.execCommand() and os.spawnProcess() functions.  ","version":"Next","tagName":"h3"},{"title":"API: clipboard​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-clipboard","content":" Export clipboard.readHTML() and clipboard.writeHTML(html) functions.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#bugfixesimprovements","content":" Fixing a circular dependency issue in the codebase.Several TypeScript-related development fixes.  ","version":"Next","tagName":"h3"},{"title":"v5.6.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v560","content":" ","version":"Next","tagName":"h2"},{"title":"API: server​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-server","content":" Export server.mount(), server.unmount(), and server.getMounts() functions.  ","version":"Next","tagName":"h3"},{"title":"API: resources​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-resources","content":" Export resources.getStats() and resources.extractDirectory() functions.  ","version":"Next","tagName":"h3"},{"title":"API: window​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-window-1","content":" Export window.snapshot() function.  ","version":"Next","tagName":"h3"},{"title":"API: clipboard​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-clipboard-1","content":" Add the format parameter to the clipboard.readImage() function format pixel data. Accepted formats: rgb, rgba, argb, and bgra.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#bugfixesimprovements-1","content":" Fix the slow loading issue on Windows by using 127.0.0.1 instead of localhost.  ","version":"Next","tagName":"h3"},{"title":"v5.5.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v550","content":" ","version":"Next","tagName":"h2"},{"title":"Core: initialization​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#core-initialization","content":" Support client library source injection  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#typescript","content":" Fix some missing type details.  ","version":"Next","tagName":"h3"},{"title":"v5.4.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v540","content":" ","version":"Next","tagName":"h2"},{"title":"API: resources​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-resources-1","content":" Export getFiles(), extractFile(path, dest), readFile(path), and readBinaryFile(path) functions.  ","version":"Next","tagName":"h3"},{"title":"API: window​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-window-2","content":" Export minimize(), unminimize(), and isMinimized() functions.Add alwaysCapture and dragMinDistance options to the window.setDraggableRegion() function and improve the performance of the overall draggable window implementation.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#bugfixesimprovements-2","content":" Fix several issues with TypeScript exports and definitions.  ","version":"Next","tagName":"h3"},{"title":"v5.3.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v530","content":" ","version":"Next","tagName":"h2"},{"title":"API: filesystem​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-filesystem-1","content":" Expose filesystem.getAbsolutePath(path), filesystem.getRelativePath(path, ?base), and filesystem.getPathParts(path) functions.  ","version":"Next","tagName":"h3"},{"title":"v5.2.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v520","content":" ","version":"Next","tagName":"h2"},{"title":"API: filesystem​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-filesystem-2","content":" Accept overwrite, skip, and recursive options for the filesystem.copy() function.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#bugfixesimprovements-3","content":" Improve the window.create() function's option-to-CLI argument mapping logic.  ","version":"Next","tagName":"h3"},{"title":"v5.1.1​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v511","content":" ","version":"Next","tagName":"h2"},{"title":"NPM​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#npm","content":" Fix the NPM package import issue.  ","version":"Next","tagName":"h3"},{"title":"v5.1.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v510","content":" ","version":"Next","tagName":"h2"},{"title":"API: clipboard​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-clipboard-2","content":" Export new framework functions: clipboard.getFormat(), clipboard.readImage(), and clipboard.writeImage(image).  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#typescript-1","content":" Separate type definitions into a new directory to improve project structure.Add missing type definitions.  ","version":"Next","tagName":"h3"},{"title":"v5.0.1​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v501","content":" ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#typescript-2","content":" Fix type declaration issues with the window global object. Now, window.NL_VERSION, etc. won't display errors on code editors or with the TypeScript compiler.  ","version":"Next","tagName":"h3"},{"title":"v5.0.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v500","content":" ","version":"Next","tagName":"h2"},{"title":"API: app​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-app","content":" Expose app.readProcessInput(readAll=false), app.writeProcessOutput(), and app.writeProcessError() functions.  ","version":"Next","tagName":"h3"},{"title":"API: filesystem​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-filesystem-3","content":" Export/deprecate functions based on framework's v5 release. See framework changelog for more details.  ","version":"Next","tagName":"h3"},{"title":"v3.13.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v3130","content":" ","version":"Next","tagName":"h2"},{"title":"API: window​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-window-3","content":" Add extendUserAgentWith and exitProcessOnClose options to window.create TypeScript definition.  ","version":"Next","tagName":"h3"},{"title":"v3.12.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v3120","content":" ","version":"Next","tagName":"h2"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#improvementsbugfixes","content":" Improved the performance of the draggable regions API by throttling Neutralino framework function calls.Fix the restarting issue that happens when the app path contains spaces.  ","version":"Next","tagName":"h3"},{"title":"v3.11.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v3110","content":" ","version":"Next","tagName":"h2"},{"title":"API: window​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-window-4","content":" Avoid saving the window state for child windows in the window.create function by using the --window-use-saved-state=false internal CLI argument.  ","version":"Next","tagName":"h3"},{"title":"v3.10.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v3100","content":" ","version":"Next","tagName":"h2"},{"title":"API: window​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-window-5","content":" Export the window.center function.  ","version":"Next","tagName":"h3"},{"title":"v3.9.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v390","content":" ","version":"Next","tagName":"h2"},{"title":"API: file watchers​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-file-watchers","content":" Export filesystem.createWatcher and filesystem.removeWatcher functions.  ","version":"Next","tagName":"h3"},{"title":"DevOps​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#devops","content":" Publish to NPM only if there are unreleased changes in changelog.  ","version":"Next","tagName":"h3"},{"title":"v3.8.2​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v382","content":" ","version":"Next","tagName":"h2"},{"title":"NPM/ESM support​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#npmesm-support","content":" Add ESM support for the client library via neutralino.mjs.Publish (and automate) the client library as an NPM package,@neutralinojs/lib.  ","version":"Next","tagName":"h3"},{"title":"v3.8.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v380","content":" ","version":"Next","tagName":"h2"},{"title":"API: custom methods and file streams​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-custom-methods-and-file-streams","content":" Expose functions in framework's custom methods and file streams implementations.  ","version":"Next","tagName":"h3"},{"title":"v3.7.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v370","content":" ","version":"Next","tagName":"h2"},{"title":"API: os, filesystem, storage, and computer​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-os-filesystem-storage-and-computer","content":" Expose new framework functions: os.getEnvs, storage.getKeys, and computer.getMousePosition.Add size and pos options to filesystem.readFile and filesystem.readBinaryFile functions.  ","version":"Next","tagName":"h3"},{"title":"v3.6.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v360","content":" ","version":"Next","tagName":"h2"},{"title":"API: System information API​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-system-information-api","content":" Expose the new system information API functions: computer.getArch, computer.getKernelInfo, computer.getOSInfo, computer.getCPUInfo, and computer.getDisplays.  ","version":"Next","tagName":"h3"},{"title":"API: os​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-os-1","content":" Add the defaultPath option to set the default file path for all file dialogs.  ","version":"Next","tagName":"h3"},{"title":"v3.5.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v350","content":" ","version":"Next","tagName":"h2"},{"title":"API: filesystem​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-filesystem-4","content":" Expose createdAt and modifiedAt JavaScript timestamps with the filesystem.getStats function.  ","version":"Next","tagName":"h3"},{"title":"API: os​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-os-2","content":" Add new functions for spawning processes. spawnProcess, getSpawnedProcesses, and updateSpawnedProcess.  ","version":"Next","tagName":"h3"},{"title":"v3.4.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v340","content":" ","version":"Next","tagName":"h2"},{"title":"DevOps​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#devops-1","content":" Add nightly builds support. Developers can download the nightly builds by setting cli.clientVersion to nightly.  ","version":"Next","tagName":"h3"},{"title":"Core: global variables​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#core-global-variables","content":" Add NL_CCOMMIT to hold the release commit of the client library.  ","version":"Next","tagName":"h3"},{"title":"v3.3.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v330","content":" ","version":"Next","tagName":"h2"},{"title":"API: window​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-window-6","content":" Add window.getPosition to get the current window coordinates.  ","version":"Next","tagName":"h3"},{"title":"API: filesystem​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-filesystem-5","content":" Add filesystem.appendFile to append text content to a file. Thrown errors are similar to the filesystem.writeFile function.Add filesystem.appendBinaryFile to append binary content to a file. Thrown errors are similar to the filesystem.writeBinaryFile function.  ","version":"Next","tagName":"h3"},{"title":"v3.2.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v320","content":" ","version":"Next","tagName":"h2"},{"title":"API: init​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-init","content":" Store NL_TOKEN in sessionStorage and handle native API calls after page reload.Show a message to the user via HTML if NL_TOKEN is not valid (Eg: when the user tries to open the app from another client with one-time token).  ","version":"Next","tagName":"h3"},{"title":"API: window​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-window-7","content":" Add window.setAlwaysOnTop(bool).Add window.getSize.  ","version":"Next","tagName":"h3"},{"title":"v3.1.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v310","content":" ","version":"Next","tagName":"h2"},{"title":"API: clipboard​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-clipboard-3","content":" clipboard.readText and clipboard.writeText functions added.  ","version":"Next","tagName":"h3"},{"title":"v3.0.0​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#v300","content":" ","version":"Next","tagName":"h2"},{"title":"Core: Extensions​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#core-extensions","content":" Extension API functions. Queue messages dispatched to extensions and send when the extension is ready.  ","version":"Next","tagName":"h3"},{"title":"Core: Init​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#core-init","content":" Reload app based on --neu-dev-auto-reload (--debug-mode removed) with the neuDev_reloadApp event.  ","version":"Next","tagName":"h3"},{"title":"API: window.create​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-windowcreate","content":" Return process information with the promise.  ","version":"Next","tagName":"h3"},{"title":"API: window.setDraggableRegion​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-windowsetdraggableregion","content":" Allow passing DOM element as the param.  ","version":"Next","tagName":"h3"},{"title":"API: window.unsetDraggableRegion​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-windowunsetdraggableregion","content":" Newly introduced method to remove draggable region handlers from an element.  ","version":"Next","tagName":"h3"},{"title":"API: Updater​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#api-updater","content":" Updater API functions.  ","version":"Next","tagName":"h3"},{"title":"Improvements​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#improvements","content":" Make return values of events namespace functions consistent.Rename res.neu to resources.neu.  ","version":"Next","tagName":"h3"},{"title":"Core: Ping on browsers​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#core-ping-on-browsers","content":" Polling action to the server was removed and replaced by the server process's internal idle check. app.keepAlive was removed.  ","version":"Next","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"Client Library","url":"/docs/release-notes/client-library#events","content":" Client-side implementaion of extensionReady.Allow developers to call native APIs without depending on the ready event (it's not removed becuase of the internal usage). ","version":"Next","tagName":"h3"},{"title":"Framework","type":0,"sectionRef":"#","url":"/docs/release-notes/framework","content":"","keywords":"","version":"Next"},{"title":"Unreleased​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#unreleased","content":" ","version":"Next","tagName":"h2"},{"title":"v6.1.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v610","content":" ","version":"Next","tagName":"h2"},{"title":"API: Native window main menu​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-native-window-main-menu","content":" The new window.setMainMenu(menu) function lets developers create a native window menu on GNU/Linux and Windows and an application menu on macOS. This function can be called multiple times with different menu objects to update menu items dynamically:  const menu = [ {id: 'file', text: 'File', menuItems: [ {id: 'open', text: 'Open'}, {text: '-'}, {id: 'quit', text: 'Quit'}, ]}, {id: 'edit', text: 'Edit', menuItems: [ {id: 'cut', text: 'Cut'}, {id: 'copy', text: 'Copy'}, {id: 'paste', text: 'Paste'}, ]} ]; await Neutralino.window.setMainMenu(menu);   The framework will trigger the mainMenuItemClicked event with menu item data when the user clicks on a specific menu item.  On macOS, app developers can register key accelerators and pre-defined actions as follows:  {id: 'edit', text: 'Edit', menuItems: [ {id: 'cut', text: 'Cut', action: 'cut:', shortcut: 'x'}, {id: 'copy', text: 'Copy', action: 'copy:', shortcut: 'c'}, {id: 'paste', text: 'Paste', action: 'paste:', shortcut: 'v'}, ]}   On GNU/Linux and Windows, the framework only displays the keyboard shortcut within the particular menu item and doesn't register a key accelerator yet:  {id: 'copy', text: 'Copy', shortcut: 'Ctrl + C'}   Note: We are planning to add key accelerator support for GNU/Linux and Windows native window menus with a global key accelerator feature in an upcoming framework version.  ","version":"Next","tagName":"h3"},{"title":"Core: global variables​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-global-variables","content":" Add NL_LOCALE to get the user locale name, e.g., en_US.UTF-8Add NL_COMPDATA to display custom data strings embedded in the binary via the BuildZri configuration. Developers can use this global variable to set the build number or other static data when they compile their own framework binary with the BuildZri script:  &quot;definitions&quot;: { &quot;*&quot;: [ &quot;NEU_COMPILATION_DATA=\\\\\\&quot;build_number=${BZ_BUILDNUMBER};compiler_name=${BZ_CONPILERNAME}\\\\\\&quot;&quot;,   ","version":"Next","tagName":"h3"},{"title":"v6.0.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v600","content":" ","version":"Next","tagName":"h2"},{"title":"API: clipboard​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-clipboard","content":" Implement clipboard.writeHTML(html) and clipboard.readHTML() functions to write/read HTML strings  ","version":"Next","tagName":"h3"},{"title":"API: os​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-os","content":" Adding envs key-value pair parameter to the options of the os.execCommand(command, options) function to set specific environment variables for the child process.Change the os.spawnProcess(command, cwd) to os.spawnProcess(command, options) to set environment variables and the current working directory via the options object for the spawned child process:  // e.g.: await Neutralino.os.spawnCommand('env', { cwd: NL_PATH, envs: { VAR1: 'var1', VAR2: 'var2' } });   ","version":"Next","tagName":"h3"},{"title":"API: filesystem​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-filesystem","content":" Add the timestamp (ISO 8601) property to the watchFile event's data payload to identify when a specific file watcher event occurred.Implement filesystem.setPermissions(path, permissions, mode) and filesystem.getPermissions(path) functions to set/get file permissions in a cross-platform way:  // e.g.: await Neutralino.filesystem.setPermissions(NL_PATH + '/my-directory-1', {ownerRead: true, groupRead: true}); await Neutralino.filesystem.setPermissions(NL_PATH + '/my-directory-2', {all: true}); await Neutralino.filesystem.setPermissions(NL_PATH + '/my-directory-3', {otherAll: true}, 'REMOVE'); const permissions = await Neutralino.filesystem.getPermissions(NL_PATH); // permissions -&gt; {all:.., ownerRead, ownerWrite...}   ","version":"Next","tagName":"h3"},{"title":"Core: extensions​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-extensions","content":" Extensions are now loaded internally using the os.spawnProcess() function without triggering process events. This modification displays extension logs within the Windows terminal and lets app developers control extensions using the existing spawn process API.  ","version":"Next","tagName":"h3"},{"title":"Security​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#security","content":" Improve the NL_TOKEN generation algorithm to strengthen security using the C++ std::mt19937 random number generator.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes","content":" Fix framework crashing when creating the .tmp directory under restricted file manipulation permissions.Fix several issues in the Windows-specific GUI notification implementation of the os.showNotification() function.Fix invalid utf8 character handling issues in several native APIs (i.e., os.spawnProcess('./bin') crashed if bin output &quot;ä\\xA9ü&quot;)  ","version":"Next","tagName":"h3"},{"title":"v5.6.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v560","content":" ","version":"Next","tagName":"h2"},{"title":"API: server​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-server","content":" Neutralinojs doesn't support the file:// protocol to load local resource files due to application security concerns. Because of this limitation, app developers had to read files using filesystem APIs. The new server namespace implements server.mount(path, target), server.unmount(path), and server.getMounts() functions to let developers load local files from the Neutralinojs static server by creating directory mappings as an alternative for the file:// protocol.  For example, the following function call configures the Neutralinojs static server to serve resources on the ${NL_PATH}/app-res directory:  await Neutralino.server.mount('/app-res', NL_PATH + '/app-res');   With the above server configuration, NL_PATH + '/app-res/stat.txt' can be loaded to the webview via the following URL:  http://127.0.0.1/app-res/stat.txt   This local directory mounting configuration can be deactivated as follows:  await Neutralino.server.unmount('/app-res');   ","version":"Next","tagName":"h3"},{"title":"API: resources​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-resources","content":" Fallback to native filesystem APIs when NL_RESMODE is directory.Implement resources.getStats(path) and resources.extractDirectory(path, destination) functions.  ","version":"Next","tagName":"h3"},{"title":"API: window​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-window","content":" Implement the window.snapshot(path) function to capture the window and save it as a PNG image file.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-1","content":" Fix the empty string returning issue with the window.getTitle() function on Windows.Create non-existent directories while extracting resource files using the resources.extractFile() function.Supports using large resources.neu files.  ","version":"Next","tagName":"h3"},{"title":"DevOps​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#devops","content":" Fix minor string formatting issues in the BuildZri automation script.Fix various test suite failure scenarios.  ","version":"Next","tagName":"h3"},{"title":"v5.5.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v550","content":" ","version":"Next","tagName":"h2"},{"title":"Client library and globals injection​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#client-library-and-globals-injection","content":" Neutralinojs apps usually load globals and the client library using HTTP requests via the static server. This mechanism implements a generic way to enable the native API on all supported Neutralinojs app modes. However, this strategy prevents enabling the Neutralinojs native API if the primary web app is loaded through another server (local or remote). Now, app developers can inject globals and the client library script into external web services using window.injectGlobals and window.injectClientLibrary configuration options on the window mode.  These options are available as CLI options as well (--window-inject-globals and --window-inject-client-library), so developers can use these options via the window.create(url, options) function. This code injection feature currently works with HTTP URLs only (can be used with local and remote HTTP web servers).  ","version":"Next","tagName":"h3"},{"title":"Preload script support​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#preload-script-support","content":" The framework already lets developers set pre-defined global variables for each web page by using custom globals from the app configuration and activating the window.injectGlobals option. However, custom globals are static values, so app developers can't define dynamic values or run a custom JavaScript source using globals and window.injectGlobals features. This framework version implements the window.injectScript configuration option to inject and run custom JavaScript source file before running the primary webapp's JavaScript sources.  For example, the following setup loads an initialization script from the preload.js file:  &quot;window&quot;: { &quot;injectScript&quot;: &quot;/resources/js/preload.js&quot; }   Developers can use native API calls within initialization scripts if window.injectClientLibrary is set to true. This option also can be set via --window-inject-script and window.create(url, options).  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#configuration","content":" Implement the dataLocation config option to let users set data directory for framework data storage purposes, such as saving window state, storing extracted resources, etc. If app (default) is used, the framework will store app data within the app directory and if system is used, the framework will use a platform-specific data directory path (i.e., /home/username/.local/share/&lt;appId&gt; on GNU/Linux systems) to store app data. App developers can obtain the current data directory string from the NL_DATAPATH global variable.Implement the storageLocation config option to let developers use system data directory for the Neutralinojs storage. If this option is 'app' (default), the framework store storage files within the app directory. If system is used, the framework will use the platform-specific standard data directory. In both app and system modes, the framework will use the .storage sub-directory for storage files.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-2","content":" Search and load WebKitGtk functions dynamically from the available webkit2gtk library: libwebkit2gtk-4.0-37 or libwebkit2gtk-4.1-0.Fix the auto-reload issue during app development.  ","version":"Next","tagName":"h3"},{"title":"v5.4.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v540","content":" ","version":"Next","tagName":"h2"},{"title":"API: resources​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-resources-1","content":" Implement getFiles(), extractFile(path, dest), readFile(path), and readBinaryFile(path) functions via the resources module for reading the files embedded in the resources.neu resources bundle. These functions works only if the framework loaded resources from the resource bundle -- they will throw NE_RS_APIRQRF if the framework loaded resources from the resources directory.  ","version":"Next","tagName":"h3"},{"title":"API: window​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-window-1","content":" Implement minimize(), unminimize(), and isMinimized() functions to minimize and restore the native app window.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-3","content":" Fix issues with the clipboard.writeImage() function on Windows.Fix the unwanted delay with the window.exitProcessOnClose configuration option on Windows.Fix a bug with the window.isFullScreen() function on GNU/Linux-based platforms.Fix duplicate virtual PID issues with the os.spawnProcess() function.  ","version":"Next","tagName":"h3"},{"title":"v5.3.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v530","content":" ","version":"Next","tagName":"h2"},{"title":"Configuration: window transparency on Windows​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#configuration-window-transparency-on-windows","content":" Window transparency support was added on the Windows version of the Neutralinojs framework. This can be activated with modes.window.transparent configuration property or --window-transparent command-line option. Unlike in other platforms, Windows native window becomes borderless (window controls will be hidden) with the activation of the transparent mode.  ","version":"Next","tagName":"h3"},{"title":"API: os​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-os-1","content":" Add the temp key for the supported directory list of the os.getPath(pathKey) function.  ","version":"Next","tagName":"h3"},{"title":"API: filesystem​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-filesystem-1","content":" Add the filesystem.getAbsolutePath(path) function to let developers get a full path string from a relative path string.Add the filesystem.getRelativePath(path, ?base) function to get a relative path from a path and a base path.Add the filesystem.getPathParts(path) to parse and get path segments like filename, extension, root path, etc.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-4","content":" Fix Unicode issues in the Windows version with filesystem, storage, and general modules.Fix standard output/error data display issues on Windows  ","version":"Next","tagName":"h3"},{"title":"v5.2.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v520","content":" ","version":"Next","tagName":"h2"},{"title":"Configuration: Configless framework initialization​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#configuration-configless-framework-initialization","content":" Now, developers can load the Neutralinojs framework without creating a neutralino.config.json file. Now, there is no mandatory configuration properties since Neutralinojs set reasonable defaults. Developers can launch the framework using the following methods without a configuration file:  # Loading a remote URL ./framework-bin --url=https://neutralino.js.org/docs # Launches a local static web app ./framework-bin --url=&quot;/resources/&quot; --window-title=&quot;My web app&quot; --enable-server   ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#configuration-1","content":" New internal CLI arguments added: --single-page-serve, --enable-native-api and --document-root=&lt;string&gt;  ","version":"Next","tagName":"h3"},{"title":"Core: Static server SPA (Single Page App) serving​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-static-server-spa-single-page-app-serving","content":" Earlier, Neutralinojs app developers had to use hash routing with their frontend-library-based apps since the internal static server didn't offer an inbuilt URL rewrite logic for SPAs (Single Page Apps). Now, they can use the singlePageServe: true option in the app configuration file to activate SPA routing. If this setting is on, the static server will serve the main index.html file when it receives directory requests that possibly send HTTP 404 status.  For example, the /invoices path serves the main index.html file if there is no directory named invoices which holds an index.html file.  ","version":"Next","tagName":"h3"},{"title":"API: window​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-window-2","content":" Improve the behaviour of the window.show() function on Windows. Now, this function flashes the window if it's already in foreground and activates the window properly if it's minimized.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-5","content":" Fix path issues with the defaultPath option in system file dialogs on Windows.  ","version":"Next","tagName":"h3"},{"title":"v5.1.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v510","content":" ","version":"Next","tagName":"h2"},{"title":"Configuration: window transparency​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#configuration-window-transparency","content":" Neutralinojs offers the inbuilt borderless mode and draggable region API to create custom window frames using HTML and CSS. Earlier, Neutralinojs used a default opaque color (usually white) for the window and webview layer, so app developers couldn't make custom CSS-styled window frames transparent or implement custom window frame shapes (i.e., rounded edges). Now, it offers the window.transparent boolean flag to activate window transparency.  If the transparency mode is on, the Neutralinojs window and webview use an alpha color layer and become transparent, so developers can use the rgba CSS color function on body background to handle the transparency level of the app.  The transparency mode can be activated using the --window-transparent=&lt;bool&gt; internal command-line option too.  Note: This feature is not implemented for the Windows operating system yet.  ","version":"Next","tagName":"h3"},{"title":"API: clipboard​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-clipboard-1","content":" Implement clipboard.readImage() and clipboard.writeImage(image) functions to work with clipboard image data.Expose the clipboard.clear() function to clear system clipboard.Expose the clipboard.getFormat() function to check the system clipboard data format. This function returns text, image, and unknown enum values based on existing data on the clipboard.  ","version":"Next","tagName":"h3"},{"title":"v5.0.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v500","content":" ","version":"Next","tagName":"h2"},{"title":"API: Reading, writing with standard streams​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-reading-writing-with-standard-streams","content":" Implement app.readProcessInput(readAll=false) for reading string data from the standard input stream. This function can read a single line or multiple lines at once.Implement app.writeProcessOutput and app.writeProcessError for sending string data to standard output and error streams accordingly.  ","version":"Next","tagName":"h3"},{"title":"API: filesystem​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-filesystem-2","content":" Enable default recursive behavior in the filesystem.createDirectory function.Add filesystem.copy, filesystem.move, and filesystem.remove functions.Add {recursive} options object to filesystem.readDirectory(path, options) activate recursive directory listing.  ","version":"Next","tagName":"h3"},{"title":"API: os​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-os-2","content":" Accept stdin with the background mode of the os.execCommand function.  ","version":"Next","tagName":"h3"},{"title":"Core: security​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-security","content":" Now, all app clients and extensions require a valid connect token (A part of the NL_TOKEN) to connect to the Neutralinojs framework WebSocket server to receive app events.The framework now sends the access token, connect token, port, and extension identifier to extension processes via the standard input, so other processes can't read them by scanning the process list.The WebSocket client connection origin is checked during the HTTP/WS handshake to make sure that only local clients connect with a specific Neutralinojs app that runs on window, browser, or Chrome mode. Any URL origin is allowed for the cloud mode.The above security enhancements fix two security advisories on GitHub.  ","version":"Next","tagName":"h3"},{"title":"Global variables​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#global-variables","content":" Now the NL_ARCH global variable returns the same value that computer.getArch returns.  ","version":"Next","tagName":"h3"},{"title":"Deprecations​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#deprecations","content":" Removed filesystem.removeFile, filesystem.removeDirectory, filesystem.copyFile, and filesystem.moveFile functions.Extensions won't receive --nl-port, --nl-token, and --nl-extension-id as command-line arguments. Now the framework sends these via stdin as a JSON string.  ","version":"Next","tagName":"h3"},{"title":"v4.15.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v4150","content":" ","version":"Next","tagName":"h2"},{"title":"Configuration: custom user agent string​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#configuration-custom-user-agent-string","content":" Developers sometimes use the user agent string to indentify the client in server-side and client-side source codes. Now, Neutralinojs lets app developers extend the default user agent string with a custom string via the window.extendUserAgentWith configuration property and the --window-extend-user-agent-with=&lt;string&gt; command-line option, as shown in the following example:  &quot;window&quot;: { // --- &quot;extendUserAgentWith&quot;: &quot;MyAppClient&quot; }   The above configuration extends the user agent string:  console.log(navigator.userAgent) // &lt;Default UA&gt; MyAppClient   ","version":"Next","tagName":"h3"},{"title":"Configuration: custom configuration files​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#configuration-custom-configuration-files","content":" The Neutralinojs framework typically loads the application configuration content from the neutralino.config.json file, but sometimes app developers need to use a custom configuration filename during development (i.e., For separating production and development environments). Now, you can use the --config-file=&lt;filename&gt; internal command-line parameter to use a custom app configuration, as shown in the following example:  ./myapp-linux_x64 --load-dir-res --config-file=neutralino-dev.config.json   ","version":"Next","tagName":"h3"},{"title":"v4.14.1​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v4141","content":" ","version":"Next","tagName":"h2"},{"title":"DevOps​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#devops-1","content":" Use Windows 2019 server and macOS 11 (Big Sur) to compile framework release artifacts.Set minimum supported macOS version via MACOSX_DEPLOYMENT_TARGET=10.7  ","version":"Next","tagName":"h3"},{"title":"v4.14.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v4140","content":" ","version":"Next","tagName":"h2"},{"title":"Filesystem API​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#filesystem-api","content":" Introduce the filesystem.getWatchers function to get all created watchers.Add binary file reading support for the filesystem.updateOpenedFile(id, action, data) function. This function implements readBinary and readAllBinary actions and dataBinary output action in the openedFile global event.Return the existing watcher identifier from filesystem.createWatcher if there is an existing active watcher for the given path.  ","version":"Next","tagName":"h3"},{"title":"OS API​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#os-api","content":" Add a way to set current working directory for process creation functions: os.execCommand(command, options) now supports cwd via the options object and os.spawnProcess(command, cwd) accepts currently working directory via the second string parameter.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-6","content":" Fix Unicode charactor issues in the tray menu on Windows.Avoid including null bytes to file reader events initiated by the filesystem.openFile function.Discard window method executions on non-window modes.  ","version":"Next","tagName":"h3"},{"title":"DevOps​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#devops-2","content":" Update external GitHub Action packages to their latest versions.Fix issues of the failing test cases  ","version":"Next","tagName":"h3"},{"title":"v4.13.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v4130","content":" ","version":"Next","tagName":"h2"},{"title":"Core: persistent window state​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-persistent-window-state","content":" Now the framework stores the primary window state in a temporary file (JSON formatted) and loads during the startup process. This feature stores and sets the window position (x, y coordinates), size (width and height), and maximized status. This feature is enabled by default in all platforms, but app developers can turn it off by using false for the window.useSavedState configuration attribute or --window-use-saved-state internal CLI argument.  Also, the window state loading status is available via the NL_WSAVSTLOADED global variable. The framework sets true for this boolean variable if the window state was loaded from the saved configuration.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-7","content":" Fix several issues in the webview Windows code (i.e., Wait for the window close event, window style fixes, etc.).  ","version":"Next","tagName":"h3"},{"title":"v4.12.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v4120","content":" ","version":"Next","tagName":"h2"},{"title":"API: window​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-window-3","content":" Add window.center to center the application window programmatically.  ","version":"Next","tagName":"h3"},{"title":"Core: configuration​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-configuration","content":" Setting the initial window position via modes.window.x and modes.window.y integer config props.Centering the window at startup via modes.window.center boolean config props.Add config overrides for the startup window position: --window-center=&lt;true|false&gt;, --window-x=&lt;int&gt; and --window-y=&lt;int&gt;  ","version":"Next","tagName":"h3"},{"title":"Core: webview​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-webview","content":" Statically link the Webview2 loader library on Windows, so app developers can package their apps without including the WebView2Loader.dll file.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-8","content":" Added Unicode characters support for Neutralinojs Windows.  ","version":"Next","tagName":"h3"},{"title":"v4.11.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v4110","content":" ","version":"Next","tagName":"h2"},{"title":"API: File watchers​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-file-watchers","content":" In some scenarios, Neutralinojs app developers need to implement file watchers in their apps. Earlier, Neutralinojs API didn't offer a native file watcher API and developers had to use less-performant workarounds, such as making recursive filesystem.readDirectory calls. The new file watchers API lets you create native, cross-platform, event-based file watchers for filesystem paths with the following functions:  filesystem.createWatcher(path): Creates a new file watcher for a given path and returns the watcher identifier.filesystem.removeWatcher(watcherId): Removes a files watcher based on a file watcher identifier.  Whenever a filesystem change occurs, file watcher instances dispatch the watchFile event with the following data:  id: Watcher identifieraction: Filesystem change: add, delete, modified, and moveddir: Directory pathfilename: Modified file  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-9","content":" Fix the initial window flashing and hidden window state issues on Windows.Fix data corruption in binary file appending.Apply dark/light themes based on system preferences on Windows.  ","version":"Next","tagName":"h3"},{"title":"v4.10.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v4100","content":" ","version":"Next","tagName":"h2"},{"title":"DevOps​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#devops-3","content":" Generate official macOS arm64 (For Apple M1 and higher devices) and universal binaries with the GitHub workflow.  ","version":"Next","tagName":"h3"},{"title":"Improvements/bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#improvementsbugfixes-10","content":" Add a JSON schema definition for the neutralino.config.json file.Fix source code compilation issues on macOS arm64 systems.  ","version":"Next","tagName":"h3"},{"title":"ESM/NPM support​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#esmnpm-support","content":" Neutralinojs typically stores the client library implementation in a separate file (neutralino.js). This approach makes Neutralinojs app development process easier with a globally exposed JavaScript object, Neutralino. But, modern web developers use ES modules and they usually like to fetch dependencies from NPM. So, now, developers can load the __neutralino_globals.js internal script (i.e., &lt;script src=&quot;__neutralino_globals.js&quot;&gt;&lt;/script&gt;) to load only globals. Then, they can use the client library implementation via neutralino.mjs with the neu CLI or from @neutralinojs/lib with a Node package manager.  ","version":"Next","tagName":"h3"},{"title":"v4.9.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v490","content":" ","version":"Next","tagName":"h2"},{"title":"API: Custom methods​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-custom-methods","content":" Neutralinojs offers the extensions API to write custom backend code with any programming language, but extensions come with the following drawbacks that affect apps in several scenarios:  Extensions use a shared WebSocket for communication, so using direct C++ references (i.e., the window handler) is impossible within extensions.The developer is responsible for packaging their extension binaries.A C++-based extension is not fast as native C++-based code due to the WebSockets-based IPC.  Alternatively, a developer can download the framework C++ code, modify it, and re-compile it. But, the developer may face issues while synching upstream code modifications. So, Neutralinojs offers a separate namespace, a function template, inbuilt helper functions (i.e., to get the window handler, validation, etc.), and a developer guide to add custom APIs to the Neutralinojs framework without updating the framework core.  Example:  let res = await Neutralino.custom.fetch('https://neutralino.js.org');   If developers make a custom API that others can use, we motivate them to contribute to the Neutralinojs framework by adding it to the main codebase.  Example:  let res = await Neutralino.net.fetch('https://neutralino.js.org');   If the developer adds a new custom method to the framework, the client library will automatically export it to the Neutralino.custom namespace by using the NL_CMETHODS internal global variable. The Neutralino.custom.getMethods function returns an array of custom methods similar to NL_CMETHODS.  ","version":"Next","tagName":"h3"},{"title":"API: File streams​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-file-streams","content":" The current Neutralinojs API offers non-stream-based (Promise-based but synchronous-like) functions for working with files. For example, the filesystem.readFile function reads the file content and retrieves data synchronously even though the WebSocket communication mechanism supports asynchronous patterns. However, the synchronous API lets developers work with files in a simple way, but they face the following issues in some scenarios:  Reading large files is not performance-friendly (The whole file content gets loaded into the memory).Unable to work with dynamic file objects (i.e., Device files).File descriptors are not persistent within the app lifecycle as they get destroyed after native API calls.  To solve this issue, we offer an event-based file stream API with the following functions/events:  Functions​  filesystem.openFile: Creates a file stream by openning a file.filesystem.updateOpenedFile: Triggers a file read/readAll event or sets the file cursor.filesystem.getOpenedFileInfo: Returns (awaited) information about the file stream (Props: id, eof, pos, and lastRead)  Events​  openedFile: Occurs per each file read event and whenever the file stream reaches EOF.  ","version":"Next","tagName":"h3"},{"title":"v4.8.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v480","content":" ","version":"Next","tagName":"h2"},{"title":"API: os.getEnvs​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-osgetenvs","content":" os.getEnv returns a value for a given environment variable key. Developers had to use alternative methods to retrieve a list of all environment variables with values. The os.getEnvs returns all environment variables as a JavaScript object similar to Node's process.env.  ","version":"Next","tagName":"h3"},{"title":"API: filesystem​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-filesystem-3","content":" Added pos and size options for readFile and readBinaryFile methods to set the file cursor position and buffer size respectively.  ","version":"Next","tagName":"h3"},{"title":"API: storage.getKeys​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-storagegetkeys","content":" Added the storage.getKeys function to get an array of Neutralinojs storage keys. Now, developers don't need to write their own functions to retrieve storage keys with the filesystem API.  ","version":"Next","tagName":"h3"},{"title":"API: computer.getMousePosition​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-computergetmouseposition","content":" Returns the current mouse cursor position via a JavaScript object that has x and y props. This function is helpful for develping interactive desktop widgets on all supported platforms.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#bugfixesimprovements","content":" Replaced string error codes with enums in the C++ source code.Some refactorings done in C++ struct definitions and return values.  ","version":"Next","tagName":"h3"},{"title":"v4.7.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v470","content":" ","version":"Next","tagName":"h2"},{"title":"API: System information API​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-system-information-api","content":" Ealier, we had the getMemoryInfo function in the computer namespace to retrieve system memory statistics. Now, we have added more functions to get details about the CPU, operating system, kernel, and connected displays:  computer.getArch: Returns the CPU architecture. i.e, x64, arm, etc.computer.getKernelInfo: Returns the operating system's kernel details.computer.getOSInfo: Returns the operating system details.computer.getCPUInfo: Returns the CPU details.computer.getDisplays: Returns an array of all connected displays with the resolution, frequency-like information.  ","version":"Next","tagName":"h3"},{"title":"API: os dialogs​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-os-dialogs","content":" Add the defaultPath option to showSaveDialog, showOpenDialog, and showFolderDialog functions to set the initial path/filename of system dialogs.  ","version":"Next","tagName":"h3"},{"title":"DevOps​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#devops-4","content":" Run the test suite on Windows GitHub Actions instance.Fix the armhf framework binary generation issue in the GitHub Actions workflow.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#bugfixesimprovements-1","content":" Hide the automation info bar from the Chrome mode by default -- Developers can add the --enable-automation flag to the config file if they need the particular command-line switch.  ","version":"Next","tagName":"h3"},{"title":"v4.6.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v460","content":" ","version":"Next","tagName":"h2"},{"title":"API: Process spawning API​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-process-spawning-api","content":" We have os.execCommand for launching processes, but it's synchronous, meaning, the developer has to wait unti process completion to receive pid, stdOut and stdErr. execCommand is not suitable for long-running processes. The new spawning API offers API functions for handling long-running processes in a multi-threaded way.  os.spawnProcess(command): Spawns a process and returns id (A virtual Neutralino-scoped pid) and pid (Operating system-level pid).os.getSpawnedProcesses(): Returns a list of spawned processes.os.updateSpawnedProcess(id, action, data): Sends an action event for the spawned process. Supports the following actions: stdIn: Sends a string via the standard input stream. data is the input string.stdInEnd: Closes the standard input stream.exit: Terminates the spawned process.  ","version":"Next","tagName":"h3"},{"title":"Core: events​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-events","content":" spawnedProcess: Dispatched when there is a change in the spawned process. CustomEvent gets triggered with the following object:  { id: &lt;id&gt;, pid: &lt;pid&gt;, action: &lt;action&gt;, data: &lt;data&gt; }   Available actions:  stdOut: Outputs standard output data. data contains the standard output payload.stdErr: Outputs standard error data. data contains the standard error payload.exit: Notified when the process terminates. data contains the process exit code.  ","version":"Next","tagName":"h3"},{"title":"DevOps​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#devops-5","content":" Add official Linux ARM (armhf and arm64) binary build support for the standard release workflow and nightly build.  ","version":"Next","tagName":"h3"},{"title":"API: filesystem​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-filesystem-4","content":" Expose createdAt and modifiedAt JavaScript timestamps via the filesystem.getStats function.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#bugfixesimprovements-2","content":" Hide the .storage directory (Neutralinojs storage location) on Windows.Support using query parameters in resources URLs. i.e., index.html?v=2.0 is supported, but caching is not yet implemented.Show a user-friendly error message for Neutralinojs server initialization failures.  ","version":"Next","tagName":"h3"},{"title":"v4.5.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v450","content":" ","version":"Next","tagName":"h2"},{"title":"Core: events​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-events-1","content":" Added windowFocus and windowBlur native events.  ","version":"Next","tagName":"h3"},{"title":"DevOps​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#devops-6","content":" Use BuildZri for C++ build automation.Implement a new workflow for nightly releases. Developers can get the nightly release binaries via the nightly version tag.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#bugfixesimprovements-3","content":" Search and dynamically load app indicator libraries on Linux. This enhancement supports Neutralinojs to start without a crash when there is no app indicator library present on the system.Throw NE_OS_TRAYIER from the os.setTray function for initialization failures.Fix binary file write error on Windows with the filesystem.writeBinaryFile function. This was fixed by using LF as the line breaker on all platforms as a portable solution. If the developer needs CRLF on Windows (or CR on Darwin), the developer needs to handle it explicitly with NL_OS.  ","version":"Next","tagName":"h3"},{"title":"Core: global variables​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-global-variables-1","content":" Add NL_COMMIT to hold framework's release commit. This is helpful to find the nightly release's code snapshot.  ","version":"Next","tagName":"h3"},{"title":"v4.4.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v440","content":" ","version":"Next","tagName":"h2"},{"title":"API: window​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-window-4","content":" Add window.getPosition to get the current window coordinates.  ","version":"Next","tagName":"h3"},{"title":"API: filesystem​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-filesystem-5","content":" Add filesystem.appendFile to append text content to a file. Thrown errors are similar to the filesystem.writeFile function.Add filesystem.appendBinaryFile to append binary content to a file. Thrown errors are similar to the filesystem.writeBinaryFile function.  ","version":"Next","tagName":"h3"},{"title":"Dependencies​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#dependencies","content":" Use ayatana-appindicator3-0.1 instead of appindicator3-0.1 (Marked as obsolete in Debian packages)  ","version":"Next","tagName":"h3"},{"title":"Bugfixes/improvements​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#bugfixesimprovements-4","content":" Dynamically call SetProcessDpiAwarenessContext function to support previous Windows versions.Display the native method name with the NE_RT_NATPRME error payload.  ","version":"Next","tagName":"h3"},{"title":"v4.3.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v430","content":" ","version":"Next","tagName":"h2"},{"title":"Core: auth​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-auth","content":" Added tokenSecurity to the configuration to improve the security of NL_TOKEN. Accepted values are none and one-time. If none is set, Neutralinojs server will always expose NL_TOKEN for any application instance, so you can open Neutralinojs apps from browser directly. If one-time (recommended) is set, Neutralinojs server expose NL_TOKEN only once and client persists the token in sessionStorage, so all other clients that acces the app after the initial client will get an auth error message (Displayed to the user via HTML).  ","version":"Next","tagName":"h3"},{"title":"API: window​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-window-5","content":" window.setAlwaysOnTop(bool) was added.window.getSize was added.  ","version":"Next","tagName":"h3"},{"title":"Core: global variables​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-global-variables-2","content":" Added NL_EXTENABLED which returns true if extensions are enabled. It is used to check extensions status faster during initialization process.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#bugfixes","content":" Fixed the file dialog order issue on Windows.Removed tray icon when the application exits.  ","version":"Next","tagName":"h3"},{"title":"v4.2.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v420","content":" ","version":"Next","tagName":"h2"},{"title":"API: clipboard​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-clipboard-2","content":" Add clipboard API for all platforms. Supports reading and writing text in the system clipboard.  ","version":"Next","tagName":"h3"},{"title":"Core: configuration​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-configuration-1","content":" Accept chrome-related CLI args: --chrome-width, --chrome-height, and --chrome-args.Accept --neu-dev-extension to enable devtools connections (For internal usages with CLI).Accept custom HTTP headers via serverHeaders option.  ","version":"Next","tagName":"h3"},{"title":"API: global variables​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-global-variables","content":" Added NL_RESMODE to get details about application resources source. Returns bundle if resources are loaded from resources.neu. Otherwise, returns directory.  ","version":"Next","tagName":"h3"},{"title":"Bugfixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#bugfixes-1","content":" Fix chrome mode user data dir issue (Support paths with spaces).Fix browser mode's shutdown issue with neu CLI.  ","version":"Next","tagName":"h3"},{"title":"v4.1.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v410","content":" ","version":"Next","tagName":"h2"},{"title":"API: window​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-window-6","content":" window.getTitle returns the current native window title.  ","version":"Next","tagName":"h3"},{"title":"API: os​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-os-3","content":" Remove NE_OS_ENVNOEX from os.getEnv and return an empty string if environment variable is not defined.  ","version":"Next","tagName":"h3"},{"title":"Core: Chrome mode​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-chrome-mode","content":" Now you can run Neutralinojs apps as Chrome apps via the chrome mode.  ","version":"Next","tagName":"h3"},{"title":"Core: configuration​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-configuration-2","content":" Getting chrome mode config from modes.chrome. Added height, width, and args specially for the chrome mode.  ","version":"Next","tagName":"h3"},{"title":"v4.0.0​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#v400","content":" ","version":"Next","tagName":"h2"},{"title":"API: os.execCommand​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-osexeccommand","content":" Renamed shouldRunInBackground option to background.Supports stdIn as an optional input.Returns multiple values: stdOut, stdErr, pid, and exitCode.  ","version":"Next","tagName":"h3"},{"title":"Core: API extensions​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-api-extensions","content":" Config file supports new extensions array globally or in a specific mode.Neutralino spawns extension processes based on extensions array.Neutralino doesn't send kill signals to extension processes. The extension developer needs to stop processes properly.extension setting has 4 fields: id, command, commandLinux,commandDarwin, and commandWindows.The command's (platform-specific command's) value accepts ${NL_PATH} global variable.Each extension process instance is called with three CLI args: --nl-port={}, --nl-extension-id={} and --nl-token={}Enable/disable extensions with enableExtensions config.  ","version":"Next","tagName":"h3"},{"title":"Core: Static server​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-static-server","content":" Supports setting document root (with documentRoot) via config. Now, it's possible to launch app without a subdirectory in the URL.  ","version":"Next","tagName":"h3"},{"title":"Core: Community driver processes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#core-community-driver-processes","content":" Now developers can use Neutralinojs as a part of their software with any programming language by spawning Neutralinojs as a child process. Use exportAuthInfo to write auth details to ${NL_PATH}/.tmp/auth_info.json. Then the parent process can pickup access details there. Note that WebSocket communication needs to be initiated via extensions API/loader.  ","version":"Next","tagName":"h3"},{"title":"API: app.broadcast​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-appbroadcast","content":" Sends an event to all app clients. This method is for extension developers.  ","version":"Next","tagName":"h3"},{"title":"API: events.broadcast​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-eventsbroadcast","content":" Sends an event to all clients (apps and extensions). Useful for notifying important general events.  ","version":"Next","tagName":"h3"},{"title":"API: extensions​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-extensions","content":" dispatch: Sends an event to a specific extension.broadcast: Sends an event to all connected extensions. Useful for sending shutdown signals.getStats: Returns details about loaded extensions and connected extensions.  ","version":"Next","tagName":"h3"},{"title":"API: updater​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#api-updater","content":" checkForUpdates: Send a request to a seed URL (JSON) and fetch update details.install: Install updates based on the currently downloaded manifest.  ","version":"Next","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#events-1","content":" appClientConnect and appClientDisconnect: Occurs when a new app instance is launched and closed respectively.extClientConnect and extClientDisconnect: Occurs when a new extension is connected and disconnected respectively.extensionReady can be used to implement immediate extension calls. This is implemented from the client-side with extensions.getStats and extClientConnect. This event gurantees that it will be triggered regardless of the extension's start time.  ","version":"Next","tagName":"h3"},{"title":"Error codes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#error-codes","content":" NE_EX_EXTNOTC: Thrown by extensions.dispatch if the target extension is not connected.NE_UP_CUPDMER: Thrown by updater.checkForUpdates if the JSON update manifest is invalid or applicationId is not matching.NE_UP_CUPDERR: Thrown by updater.checkForUpdates if the updater API cannot fetch the manifest.NE_UP_UPDNOUF: Thrown by updater.install when the update manifest is not loaded.NE_UP_UPDINER: Thrown by updater.install for update installation errors.  ","version":"Next","tagName":"h3"},{"title":"Bug fixes​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#bug-fixes","content":" Fix port 0 issue with modes. Earlier, if the developer sets port as 0 from a specific mode, the NL_PORT also becomes 0.Fix an issue with writeToLogFile config option. Earlier, the log file was created even this option is set to false.  ","version":"Next","tagName":"h3"},{"title":"Global variables​","type":1,"pageTitle":"Framework","url":"/docs/release-notes/framework#global-variables-1","content":" NL_APPVERSION: Value of the version key in the config file. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}